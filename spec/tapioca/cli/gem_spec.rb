# typed: true
# frozen_string_literal: true

require "spec_helper"
require "tapioca/helpers/test/template"

module Tapioca
  class GemSpec < SpecWithProject
    include Tapioca::Helpers::Test::Template

    FOO_RB = <<~RB
      module Foo
        PI = 3.1415

        def self.foo(a = 1, b: 2, **opts)
          number = opts[:number] || 0
          39 + a + b + number
        end
      end

      module Reopened
        E = 2.718281828459045
      end
    RB

    FOO_RBI = <<~RBI
      # typed: true

      # DO NOT EDIT MANUALLY
      # This is an autogenerated file for types exported from the `foo` gem.
      # Please instead update this file by running `bin/tapioca gem foo`.


      module Foo
        class << self
          def foo(a = T.unsafe(nil), b: T.unsafe(nil), **opts); end
        end
      end

      Foo::PI = T.let(T.unsafe(nil), Float)
      module Reopened; end
      Reopened::E = T.let(T.unsafe(nil), Float)
    RBI

    BAR_RB = <<~RB
      module Bar
        PI = 3.1415

        def self.bar(a = 1, b: 2, **opts)
          number = opts[:number] || 0
          39 + a + b + number
        end
      end

      module Reopened
        PI = Math::PI
        TAU = 2 * PI
      end
    RB

    BAR_RBI = <<~RBI
      # typed: true

      # DO NOT EDIT MANUALLY
      # This is an autogenerated file for types exported from the `bar` gem.
      # Please instead update this file by running `bin/tapioca gem bar`.


      module Bar
        class << self
          def bar(a = T.unsafe(nil), b: T.unsafe(nil), **opts); end
        end
      end

      Bar::PI = T.let(T.unsafe(nil), Float)
      module Reopened; end
      Reopened::PI = T.let(T.unsafe(nil), Float)
      Reopened::TAU = T.let(T.unsafe(nil), Float)
    RBI

    BAZ_RB = <<~RB
      module Baz
        class Test
          def fizz
            "abc" * 10
          end
        end
      end
    RB

    BAZ_RBI = <<~RBI
      # typed: true

      # DO NOT EDIT MANUALLY
      # This is an autogenerated file for types exported from the `baz` gem.
      # Please instead update this file by running `bin/tapioca gem baz`.


      module Baz; end

      class Baz::Test
        def fizz; end
      end
    RBI

    before(:all) do
      @project.require_default_gems
    end

    describe "cli::gem" do
      before(:all) do
        @project.bundle_install!
      end

      before do
        @project.reset_bundler_version
      end

      it "must support 'gems' as an alias to the command" do
        foo = mock_gem("foo", "0.0.1") do
          write!("lib/foo.rb", FOO_RB)
        end

        @project.require_mock_gem(foo)
        @project.bundle_install!

        result = @project.tapioca("gems foo")

        assert_stdout_includes(result, <<~OUT)
          Compiled foo
                create  sorbet/rbi/gems/foo@0.0.1.rbi
        OUT

        assert_project_file_equal("sorbet/rbi/gems/foo@0.0.1.rbi", FOO_RBI)

        assert_empty_stderr(result)
        assert_success_status(result)
      end

      describe "flags" do
        it "must show an error if --all is supplied with arguments" do
          result = @project.tapioca("gem --all foo")

          assert_stderr_equals(<<~ERR, result)
            Option '--all' must be provided without any other arguments
          ERR

          assert_empty_stdout(result)
          refute_success_status(result)
        end

        it "must show an error if --verify is supplied with arguments" do
          result = @project.tapioca("gem --verify foo")

          assert_stderr_equals(<<~ERR, result)
            Option '--verify' must be provided without any other arguments
          ERR

          assert_empty_stdout(result)
          refute_success_status(result)
        end

        it "must show an error if both --all and --verify are supplied" do
          result = @project.tapioca("gem --all --verify")

          assert_stderr_equals(<<~ERR, result)
            Options '--all' and '--verify' are mutually exclusive
          ERR

          assert_empty_stdout(result)
          refute_success_status(result)
        end

        it "must show an error if --include-dependencies is supplied without gem" do
          result = @project.tapioca("gem --include-dependencies")

          assert_stderr_equals(<<~ERR, result)
            Option '--include-dependencies' must be provided with gems
          ERR

          assert_empty_stdout(result)
          refute_success_status(result)
        end
      end

      describe "generate" do
        before(:all) do
          @project.tapioca("configure")
        end

        after do
          project.write_gemfile!(project.tapioca_gemfile)
          @project.require_default_gems
          project.remove!("sorbet/rbi")
          project.remove!("../gems")
          project.remove!("sorbet/tapioca/require.rb")
          project.remove!("config/application.rb")
        end

        it "must generate a .gitattributes file in the output folder" do
          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", FOO_RB)
          end

          @project.require_mock_gem(foo)
          @project.bundle_install!
          result = @project.tapioca("gem foo --outdir output")

          assert_stdout_includes(result, <<~OUT)
            Compiled foo
          OUT

          assert_empty_stderr(result)
          assert_success_status(result)

          assert_project_file_equal("output/.gitattributes", <<~CONTENT)
            **/*.rbi linguist-generated=true
          CONTENT
        ensure
          @project.remove!("output")
        end

        it "must not generate a .gitattributes file if the output folder is not created" do
          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", FOO_RB)
          end

          @project.require_mock_gem(foo)
          @project.bundle_install!

          # Generate for `foo` but exclude it as well, so that we don't create the output folder
          result = @project.tapioca("gem foo --outdir output --exclude foo")

          assert_stdout_includes(result, <<~OUT)
            Nothing to do.
          OUT

          assert_empty_stderr(result)
          assert_success_status(result)

          refute_project_file_exist("output/.gitattributes")
        ensure
          @project.remove!("output")
        end

        it "must generate a single gem RBI" do
          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", FOO_RB)
          end

          bar = mock_gem("bar", "0.3.0") do
            write!("lib/bar.rb", BAR_RB)
          end

          @project.require_mock_gem(foo)
          @project.require_mock_gem(bar)
          @project.bundle_install!

          result = @project.tapioca("gem foo")

          assert_stdout_includes(result, <<~OUT)
            Compiled foo
                  create  sorbet/rbi/gems/foo@0.0.1.rbi
          OUT

          assert_project_file_equal("sorbet/rbi/gems/foo@0.0.1.rbi", FOO_RBI)
          refute_project_file_exist("sorbet/rbi/gems/bar@0.3.0.rbi")

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must generate RBI for a default gem" do
          gem_name = "base64"
          gem_top_level_constant = "module Base64"

          gem_spec = ::Gem::Specification.default_stubs("*.gemspec").find do |spec|
            spec.name == gem_name && spec.default_gem?
          end
          assert(gem_spec, "Cannot find default '#{gem_name}' gem")

          gem_version = gem_spec.version.to_s

          @project.require_real_gem(gem_name, gem_version)
          @project.bundle_install!

          result = @project.tapioca("gem #{gem_name}")

          assert_stdout_includes(result, <<~OUT)
            Compiled #{gem_name}
                  create  sorbet/rbi/gems/#{gem_name}@#{gem_version}.rbi
          OUT

          rbi_contents = @project.read("sorbet/rbi/gems/#{gem_name}@#{gem_version}.rbi")
          assert_includes(rbi_contents, gem_top_level_constant)

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must generate gem RBI in correct output directory" do
          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", FOO_RB)
          end

          @project.require_mock_gem(foo)
          @project.bundle_install!

          result = @project.tapioca("gem foo --outdir rbis/")

          assert_stdout_includes(result, <<~OUT)
            Compiled foo
          OUT

          assert_project_file_equal("rbis/foo@0.0.1.rbi", FOO_RBI)

          assert_empty_stderr(result)
          assert_success_status(result)

          @project.remove!("rbis/")
        end

        it "must generate a gem RBI with the ones exported from the gem by default" do
          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", FOO_RB)

            write!("rbi/foo.rbi", <<~RBI)
              module Foo
                sig { params(a: String, b: Integer, opts: T.untyped).void }
                def self.foo(a = T.unsafe(nil), b: T.unsafe(nil), **opts); end
              end
            RBI

            write!("rbi/foo/bar.rbi", <<~RBI)
              module Foo
                def foo; end
              end
            RBI

            write!("rbi/foo/bar/baz.rbi", <<~RBI)
              module Foo::Bar
                def bar; end
              end
            RBI
          end

          @project.require_mock_gem(foo)
          @project.bundle_install!

          result = @project.tapioca("gem foo")

          assert_stdout_includes(result, "create  sorbet/rbi/gems/foo@0.0.1.rbi")

          assert_project_file_equal("sorbet/rbi/gems/foo@0.0.1.rbi", <<~RBI)
            # typed: true

            # DO NOT EDIT MANUALLY
            # This is an autogenerated file for types exported from the `foo` gem.
            # Please instead update this file by running `bin/tapioca gem foo`.


            module Foo
              def foo; end

              class << self
                sig { params(a: String, b: Integer, opts: T.untyped).void }
                def foo(a = T.unsafe(nil), b: T.unsafe(nil), **opts); end
              end
            end

            module Foo::Bar
              def bar; end
            end

            Foo::PI = T.let(T.unsafe(nil), Float)
            module Reopened; end
            Reopened::E = T.let(T.unsafe(nil), Float)
          RBI

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must generate a gem RBI without the ones exported from the gem when called with `--no-exported-gem-rbis`" do
          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", FOO_RB)

            write!("rbi/foo.rbi", <<~RBI)
              module RBI::Foo
                sig { void }
                def foo; end
              end
            RBI

            write!("rbi/foo/bar.rbi", <<~RBI)
              module RBI::Bar
                def bar; end
              end
            RBI

            write!("rbi/foo/bar/baz.rbi", <<~RBI)
              module RBI::Bar::Baz
                def baz; end
              end
            RBI
          end

          @project.require_mock_gem(foo)
          @project.bundle_install!

          result = @project.tapioca("gem foo --no-exported-gem-rbis")

          assert_stdout_includes(result, "create  sorbet/rbi/gems/foo@0.0.1.rbi")
          assert_project_file_equal("sorbet/rbi/gems/foo@0.0.1.rbi", FOO_RBI)
          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must generate a gem RBI and skip exported gem RBIs if they contain errors" do
          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", FOO_RB)

            write!("rbi/foo.rbi", <<~RBI)
              module Foo # Syntax error
            RBI
          end

          @project.require_mock_gem(foo)
          @project.bundle_install!

          result = @project.tapioca("gem foo")

          assert_stdout_includes(result, "create  sorbet/rbi/gems/foo@0.0.1.rbi")

          assert_stderr_includes(result, "RBIs exported by `foo` contain errors and can't be used:")
          assert_stderr_includes(
            result,
            "unexpected end-of-input, assuming it is closing the parent top level context. expected an `end` to " \
              "close the `module` statement.",
          )
          assert_stderr_includes(result, "foo/rbi/foo.rbi:2:0")

          assert_project_file_equal("sorbet/rbi/gems/foo@0.0.1.rbi", FOO_RBI)

          assert_success_status(result)
        end

        it "must generate a gem RBI and skip exported gem RBIs if they contain conflicts" do
          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", FOO_RB)

            write!("rbi/foo.rbi", <<~RBI)
              module RBI::Foo
                def foo(x); end
              end
            RBI

            write!("rbi/bar.rbi", <<~RBI)
              module RBI::Foo
                def foo(a, b, c); end
              end
            RBI
          end

          @project.require_mock_gem(foo)
          @project.bundle_install!

          result = @project.tapioca("gem foo")

          assert_stdout_includes(result, "create  sorbet/rbi/gems/foo@0.0.1.rbi")

          assert_stderr_includes(result, "RBIs exported by `foo` contain conflicts and can't be used:")
          assert_stderr_includes(result, "Conflicting definitions for `::RBI::Foo#foo(a, b, c)`")
          assert_stderr_includes(result, "Found at:")
          assert_stderr_includes(result, "foo/rbi/bar.rbi:2:2-2:23")
          assert_stderr_includes(result, "foo/rbi/foo.rbi:2:2-2:17")

          assert_project_file_equal("sorbet/rbi/gems/foo@0.0.1.rbi", FOO_RBI)

          assert_success_status(result)
        end

        it "must generate a gem RBI and resolves conflicts with exported gem RBIs by keeping the generated RBI" do
          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", FOO_RB)

            write!("rbi/foo.rbi", <<~RBI)
              module Foo
                class << self
                  def foo; end
                end
              end
            RBI
          end

          @project.require_mock_gem(foo)
          @project.bundle_install!

          result = @project.tapioca("gem foo")

          assert_stdout_includes(result, "create  sorbet/rbi/gems/foo@0.0.1.rbi")
          assert_project_file_equal("sorbet/rbi/gems/foo@0.0.1.rbi", FOO_RBI)
          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must remove outdated RBIs" do
          @project.require_mock_gem(mock_gem("foo", "0.0.1"))
          @project.require_mock_gem(mock_gem("bar", "0.3.0"))
          @project.require_mock_gem(mock_gem("baz", "0.0.2"))
          @project.bundle_install!

          @project.write!("sorbet/rbi/gems/foo@0.0.1.rbi")
          @project.write!("sorbet/rbi/gems/bar@0.3.0.rbi")
          @project.write!("sorbet/rbi/gems/baz@0.0.2.rbi")
          @project.write!("sorbet/rbi/gems/outdated@5.0.0.rbi")

          result = @project.tapioca("gem --all")

          assert_stdout_includes(result, "remove  sorbet/rbi/gems/outdated@5.0.0.rbi\n")
          refute_includes(result.out, "create sorbet/rbi/gems/foo@0.0.1.rbi")
          refute_includes(result.out, "create sorbet/rbi/gems/bar@0.3.0.rbi")
          refute_includes(result.out, "create sorbet/rbi/gems/baz@0.0.2.rbi")
          refute_includes(result.out, "-> Moving:")

          assert_project_file_exist("sorbet/rbi/gems/foo@0.0.1.rbi")
          assert_project_file_exist("sorbet/rbi/gems/bar@0.3.0.rbi")
          assert_project_file_exist("sorbet/rbi/gems/baz@0.0.2.rbi")
          refute_project_file_exist("sorbet/rbi/gems/outdated@5.0.0.rbi")

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must perform postrequire properly" do
          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", FOO_RB)
            write!("lib/foo/secret.rb", "class Secret; end")
          end

          @project.require_mock_gem(foo)
          @project.bundle_install!

          @project.write!("sorbet/tapioca/require.rb", <<~RB)
            require "foo/secret"
          RB

          result = @project.tapioca("gem foo")

          assert_stdout_includes(result, <<~OUT)
            Compiled foo
          OUT

          assert_project_file_equal("sorbet/rbi/gems/foo@0.0.1.rbi", template(<<~RBI))
            #{FOO_RBI.rstrip}
            class Secret; end
          RBI

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "loads gems that are marked `require: false`" do
          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", FOO_RB)
            write!("lib/foo/secret.rb", "class Secret; end")
          end

          bar = mock_gem("bar", "1.0.0") do
            write!("lib/bar.rb", <<~RUBY)
              module Foo
                MY_CONSTANT = 42
              end
            RUBY
          end

          @project.require_mock_gem(foo, require: false)
          @project.require_mock_gem(bar, require: false)
          @project.bundle_install!

          @project.write!("sorbet/tapioca/require.rb", <<~RB)
            require "foo/secret"
          RB

          result = @project.tapioca("gem foo --exclude bar")

          refute_includes(result.out, <<~OUT)
            Compiled bar
          OUT

          assert_stdout_includes(result, <<~OUT)
            Compiled foo
          OUT

          refute_project_file_exist("sorbet/rbi/gems/bar@1.0.0.rbi")
          assert_project_file_equal("sorbet/rbi/gems/foo@0.0.1.rbi", template(<<~RBI))
            #{FOO_RBI.rstrip}
            class Secret; end
          RBI

          assert_empty_stderr(result)
          assert_success_status(result)

          @project.remove!("sorbet/tapioca/require.rb")
        end

        it "explains what went wrong when it can't load the postrequire properly" do
          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", FOO_RB)
          end

          @project.require_mock_gem(foo)
          @project.bundle_install!

          @project.write!("sorbet/tapioca/require.rb", <<~RB)
            require "foo/will_fail"
          RB

          result = @project.tapioca("gem foo")

          assert_stderr_includes(result, <<~ERR)
            LoadError: cannot load such file -- foo/will_fail

            Tapioca could not load all the gems required by your application.
            If you populated sorbet/tapioca/require.rb with `bin/tapioca require`
            you should probably review it and remove the faulty line.
          ERR

          refute_success_status(result)

          @project.remove!("sorbet/tapioca/require.rb")
        end

        it "must not include `rbi` definitions into `tapioca` RBI" do
          skip "This test is failing on CI. See issue #2025 for details."

          @project.bundle_install!
          result = @project.tapioca("gem tapioca", exclude: [])

          assert_stdout_includes(result, <<~OUT)
            Compiled tapioca
          OUT

          tapioca_rbi_file = T.must(Dir.glob("#{@project.absolute_path}/sorbet/rbi/gems/tapioca@*.rbi").first)
          refute_includes(File.read(tapioca_rbi_file), "class RBI::Module")

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must generate multiple gem RBIs" do
          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", FOO_RB)
          end

          bar = mock_gem("bar", "0.3.0") do
            write!("lib/bar.rb", BAR_RB)
          end

          baz = mock_gem("baz", "0.0.2") do
            write!("lib/baz.rb", BAZ_RB)
          end

          @project.require_mock_gem(foo)
          @project.require_mock_gem(bar)
          @project.require_mock_gem(baz)
          @project.bundle_install!

          result = @project.tapioca("gem foo bar")

          assert_stdout_includes(result, "Compiled foo")
          assert_stdout_includes(result, "Compiled bar")
          assert_project_file_equal("sorbet/rbi/gems/foo@0.0.1.rbi", FOO_RBI)
          assert_project_file_equal("sorbet/rbi/gems/bar@0.3.0.rbi", BAR_RBI)
          refute_project_file_exist("sorbet/rbi/gems/baz@0.0.2.rbi")

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must generate RBIs for all gems in the Gemfile" do
          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", FOO_RB)
          end

          bar = mock_gem("bar", "0.3.0") do
            write!("lib/bar.rb", BAR_RB)
          end

          baz = mock_gem("baz", "0.0.2") do
            write!("lib/baz.rb", BAZ_RB)
          end

          @project.require_mock_gem(foo)
          @project.require_mock_gem(bar)
          @project.require_mock_gem(baz)
          @project.bundle_install!

          result = @project.tapioca("gem --all")

          assert_stdout_includes(result, "Compiled bar")
          assert_stdout_includes(result, "Compiled baz")
          assert_stdout_includes(result, "Compiled foo")

          assert_project_file_equal("sorbet/rbi/gems/foo@0.0.1.rbi", FOO_RBI)
          assert_project_file_equal("sorbet/rbi/gems/bar@0.3.0.rbi", BAR_RBI)
          assert_project_file_equal("sorbet/rbi/gems/baz@0.0.2.rbi", BAZ_RBI)

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must not generate RBIs for missing gem specs" do
          @project.write_gemfile!(<<~GEMFILE, append: true)
            platform :rbx do
              gem "sidekiq", "=7.1.2"
            end
          GEMFILE

          @project.bundle_install!

          result = @project.tapioca("gem --all")

          assert_stdout_includes(result, "completed with missing specs: sidekiq (7.1.2)")
          refute_includes(result.out, "Compiled sidekiq")

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must generate git gem RBIs with source revision numbers" do
          @project.write_gemfile!(<<~GEMFILE, append: true)
            gem("faraday", git: "https://github.com/lostisland/faraday", ref: "23e249563613971ced8f851230c46b9eeeefe931")
          GEMFILE

          @project.bundle_install!

          result = @project.tapioca("gem faraday")

          assert_stdout_includes(result, "Compiled faraday")

          assert_project_file_exist(
            "sorbet/rbi/gems/faraday@2.0.0.alpha.pre.4-23e249563613971ced8f851230c46b9eeeefe931.rbi",
          )

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must generate RBIs for gems whose folder location starts with the same prefix as project folder" do
          # Set the gem path so that the project folder is a prefix of the gem folder
          gem_path = @project.absolute_path + "-gem/foo"
          gem = mock_gem("foo", "0.0.1", path: gem_path)

          @project.require_mock_gem(gem)

          result = @project.tapioca("gem foo")

          assert_stdout_includes(result, "Compiled foo")
          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must respect exclude option" do
          @project.require_mock_gem(mock_gem("foo", "0.0.1"))
          @project.require_mock_gem(mock_gem("bar", "0.3.0"))
          @project.require_mock_gem(mock_gem("baz", "0.0.2"))
          @project.bundle_install!

          result = @project.tapioca("gem --all --exclude foo bar")

          refute_includes(result.out, "Compiled bar")
          assert_stdout_includes(result, "Compiled baz")
          refute_includes(result.out, "Compiled foo")

          refute_project_file_exist("sorbet/rbi/gems/foo@0.0.1.rbi")
          refute_project_file_exist("sorbet/rbi/gems/bar@0.3.0.rbi")
          assert_project_file_exist("sorbet/rbi/gems/baz@0.0.2.rbi")

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must respect include-dependencies option" do
          @project.require_real_gem("actionpack", "7.0.6")
          @project.require_mock_gem(mock_gem("foo", "0.0.1"))
          @project.require_mock_gem(mock_gem("bar", "0.3.0", dependencies: ["bundler", "actionpack"]))
          @project.require_mock_gem(mock_gem("baz", "0.0.2"))
          @project.bundle_install!

          result = @project.tapioca("gem foo bar --include-dependencies")

          assert_stdout_includes(result, "Compiled foo")
          assert_stdout_includes(result, "Compiled bar")
          assert_stdout_includes(result, "Compiled actionpack")
          assert_stdout_includes(result, "Compiled rack")
          refute_includes(result.out, "Compiled baz")
          refute_includes(result.out, "Compiled bundler")

          assert_project_file_exist("sorbet/rbi/gems/foo@0.0.1.rbi")
          assert_project_file_exist("sorbet/rbi/gems/bar@0.3.0.rbi")
          assert_project_file_exist("sorbet/rbi/gems/actionpack@7.0.6.rbi")
          assert_project_file_exist("sorbet/rbi/gems/rack@2.2.9.rbi")
          refute_project_file_exist("sorbet/rbi/gems/baz@0.0.2.rbi")

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "does not crash when the extras gem is loaded" do
          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", FOO_RB)
          end

          @project.require_real_gem("extras")
          @project.require_mock_gem(foo)
          @project.bundle_install!

          @project.write!("sorbet/tapioca/require.rb", <<~RB)
            require "extras/shell"
          RB

          result = @project.tapioca("gem foo")

          assert_stdout_includes(result, "Compiled foo")
          assert_project_file_exist("sorbet/rbi/gems/foo@0.0.1.rbi")
          assert_project_file_equal("sorbet/rbi/gems/foo@0.0.1.rbi", FOO_RBI)

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "generate an empty RBI file" do
          @project.require_mock_gem(mock_gem("foo", "0.0.1"))
          @project.bundle_install!

          result = @project.tapioca("gem foo")

          assert_stdout_includes(result, "Compiled foo (empty output)")
          assert_stdout_includes(result, "create  sorbet/rbi/gems/foo@0.0.1.rbi\n")

          assert_project_file_equal("sorbet/rbi/gems/foo@0.0.1.rbi", <<~RBI)
            # typed: true

            # DO NOT EDIT MANUALLY
            # This is an autogenerated file for types exported from the `foo` gem.
            # Please instead update this file by running `bin/tapioca gem foo`.


            # THIS IS AN EMPTY RBI FILE.
            # see https://github.com/Shopify/tapioca#manually-requiring-parts-of-a-gem
          RBI

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "generate an empty RBI file without header" do
          @project.require_mock_gem(mock_gem("foo", "0.0.1"))
          @project.bundle_install!

          result = @project.tapioca("gem foo --no-file-header")

          assert_project_file_equal("sorbet/rbi/gems/foo@0.0.1.rbi", <<~RBI)
            # typed: true

            # THIS IS AN EMPTY RBI FILE.
            # see https://github.com/Shopify/tapioca#manually-requiring-parts-of-a-gem
          RBI

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "generates the correct RBIs when running generate in parallel" do
          @project.require_mock_gem(mock_gem("foo", "0.0.1"))
          @project.require_mock_gem(mock_gem("bar", "0.3.0"))
          @project.require_mock_gem(mock_gem("baz", "0.0.2"))
          @project.bundle_install!

          result = @project.tapioca("gem --all --workers 3")

          assert_empty_stderr(result)
          assert_success_status(result)

          assert_project_file_exist("sorbet/rbi/gems/foo@0.0.1.rbi")
          assert_project_file_exist("sorbet/rbi/gems/bar@0.3.0.rbi")
          assert_project_file_exist("sorbet/rbi/gems/baz@0.0.2.rbi")
        end

        it "eagerly loads autoloaded constants" do
          # Let's recreate the autoload situation that was happening with
          # Yard and Rake here.
          #
          # Yard registers an autoload for `YardocTask``, which, when loaded
          # ends up requiring the optional "rake/tasklib" file, which
          # in turn loads `Rake::TaskLib`. Thus, `Rake::TaskLib` would only
          # get loaded if we generated an RBI for Yard first and then we
          # generated it for Rake.
          #
          # If we do eagerloading properly, then we should be loading `YardocTask`
          # early, so that even if we only generate an RBI for Rake only, we should
          # get `Rake::TaskLib` in the output.
          fake_yard = mock_gem("fake_yard", "0.0.1") do
            # Top-level autoloads `FakeYard::Rake` module.
            write!("lib/fake_yard.rb", <<~RB)
              module FakeYard
                autoload :Rake, __dir__ + "/fake_yard/rake.rb"
              end
            RB

            # `FakeYard::Rake` module autoloads `FakeYard::Rake::YardocTask` class.
            #
            # This file is mostly here to make sure that we handle autoloads
            # inside autoloaded files properly.
            write!("lib/fake_yard/rake.rb", <<~RB)
              module FakeYard
                module Rake
                  autoload :YardocTask, __dir__ + "/yardoc_task.rb"
                end
              end
            RB

            # Finally `FakeYard::Rake::YardocTask` requires a non-default path from
            # `fake_rake` gem, `fake_rake/tasklib`, and subclasses from `FakeRake::TaskLib`
            write!("lib/fake_yard/yardoc_task.rb", <<~RB)
              require 'fake_rake'
              require 'fake_rake/tasklib'

              module FakeYard
                module Rake
                  class YardocTask < ::FakeRake::TaskLib
                  end
                end
              end
            RB
          end

          fake_rake = mock_gem("fake_rake", "0.0.1") do
            # The default require does nothing but define the gem namespace.
            write!("lib/fake_rake.rb", <<~RB)
              module FakeRake
              end
            RB

            # The non-default require defines `FakeRake::TaskLib`
            write!("lib/fake_rake/tasklib.rb", <<~RB)
              module FakeRake
                class TaskLib
                end
              end
            RB
          end

          @project.require_mock_gem(fake_yard)
          @project.require_mock_gem(fake_rake)
          @project.bundle_install!

          result = @project.tapioca("gem fake_rake")
          assert_empty_stderr(result)
          assert_success_status(result)

          # We expect to see both `FakeRake` (coming from the default require of `fake_rake`)
          # and `FakeRake::TaskLib` in the RBI file. The latter should be loaded as part
          # of the eagerloading we have for autoloads, otherwise, nothing else would have
          # required the non-default `fake_rake/task_lib.rb` file.
          assert_project_file_equal("sorbet/rbi/gems/fake_rake@0.0.1.rbi", <<~RBI)
            # typed: true

            # DO NOT EDIT MANUALLY
            # This is an autogenerated file for types exported from the `fake_rake` gem.
            # Please instead update this file by running `bin/tapioca gem fake_rake`.


            module FakeRake; end
            class FakeRake::TaskLib; end
          RBI
        end

        it "uses the correct autoload, even when a gem redefines it via alias-method-chain" do
          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", <<~RB)
              class Module
                alias_method :autoload_without_foo, :autoload

                def autoload(const, path)
                  autoload_without_foo(const, path)
                end
              end
            RB
          end

          @project.require_mock_gem(foo)
          @project.bundle_install!

          result = @project.tapioca("gem foo")
          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "uses ignores `abort` and `exit` calls inside autoloaded files" do
          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", <<~RB)
              module Foo
                autoload :Bar, __dir__ + "/foo/bar.rb"
                autoload :Baz, __dir__ + "/foo/baz.rb"
              end
            RB

            write!("lib/foo/bar.rb", <<~RB)
              begin
                abort("Cannot continue")
              rescue
                # To make sure that we handle errors in our Kernel hooks
                Process.exit(1)
              end
            RB

            write!("lib/foo/baz.rb", <<~RB)
              begin
                exit 2
              rescue
                # To make sure that we handle errors in our Kernel hooks
                Process.exit(1)
              end
            RB
          end

          @project.require_mock_gem(foo)
          # We know RDoc is problematic with respect to calling `abort` in an autoload
          @project.require_real_gem("rdoc")
          # Just so that we have something else we can generate for.
          @project.require_real_gem("json")
          @project.bundle_install!

          result = @project.tapioca("gem json")
          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must wrap long signatures to 120 chars by default" do
          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", <<~RBI)
              module Foo
                extend T::Sig

                sig { params(a: T.untyped, b: T.untyped, c: T.untyped, d: T.untyped, e: T.untyped, f: T.untyped, g: T.untyped).void }
                def bar(a, b, c, d, e, f, g); end

                sig { params(a: T.untyped, b: T.untyped, c: T.untyped, d: T.untyped, e: T.untyped, f: T.untyped, g: T.untyped, h: T.untyped).void }
                def foo(a, b, c, d, e, f, g, h); end
              end
            RBI
          end

          @project.require_mock_gem(foo)
          @project.bundle_install!

          result = @project.tapioca("gem foo")

          assert_project_file_equal("sorbet/rbi/gems/foo@0.0.1.rbi", <<~RBI)
            # typed: true

            # DO NOT EDIT MANUALLY
            # This is an autogenerated file for types exported from the `foo` gem.
            # Please instead update this file by running `bin/tapioca gem foo`.


            module Foo
              sig { params(a: T.untyped, b: T.untyped, c: T.untyped, d: T.untyped, e: T.untyped, f: T.untyped, g: T.untyped).void }
              def bar(a, b, c, d, e, f, g); end

              sig do
                params(
                  a: T.untyped,
                  b: T.untyped,
                  c: T.untyped,
                  d: T.untyped,
                  e: T.untyped,
                  f: T.untyped,
                  g: T.untyped,
                  h: T.untyped
                ).void
              end
              def foo(a, b, c, d, e, f, g, h); end
            end
          RBI

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must wrap long signatures to specified chars" do
          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", <<~RBI)
              module Foo
                extend T::Sig

                sig { params(a: T.untyped, b: T.untyped, c: T.untyped, d: T.untyped, e: T.untyped, f: T.untyped, g: T.untyped).void }
                def bar(a, b, c, d, e, f, g); end

                sig { params(a: T.untyped, b: T.untyped, c: T.untyped, d: T.untyped, e: T.untyped, f: T.untyped, g: T.untyped, h: T.untyped).void }
                def foo(a, b, c, d, e, f, g, h); end
              end
            RBI
          end

          @project.require_mock_gem(foo)
          @project.bundle_install!

          result = @project.tapioca("gem foo --rbi-max-line-length 80")

          assert_project_file_equal("sorbet/rbi/gems/foo@0.0.1.rbi", <<~RBI)
            # typed: true

            # DO NOT EDIT MANUALLY
            # This is an autogenerated file for types exported from the `foo` gem.
            # Please instead update this file by running `bin/tapioca gem foo`.


            module Foo
              sig do
                params(
                  a: T.untyped,
                  b: T.untyped,
                  c: T.untyped,
                  d: T.untyped,
                  e: T.untyped,
                  f: T.untyped,
                  g: T.untyped
                ).void
              end
              def bar(a, b, c, d, e, f, g); end

              sig do
                params(
                  a: T.untyped,
                  b: T.untyped,
                  c: T.untyped,
                  d: T.untyped,
                  e: T.untyped,
                  f: T.untyped,
                  g: T.untyped,
                  h: T.untyped
                ).void
              end
              def foo(a, b, c, d, e, f, g, h); end
            end
          RBI

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must not load engines in the application" do
          @project.write!("config/application.rb", <<~RB)
            require "rails"

            module ModuleTest
              class Application < Rails::Application
                attr_reader :config

                def initialize
                  super
                  root = Pathname.new("#{@project.absolute_path}")
                  @config = Rails::Application::Configuration.new(root)
                end
              end

              def self.application
                Application.new
              end
            end

            lib_dir = File.expand_path("../lib/", __dir__)

            # Add lib directory to load path
            $LOAD_PATH << lib_dir

            # Require files from lib directory
            Dir.glob("**/*.rb", base: lib_dir).sort.each do |file|
              require(file)
            end
          RB

          @project.write!("config/environment.rb", <<~RB)
            require_relative "application.rb"
          RB

          @project.write!("foo/app/models/foo.rb", <<~RB)
            raise NotImplementedError, "This file should not be loaded"
          RB

          @project.write!("foo/lib/foo.rb", <<~RB)
            module Foo
              class Engine < ::Rails::Engine
                isolate_namespace Foo
              end
            end
          RB

          @project.write!("foo/foo.gemspec", <<~GEMSPEC)
            Gem::Specification.new do |spec|
              spec.name        = "foo"
              spec.version     = "0.0.1"
              spec.authors     = ["Maple Ong"]
              spec.email       = ["maple.ong@shopify.com"]
              spec.summary     = "Summary of Foo."
              spec.description = "Description of Foo."
              spec.files = Dir.chdir(File.expand_path(__dir__)) do
                Dir["{app,lib}/**/*"]
              end
              spec.add_dependency "rails", ">= 7.0.3"
            end
          GEMSPEC

          @project.require_real_gem("rails")
          @project.write_gemfile!(<<~GEMFILE, append: true)
            gem 'foo', path: 'foo'
          GEMFILE

          @project.bundle_install!
          res = @project.tapioca("gem activesupport")

          refute_includes(res.err, "This file should not be loaded")
          assert_success_status(res)
        end

        it "must generate top-level and namespaced constants from engines" do
          foo = mock_gem("foo", "0.0.2") do
            write!("lib/foo.rb", <<~RB)
              require "rails"

              module Foo
                class Engine < ::Rails::Engine
                  config.autoload_paths << File.expand_path("../app/models", __FILE__)
                end
              end
            RB

            write!("app/models/user.rb", <<~RB)
              class User
              end
            RB

            write!("app/models/post.rb", <<~RB)
              module Foo
                class Post
                end
              end
            RB
          end

          @project.require_real_gem("rails")
          @project.require_mock_gem(foo)
          @project.bundle_install!

          res = @project.tapioca("gem foo")

          assert_project_file_equal("sorbet/rbi/gems/foo@0.0.2.rbi", <<~RBI)
            # typed: true

            # DO NOT EDIT MANUALLY
            # This is an autogenerated file for types exported from the `foo` gem.
            # Please instead update this file by running `bin/tapioca gem foo`.


            module Foo; end

            class Foo::Engine < ::Rails::Engine
              class << self
                def __callbacks; end
              end
            end

            class Foo::Post; end
            class User; end
          RBI

          assert_success_status(res)
        end

        it "does not crash while tracking `rbtrace` constants" do
          @project.require_real_gem("rbtrace", "0.4.14")
          @project.bundle_install!
          result = @project.tapioca("gem rbtrace")
          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "generates correct RBIs for a Rails engine in Zeitwerk mode" do
          @project.require_real_gem("rails", "6.1.7.2")
          @project.require_real_gem("turbo-rails", "1.3.2")
          @project.bundle_install!

          @project.write!("config/application.rb", <<~RB)
            require "rails"

            module Foo
              class Application < Rails::Application
                # Initialize configuration defaults for originally generated Rails version.
                config.load_defaults 6.1
                config.autoloader = :zeitwerk
              end
            end
          RB

          response = @project.tapioca("gem turbo-rails")

          assert_includes(response.out, "Compiled turbo-rails")

          turbo_streams_rbi = @project.read("sorbet/rbi/gems/turbo-rails@1.3.2.rbi")

          # The Turbo::Streams constant is never defined, but is used as a namespace for child constants.
          # Because of this, Tapioca cannot create an annotation for it using traditional loading methods
          # By leveraging Zeitwerk auto-loading, Tapioca can discover this constant and correctly create an
          # annotation for it.
          assert_includes(turbo_streams_rbi, "module Turbo::Streams; end")
          assert_includes(turbo_streams_rbi, "module Turbo::Streams::ActionHelper")
        end

        it "generates correct RBIs for a Rails engine in Classic mode" do
          @project.require_real_gem("rails", "6.1.7.2")
          @project.require_real_gem("turbo-rails", "1.3.2")
          @project.bundle_install!

          @project.write!("config/application.rb", <<~RB)
            require "rails"

            module Foo
              class Application < Rails::Application
                # Initialize configuration defaults for originally generated Rails version.
                config.load_defaults 6.1
                config.autoloader = :classic
              end
            end
          RB

          response = @project.tapioca("gem turbo-rails")

          assert_includes(response.out, "Compiled turbo-rails")

          turbo_streams_rbi = @project.read("sorbet/rbi/gems/turbo-rails@1.3.2.rbi")

          # The Turbo::Streams constant is never defined, but is used as a namespace for child constants.
          # Because of this, Tapioca cannot create an annotation for it using traditional loading methods.
          # However, the Classic autoloader should properly load the constant, so Tapioca can create an annotation
          # for it.
          assert_includes(turbo_streams_rbi, "module Turbo::Streams; end")
          assert_includes(turbo_streams_rbi, "module Turbo::Streams::ActionHelper")
        end
      end

      describe "sync" do
        before(:all) do
          @project.require_mock_gem(mock_gem("foo", "0.0.1"))
          @project.require_mock_gem(mock_gem("bar", "0.3.0"))
          @project.require_mock_gem(mock_gem("baz", "0.0.2"))
          @project.bundle_install!
        end

        after do
          @project.remove!("sorbet/rbi/gems")
        end

        after(:all) do
          @project.remove!("../gems")
        end

        it "must generate a .gitattributes file in the output folder" do
          result = @project.tapioca("gem --outdir output")

          assert_stdout_includes(result, "create  output/foo@0.0.1.rbi")
          assert_empty_stderr(result)
          assert_success_status(result)

          assert_project_file_equal("output/.gitattributes", <<~CONTENT)
            **/*.rbi linguist-generated=true
          CONTENT
        ensure
          @project.remove!("output")
        end

        it "must perform no operations if everything is up-to-date" do
          @project.write!("sorbet/rbi/gems/foo@0.0.1.rbi")
          @project.write!("sorbet/rbi/gems/bar@0.3.0.rbi")
          @project.write!("sorbet/rbi/gems/baz@0.0.2.rbi")

          result = @project.tapioca("gem")

          refute_includes(result.out, "remove ")
          refute_includes(result.out, "create sorbet/rbi/gems/foo@0.0.1.rb")
          refute_includes(result.out, "create sorbet/rbi/gems/bar@0.3.0.rb")
          refute_includes(result.out, "create sorbet/rbi/gems/baz@0.0.2.rb")
          refute_includes(result.out, "-> Moving:")

          assert_project_file_exist("sorbet/rbi/gems/foo@0.0.1.rbi")
          assert_project_file_exist("sorbet/rbi/gems/bar@0.3.0.rbi")
          assert_project_file_exist("sorbet/rbi/gems/baz@0.0.2.rbi")

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must respect exclude option" do
          @project.write!("sorbet/rbi/gems/foo@0.0.1.rbi")
          @project.write!("sorbet/rbi/gems/bar@0.3.0.rbi")
          @project.write!("sorbet/rbi/gems/baz@0.0.2.rbi")

          result = @project.tapioca("gem --exclude foo bar")

          assert_stdout_includes(result, "remove  sorbet/rbi/gems/foo@0.0.1.rbi\n")
          assert_stdout_includes(result, "remove  sorbet/rbi/gems/bar@0.3.0.rbi\n")
          refute_includes(result.out, "remove  sorbet/rbi/gems/baz@0.0.2.rbi\n")
          refute_includes(result.out, "create sorbet/rbi/gems/foo@0.0.1.rbi")
          refute_includes(result.out, "create sorbet/rbi/gems/bar@0.3.0.rbi")
          refute_includes(result.out, "create sorbet/rbi/gems/baz@0.0.2.rbi")
          refute_includes(result.out, "-> Moving:")

          refute_project_file_exist("sorbet/rbi/gems/foo@0.0.1.rbi")
          refute_project_file_exist("sorbet/rbi/gems/bar@0.3.0.rbi")
          assert_project_file_exist("sorbet/rbi/gems/baz@0.0.2.rbi")

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must remove outdated RBIs" do
          @project.write!("sorbet/rbi/gems/foo@0.0.1.rbi")
          @project.write!("sorbet/rbi/gems/bar@0.3.0.rbi")
          @project.write!("sorbet/rbi/gems/baz@0.0.2.rbi")
          @project.write!("sorbet/rbi/gems/outdated@5.0.0.rbi")

          result = @project.tapioca("gem")

          assert_stdout_includes(result, "remove  sorbet/rbi/gems/outdated@5.0.0.rbi\n")
          refute_includes(result.out, "create sorbet/rbi/gems/foo@0.0.1.rbi")
          refute_includes(result.out, "create sorbet/rbi/gems/bar@0.3.0.rbi")
          refute_includes(result.out, "create sorbet/rbi/gems/baz@0.0.2.rbi")
          refute_includes(result.out, "-> Moving:")

          assert_project_file_exist("sorbet/rbi/gems/foo@0.0.1.rbi")
          assert_project_file_exist("sorbet/rbi/gems/bar@0.3.0.rbi")
          assert_project_file_exist("sorbet/rbi/gems/baz@0.0.2.rbi")
          refute_project_file_exist("sorbet/rbi/gems/outdated@5.0.0.rbi")

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must add missing RBIs" do
          @project.write!("sorbet/rbi/gems/foo@0.0.1.rbi")

          result = @project.tapioca("gem")

          assert_stdout_includes(result, "create  sorbet/rbi/gems/bar@0.3.0.rbi\n")
          assert_stdout_includes(result, "create  sorbet/rbi/gems/baz@0.0.2.rbi\n")
          refute_includes(result.out, "remove ")
          refute_includes(result.out, "-> Moving:")

          assert_stdout_includes(result, <<~OUT)
            Removing RBI files of gems that have been removed:

              Nothing to do.
          OUT

          assert_project_file_exist("sorbet/rbi/gems/foo@0.0.1.rbi")
          assert_project_file_exist("sorbet/rbi/gems/bar@0.3.0.rbi")
          assert_project_file_exist("sorbet/rbi/gems/baz@0.0.2.rbi")

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must move outdated RBIs" do
          @project.write!("sorbet/rbi/gems/foo@0.0.1.rbi")
          @project.write!("sorbet/rbi/gems/bar@0.0.1.rbi")
          @project.write!("sorbet/rbi/gems/baz@0.0.1.rbi")

          result = @project.tapioca("gem")

          assert_stdout_includes(result, "-> Moving: sorbet/rbi/gems/bar@0.0.1.rbi to sorbet/rbi/gems/bar@0.3.0.rbi\n")
          assert_stdout_includes(result, "force  sorbet/rbi/gems/bar@0.3.0.rbi\n")
          assert_stdout_includes(result, "-> Moving: sorbet/rbi/gems/baz@0.0.1.rbi to sorbet/rbi/gems/baz@0.0.2.rbi\n")
          assert_stdout_includes(result, "force  sorbet/rbi/gems/baz@0.0.2.rbi\n")
          refute_includes(result.out, "remove ")

          assert_stdout_includes(result, <<~OUT)
            Removing RBI files of gems that have been removed:

              Nothing to do.
          OUT

          assert_project_file_exist("sorbet/rbi/gems/foo@0.0.1.rbi")
          assert_project_file_exist("sorbet/rbi/gems/bar@0.3.0.rbi")
          assert_project_file_exist("sorbet/rbi/gems/baz@0.0.2.rbi")

          refute_project_file_exist("sorbet/rbi/gems/bar@0.0.1.rbi")
          refute_project_file_exist("sorbet/rbi/gems/baz@0.0.1.rbi")

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "generates the correct RBIs when running sync in parallel" do
          result = @project.tapioca("gem --workers 3")

          assert_project_file_exist("sorbet/rbi/gems/foo@0.0.1.rbi")
          assert_project_file_exist("sorbet/rbi/gems/bar@0.3.0.rbi")
          assert_project_file_exist("sorbet/rbi/gems/baz@0.0.2.rbi")

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "properly filters eager loaded Rails engines when gem is installed from git source" do
          # When Rails is installed through a release version, each gem contained inside `rails` is placed in a
          # different sibling directory. However, when Rails is installed through a git source, all gems are placed
          # nested under the Rails directory. When we check if an engine belongs to a gem, we need to take that into
          # account to avoid placing symbols that do not belong to the Rails RBI inside of it
          #
          # Example of path for git installed Rails:
          # /Users/me/.gem/ruby/3.3.0/bundler/gems/rails-e3ea4c74124f/
          # /Users/me/.gem/ruby/3.3.0/bundler/gems/rails-e3ea4c74124f/activestorage
          # /Users/me/.gem/ruby/3.3.0/bundler/gems/rails-e3ea4c74124f/actionmailbox
          #
          # The engines defined by `activestorage` and `actionmailbox` should not be placed in the Rails RBI. They
          # belong in their own respective RBIs.
          #
          # Note that this problem only happens if another gem somehow eager loads the engines. By default, Rails
          # would've not loaded those classes and they would have not been placed in the Rails RBI.

          @project.write_gemfile!(<<~GEMFILE, append: true)
            gem("rails", git: "https://github.com/rails/rails", branch: "main")
          GEMFILE

          # Create a gem that eager loads the ActionMailbox engine
          gem = mock_gem("eager_loader", "1.0.0") do
            write!("lib/eager_loader.rb", <<~RUBY)
              require "action_mailbox/engine"

              module EagerLoader
              end
            RUBY
          end
          @project.require_mock_gem(gem)

          install_result = @project.bundle_install!
          assert_predicate(install_result, :status, "Bundle install failed\n\n#{install_result.err}")

          result = @project.tapioca("gem rails")
          assert_empty_stderr(result)
          assert_success_status(result)

          assert_stdout_includes(result, "Compiled rails")
          rails_rbi = T.must(Dir.glob("#{@project.absolute_path}/sorbet/rbi/gems/rails@*.rbi").first)

          expected_rbi = <<~RBI
            # typed: true

            # DO NOT EDIT MANUALLY
            # This is an autogenerated file for types exported from the `rails` gem.
            # Please instead update this file by running `bin/tapioca gem rails`.


            # THIS IS AN EMPTY RBI FILE.
            # see https://github.com/Shopify/tapioca#manually-requiring-parts-of-a-gem
          RBI

          assert_equal(expected_rbi, File.read(rails_rbi))
        end
      end

      describe "verify" do
        before(:all) do
          @project.require_mock_gem(mock_gem("foo", "0.0.1"))
          @project.require_mock_gem(mock_gem("bar", "0.3.0"))
          @project.bundle_install!
        end

        after(:all) do
          @project.remove!("../gems")
        end

        it "does nothing and returns exit_status 0 when nothing changes" do
          @project.tapioca("gem")

          result = @project.tapioca("gem --verify")

          assert_stdout_equals(<<~OUT, result)
            Checking for out-of-date RBIs...

            Nothing to do, all RBIs are up-to-date.
          OUT

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "is aware of exclude option and does not error due to removed files" do
          @project.tapioca("gem", exclude: [])

          result = @project.tapioca("gem --verify --exclude foo bar")

          assert_stdout_equals(<<~OUT, result)
            Checking for out-of-date RBIs...

            Nothing to do, all RBIs are up-to-date.
          OUT

          # Does not actually modify anything
          assert_project_file_exist("sorbet/rbi/gems/foo@0.0.1.rbi")
          assert_project_file_exist("sorbet/rbi/gems/bar@0.3.0.rbi")

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "advises of added/removed/changed file(s) and returns exit_status 1" do
          @project.tapioca("gem")

          @project.remove!("sorbet/rbi/gems/foo@0.0.1.rbi")
          @project.write!("sorbet/rbi/gems/outdated@5.0.0.rbi")
          @project.move!("sorbet/rbi/gems/bar@0.3.0.rbi", "sorbet/rbi/gems/bar@0.2.0.rbi")

          result = @project.tapioca("gem --verify")

          assert_stdout_equals(<<~OUT, result)
            Checking for out-of-date RBIs...

          OUT

          # Does not actually modify anything
          refute_project_file_exist("sorbet/rbi/gems/foo@0.0.1.rbi")
          assert_project_file_exist("sorbet/rbi/gems/outdated@5.0.0.rbi")
          assert_project_file_exist("sorbet/rbi/gems/bar@0.2.0.rbi")

          assert_stderr_equals(<<~ERROR, result)
            RBI files are out-of-date. In your development environment, please run:
              `bin/tapioca gem`
            Once it is complete, be sure to commit and push any changes

            Reason:
              File(s) added:
              - sorbet/rbi/gems/foo@0.0.1.rbi
              File(s) changed:
              - sorbet/rbi/gems/bar@0.3.0.rbi
              File(s) removed:
              - sorbet/rbi/gems/outdated@5.0.0.rbi
          ERROR

          refute_success_status(result)
        end
      end

      describe "strictness" do
        before(:all) do
          @project.tapioca("configure")

          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", <<~RB)
              module Foo
                def foo(a, b, c); end
              end
            RB
          end

          bar = mock_gem("bar", "0.3.0") do
            write!("lib/bar.rb", <<~RB)
              module Bar
                def bar(a, b, c); end
              end
            RB
          end

          baz = mock_gem("baz", "1.0.0") do
            write!("lib/baz.rb", <<~RB)
              module Baz
                def baz(a, b, c); end
              end
            RB
          end

          @project.require_mock_gem(foo)
          @project.require_mock_gem(bar)
          @project.require_mock_gem(baz)
          @project.bundle_install!

          @project.write!("sorbet/rbi/dsl/foo.rbi", <<~RBI)
            # typed: true

            module Foo
              def foo(a, b, c); end
            end

            module Bar
              def bar(a, b); end
            end

            module Baz
              def baz; end
            end

            module Quux
              def quux; end
              def quux(x); end
            end
          RBI
        end

        after do
          project.remove!("sorbet/rbi/gems")
        end

        it "must turn the strictness of files with errors to false" do
          result = @project.tapioca("gem --all")

          assert_stdout_includes(result, <<~OUT)
            Checking generated RBI files...  Done

              Changed strictness of sorbet/rbi/gems/bar@0.3.0.rbi to `typed: false` (conflicting with DSL files)

              Changed strictness of sorbet/rbi/gems/baz@1.0.0.rbi to `typed: false` (conflicting with DSL files)
          OUT

          assert_file_strictness("true", "sorbet/rbi/gems/foo@0.0.1.rbi")
          assert_file_strictness("false", "sorbet/rbi/gems/bar@0.3.0.rbi")
          assert_file_strictness("false", "sorbet/rbi/gems/baz@1.0.0.rbi")
          assert_file_strictness("true", "sorbet/rbi/dsl/foo.rbi")

          assert_empty_stderr(result)
          assert_success_status(result)
        end

        it "must turn the strictness of files with error to false with a custom dir" do
          @project.write!("sorbet/rbi/shims/foo.rbi", <<~RBI)
            # typed: true

            module Foo
              def foo; end
            end
          RBI

          result = @project.tapioca("gem --dsl-dir sorbet/rbi/shims")

          assert_stdout_includes(result, <<~OUT)
            Checking generated RBI files...  Done

              Changed strictness of sorbet/rbi/gems/foo@0.0.1.rbi to `typed: false` (conflicting with DSL files)
          OUT

          assert_file_strictness("false", "sorbet/rbi/gems/foo@0.0.1.rbi")
          assert_file_strictness("true", "sorbet/rbi/gems/bar@0.3.0.rbi")
          assert_file_strictness("true", "sorbet/rbi/gems/baz@1.0.0.rbi")
          assert_file_strictness("true", "sorbet/rbi/dsl/foo.rbi")
          assert_file_strictness("true", "sorbet/rbi/shims/foo.rbi")

          assert_empty_stderr(result)
          assert_success_status(result)

          @project.remove!("sorbet/rbi/shims/foo.rbi")
        end
      end

      describe "sanity" do
        before(:all) do
          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", FOO_RB)
          end

          bar = mock_gem("bar", "1.0.0") do
            write!("lib/bar.rb", BAR_RB)
          end

          @project.require_mock_gem(foo)
          @project.require_mock_gem(bar)
          @project.bundle_install!
          @project.tapioca("configure")
        end

        after do
          project.remove!("sorbet/rbi/gems")
          project.remove!("sorbet/rbi/dsl")
        end

        it "must display an error message when a generated gem RBI file contains a parse error" do
          @project.write!("sorbet/rbi/gems/bar@1.0.0.rbi", <<~RBI)
            # typed: true

            module Bar
              # This method is missing a `)`
              sig { params(block: T.proc.params(x: T.any(String, Integer).void).void }
              def bar(&block); end
            end
          RBI

          result = @project.tapioca("gem foo")

          assert_stderr_includes(result, <<~ERR)
            ##### INTERNAL ERROR #####

            There are parse errors in the generated RBI files.

            This seems related to a bug in Tapioca.
            Please open an issue at https://github.com/Shopify/tapioca/issues/new with the following information:

            Tapioca v#{Tapioca::VERSION}

            Command:
              bin/tapioca gem foo

            Gems:
          ERR

          assert_stderr_includes(result, "foo (0.0.1)")

          assert_stderr_includes(result, <<~ERR)
            Errors:
              sorbet/rbi/gems/bar@1.0.0.rbi:5: unexpected token tRCURLY (2001)
              sorbet/rbi/gems/bar@1.0.0.rbi:6: unexpected token "end" (2001)

            ##########################
          ERR

          refute_success_status(result)
        end
      end

      it "generates the correct type variable syntax" do
        type_variable = mock_gem("type_variable", "0.0.1") do
          write!("lib/type_variable.rb", <<~RB)
            # typed: true

            class ComplexGenericType
              extend T::Generic

              A = type_template(:in)
              B = type_template(:out)
              C = type_template
              D = type_member { { fixed: Integer } }
              E = type_member { { fixed: Integer, upper: Numeric } }
              F = type_member { { fixed: Integer, lower: Complex, upper: Numeric } }
              G = type_member(:in) { { fixed: Integer } }
              H = type_member(:in) { { fixed: Integer, upper: Numeric } }
              I = type_member(:in) { { fixed: Integer, lower: Complex, upper: Numeric } }

              class << self
                extend T::Generic

                A = type_template(:in)
                B = type_template(:out)
                C = type_template

                D = type_member { { fixed: Integer } }
                E = type_member { { fixed: Integer, upper: Numeric } }
                F = type_member { { fixed: Integer, lower: Complex, upper: Numeric } }
                G = type_member(:in) { { fixed: Integer } }
                H = type_member(:in) { { fixed: Integer, upper: Numeric } }
                I = type_member(:in) { { fixed: Integer, lower: Complex, upper: Numeric } }
              end
            end
          RB
        end

        @project.require_mock_gem(type_variable)
        @project.bundle_install!

        result = @project.tapioca("gem type_variable")

        assert_stdout_includes(result, <<~OUT)
          Compiled type_variable
                create  sorbet/rbi/gems/type_variable@0.0.1.rbi
        OUT

        assert_project_file_equal("sorbet/rbi/gems/type_variable@0.0.1.rbi", <<~RBI)
          # typed: true

          # DO NOT EDIT MANUALLY
          # This is an autogenerated file for types exported from the `type_variable` gem.
          # Please instead update this file by running `bin/tapioca gem type_variable`.


          class ComplexGenericType
            extend T::Generic

            A = type_template(:in)
            B = type_template(:out)
            C = type_template
            D = type_member { { fixed: Integer } }
            E = type_member { { fixed: Integer, upper: Numeric } }
            F = type_member { { fixed: Integer, lower: Complex, upper: Numeric } }
            G = type_member(:in) { { fixed: Integer } }
            H = type_member(:in) { { fixed: Integer, upper: Numeric } }
            I = type_member(:in) { { fixed: Integer, lower: Complex, upper: Numeric } }

            class << self
              extend T::Generic

              A = type_template(:in)
              B = type_template(:out)
              C = type_template
              D = type_member { { fixed: Integer } }
              E = type_member { { fixed: Integer, upper: Numeric } }
              F = type_member { { fixed: Integer, lower: Complex, upper: Numeric } }
              G = type_member(:in) { { fixed: Integer } }
              H = type_member(:in) { { fixed: Integer, upper: Numeric } }
              I = type_member(:in) { { fixed: Integer, lower: Complex, upper: Numeric } }
            end
          end
        RBI

        assert_empty_stderr(result)
        assert_success_status(result)
      end

      describe "environment" do
        before(:all) do
          @project.tapioca("configure")

          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", <<~RB)
              $stderr.puts "RAILS ENVIRONMENT: \#{ENV["RAILS_ENV"]}"
              $stderr.puts "RACK ENVIRONMENT: \#{ENV["RACK_ENV"]}"
            RB
          end

          @project.require_mock_gem(foo, require: false)
          @project.bundle_install!
        end

        it "must default to `development` as environment" do
          result = @project.tapioca("gem foo")

          assert_success_status(result)

          assert_stderr_equals(<<~OUT, result)
            RAILS ENVIRONMENT: development
            RACK ENVIRONMENT: development
          OUT
        end

        it "must accept another value for environment" do
          result = @project.tapioca("gem foo --environment staging")

          assert_success_status(result)

          assert_stderr_equals(<<~OUT, result)
            RAILS ENVIRONMENT: staging
            RACK ENVIRONMENT: staging
          OUT
        end
      end

      describe "halt-upon-load-error" do
        before(:all) do
          @project.write!("config/environment.rb", <<~RB)
            require_relative "application.rb"
          RB

          @project.write!("config/application.rb", <<~RB)
            require "rails"

            module Test
              class Application < Rails::Application
                raise "Error during application loading"
              end
            end
          RB

          foo = mock_gem("foo", "0.0.1") do
            write!("lib/foo.rb", FOO_RB)
          end

          @project.require_mock_gem(foo)
          @project.require_real_gem("rails")
          @project.bundle_install!
        end

        after(:all) do
          @project.remove!("config/application.rb")
        end

        it "halts upon load errors when rails application cannot be loaded" do
          result = @project.tapioca("gem foo")

          out = "Tapioca attempted to load the Rails application after encountering a `config/application.rb` file, " \
            "but it failed. If your application uses Rails please ensure it can be loaded correctly before " \
            "generating RBIs. If your application does not use Rails and you wish to continue RBI generation " \
            "please pass `--no-halt-upon-load-error` to the tapioca command in sorbet/tapioca/config.yml or in CLI." \
            "\nError during application loading"
          assert_stdout_includes(result, out)
          err = "/tmp/tapioca/tests/gem_spec/project/config/application.rb:5:in `<class:Application>': Error during " \
            "application loading (RuntimeError)"
          assert_stderr_includes(result, err)
          refute_success_status(result)
        end

        it "output errors when rails application cannot be loaded with --no-halt-upon-load-error flag" do
          result = @project.tapioca("gem foo --no-halt-upon-load-error")

          out = "Tapioca attempted to load the Rails application after encountering a `config/application.rb` file, " \
            "but it failed. If your application uses Rails please ensure it can be loaded correctly before " \
            "generating RBIs. If your application does not use Rails and you wish to continue RBI generation " \
            "please pass `--no-halt-upon-load-error` to the tapioca command in sorbet/tapioca/config.yml or in CLI." \
            "\nError during application loading"
          assert_stdout_includes(result, out)
          assert_stdout_includes(
            result,
            "/tmp/tapioca/tests/gem_spec/project/config/application.rb:5:in `<class:Application>'",
          )
          assert_stdout_includes(result, <<~OUT)
            Continuing RBI generation without loading the Rails application.
             Done
          OUT
          assert_success_status(result)
        end
      end
    end
  end
end
