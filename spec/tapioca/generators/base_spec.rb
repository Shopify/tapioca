# typed: true
# frozen_string_literal: true

require "spec_helper"
require "generator_spec"
require "tapioca/generators/base"

module Tapioca
  module Generators
    class BaseSpec < GeneratorSpec
      class TestGenerator < Base
        def generate; end

        def error_handler(error); end
      end

      describe "#rbi_header" do
        it "displays when file_header is true" do
          generator = TestGenerator.new(outpath: outpath)
          result = generator.rbi_header("bin/tapioca dsl")
          expected = <<~RUBY
            # DO NOT EDIT MANUALLY
            # This is an autogenerated file for .
            # Please instead update this file by running `bin/tapioca dsl`.

          RUBY
          assert_equal(expected, result)
        end

        it "doesn't display when file_header is false" do
          generator = TestGenerator.new(outpath: outpath)
          result = generator.rbi_header("bin/tapioca dsl", file_header: false)
          expected = ""
          assert_equal(expected, result)
        end

        it "displays the correct information when reason is set" do
          generator = TestGenerator.new(outpath: outpath)
          result = generator.rbi_header("bin/tapioca dsl", reason: "foo")
          expected = <<~RUBY
            # DO NOT EDIT MANUALLY
            # This is an autogenerated file for foo.
            # Please instead update this file by running `bin/tapioca dsl`.

          RUBY
          assert_equal(expected, result)
        end

        it "displays the correct information when strictness is set" do
          generator = TestGenerator.new(outpath: outpath)
          result = generator.rbi_header("bin/tapioca dsl", strictness: "true")
          expected = <<~RUBY
            # DO NOT EDIT MANUALLY
            # This is an autogenerated file for .
            # Please instead update this file by running `bin/tapioca dsl`.

            # typed: true

          RUBY
          assert_equal(expected, result)
        end

        it "displays the correct information when reason and strictness are set" do
          generator = TestGenerator.new(outpath: outpath)
          result = generator.rbi_header("bin/tapioca dsl", reason: "foo", strictness: "true")
          expected = <<~RUBY
            # DO NOT EDIT MANUALLY
            # This is an autogenerated file for foo.
            # Please instead update this file by running `bin/tapioca dsl`.

            # typed: true

          RUBY
          assert_equal(expected, result)
        end
      end

      describe "#dsl_rbi_filename" do
        it "provides the correct filename for single-word constant names" do
          constant = "Constant"
          generator = TestGenerator.new(outpath: outpath)
          result = generator.dsl_rbi_filename(constant)
          expected = generator.outpath / "constant.rbi"
          assert_equal(expected, result)
        end

        it "provides the correct filename for multi-word constant names" do
          constant = "ThisIsMyTestConstant"
          generator = TestGenerator.new(outpath: outpath)
          result = generator.dsl_rbi_filename(constant)
          expected = generator.outpath / "this_is_my_test_constant.rbi"
          assert_equal(expected, result)
        end
      end

      describe "#constantize" do
        it "returns an empty array when constants aren't found" do
          skip
          constants = ["Foo", "Bar", "Baz"]
          generator = TestGenerator.new(outpath: outpath)
          result = generator.constantize(constants)
          expected = []
          assert_equal(expected, result)
        end

        it "returns an array of filepaths when constants are found" do
          skip
          constants = ["Foo", "Bar", "Baz"]
          generator = TestGenerator.new(outpath: outpath)
          result = generator.constantize(constants)
          expected = [
            generator.outpath / "foo.rbi",
            generator.outpath / "bar.rbi",
            generator.outpath / "baz.rbi",
          ]
          assert_equal(expected, result)
        end
      end

      describe "#existing_rbi_filenames" do
        before do
          Bundler.with_unbundled_env do
            IO.popen(["bundle", "install", "--quiet"], chdir: @repo_path).read
            IO.popen(["bundle", "exec", "tapioca", "dsl"], chdir: @repo_path).read
          end
        end

        it "returns all RBI filenames if no constant is requested" do
          generator = TestGenerator.new(outpath: outpath)
          result = generator.existing_rbi_filenames([])
          expected = [].to_set # TODO: This should be populated with all RBIs so we should have some
          assert_equal(expected, result)
        end

        it "returns only the specified RBI if the constant is requested" do
          generator = TestGenerator.new(outpath: outpath)
          result = generator.existing_rbi_filenames(["Foo"])
          expected = [Pathname.new("sorbet/rbi/dsl/foo.rbi")].to_set
          assert_equal(expected, result)
        end
      end

      describe "#remove" do
        it "does nothing when filename doesn't exist" do
          fake_filename = repo_path / "foo.rb"
          refute_path_exists(fake_filename)
          generator = TestGenerator.new(outpath: outpath)
          generator.remove(fake_filename)
          refute_path_exists(fake_filename)
        end

        it "removes the file if it exists" do
          filename = repo_path / "disposable.rb"
          File.write(filename, <<~RUBY)
            # typed: true
            module Disposable; end
          RUBY
          assert_path_exists(filename)
          generator = TestGenerator.new(outpath: outpath)
          generator.remove(filename)
          refute_path_exists(filename)
        end
      end

      describe "#underscore" do
        it "works for singular classes" do
          klass = "FooBar"
          generator = TestGenerator.new(outpath: outpath)
          result = generator.underscore(klass)
          expected = "foo_bar"
          assert_equal(expected, result)
        end

        it "works for nested classes" do
          klass = "FooBar::Baz"
          generator = TestGenerator.new(outpath: outpath)
          result = generator.underscore(klass)
          expected = "foo_bar/baz"
          assert_equal(expected, result)
        end
      end
    end
  end
end
