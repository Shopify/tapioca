# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `colorize` gem.
# Please instead update this file by running `bin/tapioca gem colorize`.

# typed: true

module Colorize; end

module Colorize::ClassMethods
  # Color codes hash
  def color_codes; end

  # Method removed, raise NoMethodError
  def color_matrix(_ = T.unsafe(nil)); end

  # Generate color and on_color methods
  def color_methods; end

  # Display color samples
  def color_samples; end

  # Return array of available colors used by colorize
  def colors; end

  # Property to disable colorization
  def disable_colorization(value = T.unsafe(nil)); end

  # Setter for disable colorization
  def disable_colorization=(value); end

  # Mode codes hash
  def mode_codes; end

  # Return array of available modes used by colorize
  def modes; end

  # Generate modes methods
  def modes_methods; end
end

module Colorize::InstanceMethods
  # Change color of string
  #
  # Examples:
  #
  # puts "This is blue".colorize(:blue)
  # puts "This is light blue".colorize(:light_blue)
  # puts "This is also blue".colorize(:color => :blue)
  # puts "This is light blue with red background".colorize(:color => :light_blue, :background => :red)
  # puts "This is light blue with red background".colorize(:light_blue ).colorize( :background => :red)
  # puts "This is blue text on red".blue.on_red
  # puts "This is red on blue".colorize(:red).on_blue
  # puts "This is red on blue and underline".colorize(:red).on_blue.underline
  # puts "This is blue text on red".blue.on_red.blink
  # puts "This is uncolorized".blue.on_red.uncolorize
  def colorize(params); end

  # Return true if string is colorized
  def colorized?; end

  # Return uncolorized string
  def uncolorize; end

  private

  # Color for background (offset 40)
  def background_color(color); end

  # Color for foreground (offset 30)
  def color(color); end

  # Set color from params symbol
  def color_from_symbol(match, symbol); end

  # Set colors from params hash
  def colors_from_hash(match, hash); end

  # Set color from params
  def colors_from_params(match, params); end

  # Set default colors
  def defaults_colors(match); end

  # Mode
  def mode(mode); end

  # Require windows libs
  def require_windows_libs; end

  # Scan for colorized string
  def scan_for_colors; end

  def split_colors(match); end
end
