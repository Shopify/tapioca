# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `kredis` gem.
# Please instead update this file by running `bin/tapioca gem kredis`.

# source://kredis//lib/kredis/version.rb#1
module Kredis
  include ::Kredis::Types
  include ::Kredis::TypeCasting
  include ::Kredis::Namespace
  include ::Kredis::Connections
  extend ::Kredis::Types
  extend ::Kredis::TypeCasting
  extend ::Kredis::Namespace
  extend ::Kredis::Connections
  extend ::Kredis

  # source://kredis//lib/kredis.rb#28
  def instrument(channel, **options, &block); end

  # source://kredis//lib/kredis.rb#22
  def logger; end

  # source://kredis//lib/kredis.rb#22
  def logger=(val); end

  # source://kredis//lib/kredis.rb#24
  def redis(config: T.unsafe(nil)); end

  class << self
    # source://kredis//lib/kredis.rb#22
    def logger; end

    # source://kredis//lib/kredis.rb#22
    def logger=(val); end
  end
end

# source://kredis//lib/kredis/attributes.rb#1
module Kredis::Attributes
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Kredis::Attributes::ClassMethods

  private

  # source://kredis//lib/kredis/attributes.rb#112
  def enrich_after_change_with_record_access(type, original_after_change); end

  # source://kredis//lib/kredis/attributes.rb#108
  def extract_kredis_id; end

  # source://kredis//lib/kredis/attributes.rb#96
  def kredis_key_evaluated(key); end

  # source://kredis//lib/kredis/attributes.rb#104
  def kredis_key_for_attribute(name); end
end

# source://kredis//lib/kredis/attributes.rb#0
module Kredis::Attributes::ClassMethods
  # source://kredis//lib/kredis/attributes.rb#73
  def kredis_boolean(name, key: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#65
  def kredis_counter(name, key: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#21
  def kredis_datetime(name, key: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#17
  def kredis_decimal(name, key: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#37
  def kredis_enum(name, values:, default:, key: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#25
  def kredis_flag(name, key: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#33
  def kredis_float(name, key: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#69
  def kredis_hash(name, key: T.unsafe(nil), typed: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#13
  def kredis_integer(name, key: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#41
  def kredis_json(name, key: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#45
  def kredis_list(name, key: T.unsafe(nil), typed: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#5
  def kredis_proxy(name, key: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#53
  def kredis_set(name, key: T.unsafe(nil), typed: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#57
  def kredis_slot(name, key: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#61
  def kredis_slots(name, available:, key: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#9
  def kredis_string(name, key: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#49
  def kredis_unique_list(name, limit: T.unsafe(nil), key: T.unsafe(nil), typed: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  private

  # source://kredis//lib/kredis/attributes.rb#78
  def kredis_connection_with(method, name, key, **options); end
end

# source://kredis//lib/kredis/connections.rb#3
module Kredis::Connections
  # source://kredis//lib/kredis/connections.rb#16
  def clear_all; end

  # source://kredis//lib/kredis/connections.rb#5
  def configurator; end

  # source://kredis//lib/kredis/connections.rb#5
  def configurator=(val); end

  # source://kredis//lib/kredis/connections.rb#8
  def configured_for(name); end

  # source://kredis//lib/kredis/connections.rb#4
  def connections; end

  # source://kredis//lib/kredis/connections.rb#4
  def connections=(val); end

  # source://kredis//lib/kredis/connections.rb#6
  def connector; end

  # source://kredis//lib/kredis/connections.rb#6
  def connector=(val); end

  class << self
    # source://kredis//lib/kredis/connections.rb#5
    def configurator; end

    # source://kredis//lib/kredis/connections.rb#5
    def configurator=(val); end

    # source://kredis//lib/kredis/connections.rb#4
    def connections; end

    # source://kredis//lib/kredis/connections.rb#4
    def connections=(val); end

    # source://kredis//lib/kredis/connections.rb#6
    def connector; end

    # source://kredis//lib/kredis/connections.rb#6
    def connector=(val); end
  end
end

# source://kredis//lib/kredis/log_subscriber.rb#3
class Kredis::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://kredis//lib/kredis/log_subscriber.rb#12
  def meta(event); end

  # source://kredis//lib/kredis/log_subscriber.rb#8
  def migration(event); end

  # source://kredis//lib/kredis/log_subscriber.rb#4
  def proxy(event); end

  private

  # source://kredis//lib/kredis/log_subscriber.rb#17
  def formatted_in(color, event, type: T.unsafe(nil)); end
end

# source://kredis//lib/kredis/migration.rb#3
class Kredis::Migration
  # @return [Migration] a new instance of Migration
  #
  # source://kredis//lib/kredis/migration.rb#6
  def initialize(config = T.unsafe(nil)); end

  # source://kredis//lib/kredis/migration.rb#33
  def delete_all(*key_patterns); end

  # source://kredis//lib/kredis/migration.rb#21
  def migrate(from:, to:, pipeline: T.unsafe(nil)); end

  # source://kredis//lib/kredis/migration.rb#12
  def migrate_all(key_pattern); end

  private

  # source://kredis//lib/kredis/migration.rb#48
  def each_key_batch_matching(key_pattern, &block); end

  # source://kredis//lib/kredis/migration.rb#56
  def log_migration(message, &block); end

  class << self
    # source://kredis//lib/kredis/migration.rb#4
    def delete_all(*_arg0, **_arg1, &_arg2); end

    # source://kredis//lib/kredis/migration.rb#4
    def migrate(*_arg0, **_arg1, &_arg2); end

    # source://kredis//lib/kredis/migration.rb#4
    def migrate_all(*_arg0, **_arg1, &_arg2); end
  end
end

# source://kredis//lib/kredis/migration.rb#46
Kredis::Migration::SCAN_BATCH_SIZE = T.let(T.unsafe(nil), Integer)

# source://kredis//lib/kredis/namespace.rb#1
module Kredis::Namespace
  # source://kredis//lib/kredis/namespace.rb#6
  def namespace; end

  # source://kredis//lib/kredis/namespace.rb#2
  def namespace=(namespace); end

  # source://kredis//lib/kredis/namespace.rb#10
  def namespaced_key(key); end
end

# source://kredis//lib/kredis/railtie.rb#1
class Kredis::Railtie < ::Rails::Railtie; end

# source://kredis//lib/kredis/type/json.rb#4
module Kredis::Type; end

# source://kredis//lib/kredis/type/datetime.rb#5
class Kredis::Type::DateTime < ::ActiveModel::Type::DateTime
  # source://kredis//lib/kredis/type/datetime.rb#10
  def cast_value(value); end

  # source://kredis//lib/kredis/type/datetime.rb#6
  def serialize(value); end
end

# source://kredis//lib/kredis/type/json.rb#5
class Kredis::Type::Json < ::ActiveModel::Type::Value
  # source://kredis//lib/kredis/type/json.rb#10
  def cast_value(value); end

  # source://kredis//lib/kredis/type/json.rb#14
  def serialize(value); end

  # source://kredis//lib/kredis/type/json.rb#6
  def type; end
end

# source://kredis//lib/kredis/type_casting.rb#6
module Kredis::TypeCasting
  # @raise [InvalidType]
  #
  # source://kredis//lib/kredis/type_casting.rb#25
  def string_to_type(value, type); end

  # source://kredis//lib/kredis/type_casting.rb#35
  def strings_to_types(values, type); end

  # @raise [InvalidType]
  #
  # source://kredis//lib/kredis/type_casting.rb#19
  def type_to_string(value, type); end

  # source://kredis//lib/kredis/type_casting.rb#31
  def types_to_strings(values, type); end
end

# source://kredis//lib/kredis/type_casting.rb#7
class Kredis::TypeCasting::InvalidType < ::StandardError; end

# source://kredis//lib/kredis/type_casting.rb#9
Kredis::TypeCasting::TYPES = T.let(T.unsafe(nil), Hash)

# source://kredis//lib/kredis/types.rb#1
module Kredis::Types
  # source://kredis//lib/kredis/types.rb#29
  def boolean(key, default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#42
  def counter(key, expires_in: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#46
  def cycle(key, values:, expires_in: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#33
  def datetime(key, default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#21
  def decimal(key, default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#54
  def enum(key, values:, default:, config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#50
  def flag(key, config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#25
  def float(key, default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#58
  def hash(key, typed: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#17
  def integer(key, default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#37
  def json(key, default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#62
  def list(key, typed: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#74
  def ordered_set(key, typed: T.unsafe(nil), limit: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#4
  def proxy(key, config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#9
  def scalar(key, typed: T.unsafe(nil), default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#70
  def set(key, typed: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#78
  def slot(key, config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#82
  def slots(key, available:, config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#13
  def string(key, default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#66
  def unique_list(key, typed: T.unsafe(nil), limit: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  private

  # source://kredis//lib/kredis/types.rb#87
  def type_from(type_klass, config, key, after_change: T.unsafe(nil), **options); end
end

# source://kredis//lib/kredis/types/callbacks_proxy.rb#1
class Kredis::Types::CallbacksProxy
  # @return [CallbacksProxy] a new instance of CallbacksProxy
  #
  # source://kredis//lib/kredis/types/callbacks_proxy.rb#18
  def initialize(type, callback); end

  # source://kredis//lib/kredis/types/callbacks_proxy.rb#22
  def method_missing(method, *args, **kwargs, &block); end

  # source://kredis//lib/kredis/types/callbacks_proxy.rb#3
  def to_s(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute type.
  #
  # source://kredis//lib/kredis/types/callbacks_proxy.rb#2
  def type; end

  private

  # source://kredis//lib/kredis/types/callbacks_proxy.rb#29
  def invoke_suitable_after_change_callback_for(method); end
end

# source://kredis//lib/kredis/types/callbacks_proxy.rb#5
Kredis::Types::CallbacksProxy::AFTER_CHANGE_OPERATIONS = T.let(T.unsafe(nil), Hash)

# source://kredis//lib/kredis/types/counter.rb#1
class Kredis::Types::Counter < ::Kredis::Types::Proxying
  # source://kredis//lib/kredis/types/proxying.rb#7
  def decrby(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/counter.rb#13
  def decrement(by: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def del(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def exists?(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute expires_in.
  #
  # source://kredis//lib/kredis/types/counter.rb#4
  def expires_in; end

  # Sets the attribute expires_in
  #
  # @param value the value to set the attribute expires_in to.
  #
  # source://kredis//lib/kredis/types/counter.rb#4
  def expires_in=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def get(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def incrby(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/counter.rb#6
  def increment(by: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def multi(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/counter.rb#24
  def reset; end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def set(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/counter.rb#20
  def value; end
end

# source://kredis//lib/kredis/types/cycle.rb#1
class Kredis::Types::Cycle < ::Kredis::Types::Counter
  # source://kredis//lib/kredis/types/counter.rb#20
  def index; end

  # source://kredis//lib/kredis/types/cycle.rb#10
  def next; end

  # source://kredis//lib/kredis/types/cycle.rb#6
  def value; end

  # Returns the value of attribute values.
  #
  # source://kredis//lib/kredis/types/cycle.rb#2
  def values; end

  # Sets the attribute values
  #
  # @param value the value to set the attribute values to.
  #
  # source://kredis//lib/kredis/types/cycle.rb#2
  def values=(_arg0); end
end

# source://kredis//lib/kredis/types/enum.rb#3
class Kredis::Types::Enum < ::Kredis::Types::Proxying
  # @return [Enum] a new instance of Enum
  #
  # source://kredis//lib/kredis/types/enum.rb#8
  def initialize(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute default.
  #
  # source://kredis//lib/kredis/types/enum.rb#6
  def default; end

  # Sets the attribute default
  #
  # @param value the value to set the attribute default to.
  #
  # source://kredis//lib/kredis/types/enum.rb#6
  def default=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def del(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def exists?(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def get(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/enum.rb#23
  def reset; end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def set(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/enum.rb#19
  def value; end

  # source://kredis//lib/kredis/types/enum.rb#13
  def value=(value); end

  # Returns the value of attribute values.
  #
  # source://kredis//lib/kredis/types/enum.rb#6
  def values; end

  # Sets the attribute values
  #
  # @param value the value to set the attribute values to.
  #
  # source://kredis//lib/kredis/types/enum.rb#6
  def values=(_arg0); end

  private

  # source://kredis//lib/kredis/types/enum.rb#28
  def define_predicates_for_values; end
end

# source://kredis//lib/kredis/types/flag.rb#1
class Kredis::Types::Flag < ::Kredis::Types::Proxying
  # source://kredis//lib/kredis/types/proxying.rb#7
  def del(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def exists?(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute expires_in.
  #
  # source://kredis//lib/kredis/types/flag.rb#4
  def expires_in; end

  # Sets the attribute expires_in
  #
  # @param value the value to set the attribute expires_in to.
  #
  # source://kredis//lib/kredis/types/flag.rb#4
  def expires_in=(_arg0); end

  # source://kredis//lib/kredis/types/flag.rb#6
  def mark(expires_in: T.unsafe(nil), force: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://kredis//lib/kredis/types/flag.rb#10
  def marked?; end

  # source://kredis//lib/kredis/types/flag.rb#14
  def remove; end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def set(*_arg0, **_arg1, &_arg2); end
end

# source://kredis//lib/kredis/types/hash.rb#3
class Kredis::Types::Hash < ::Kredis::Types::Proxying
  # source://kredis//lib/kredis/types/hash.rb#8
  def [](key); end

  # source://kredis//lib/kredis/types/hash.rb#12
  def []=(key, value); end

  # source://kredis//lib/kredis/types/hash.rb#28
  def clear; end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def del(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/hash.rb#24
  def delete(*keys); end

  # source://kredis//lib/kredis/types/hash.rb#33
  def entries; end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def exists?(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def hdel(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def hget(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def hgetall(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def hkeys(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def hmget(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def hset(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def hvals(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/hash.rb#38
  def keys; end

  # source://kredis//lib/kredis/types/hash.rb#28
  def remove; end

  # source://kredis//lib/kredis/types/hash.rb#33
  def to_h; end

  # Returns the value of attribute typed.
  #
  # source://kredis//lib/kredis/types/hash.rb#6
  def typed; end

  # Sets the attribute typed
  #
  # @param value the value to set the attribute typed to.
  #
  # source://kredis//lib/kredis/types/hash.rb#6
  def typed=(_arg0); end

  # source://kredis//lib/kredis/types/hash.rb#16
  def update(**entries); end

  # source://kredis//lib/kredis/types/hash.rb#42
  def values; end

  # source://kredis//lib/kredis/types/hash.rb#20
  def values_at(*keys); end
end

# source://kredis//lib/kredis/types/list.rb#1
class Kredis::Types::List < ::Kredis::Types::Proxying
  # source://kredis//lib/kredis/types/list.rb#19
  def <<(*elements); end

  # source://kredis//lib/kredis/types/list.rb#19
  def append(*elements); end

  # source://kredis//lib/kredis/types/list.rb#24
  def clear; end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def del(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/list.rb#6
  def elements; end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def exists?(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/list.rb#28
  def last(n = T.unsafe(nil)); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def lpush(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def lrange(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def lrem(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def ltrim(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/list.rb#15
  def prepend(*elements); end

  # source://kredis//lib/kredis/types/list.rb#11
  def remove(*elements); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def rpush(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/list.rb#6
  def to_a; end

  # Returns the value of attribute typed.
  #
  # source://kredis//lib/kredis/types/list.rb#4
  def typed; end

  # Sets the attribute typed
  #
  # @param value the value to set the attribute typed to.
  #
  # source://kredis//lib/kredis/types/list.rb#4
  def typed=(_arg0); end
end

# source://kredis//lib/kredis/types/ordered_set.rb#1
class Kredis::Types::OrderedSet < ::Kredis::Types::Proxying
  # source://kredis//lib/kredis/types/ordered_set.rb#20
  def <<(elements); end

  # source://kredis//lib/kredis/types/ordered_set.rb#20
  def append(elements); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def del(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/ordered_set.rb#7
  def elements; end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def exists?(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute limit.
  #
  # source://kredis//lib/kredis/types/ordered_set.rb#5
  def limit; end

  # source://kredis//lib/kredis/types/ordered_set.rb#25
  def limit=(limit); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def multi(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/ordered_set.rb#16
  def prepend(elements); end

  # source://kredis//lib/kredis/types/ordered_set.rb#12
  def remove(*elements); end

  # source://kredis//lib/kredis/types/ordered_set.rb#7
  def to_a; end

  # Returns the value of attribute typed.
  #
  # source://kredis//lib/kredis/types/ordered_set.rb#4
  def typed; end

  # Sets the attribute typed
  #
  # @param value the value to set the attribute typed to.
  #
  # source://kredis//lib/kredis/types/ordered_set.rb#4
  def typed=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def zadd(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def zcard(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def zrange(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def zrem(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def zremrangebyrank(*_arg0, **_arg1, &_arg2); end

  private

  # source://kredis//lib/kredis/types/ordered_set.rb#54
  def base_score; end

  # source://kredis//lib/kredis/types/ordered_set.rb#32
  def insert(elements, prepending: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types/ordered_set.rb#58
  def process_start_time; end

  # source://kredis//lib/kredis/types/ordered_set.rb#62
  def process_uptime; end

  # source://kredis//lib/kredis/types/ordered_set.rb#66
  def trim(from_beginning:); end
end

# source://kredis//lib/kredis/types/proxy.rb#1
class Kredis::Types::Proxy
  include ::Kredis::Types::Proxy::Failsafe

  # @return [Proxy] a new instance of Proxy
  #
  # source://kredis//lib/kredis/types/proxy.rb#9
  def initialize(redis, key, **options); end

  # Returns the value of attribute key.
  #
  # source://kredis//lib/kredis/types/proxy.rb#5
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://kredis//lib/kredis/types/proxy.rb#5
  def key=(_arg0); end

  # source://kredis//lib/kredis/types/proxy.rb#23
  def method_missing(method, *args, **kwargs); end

  # source://kredis//lib/kredis/types/proxy.rb#14
  def multi(*args, **kwargs, &block); end

  # source://activesupport/7.0.8/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
  def pipeline; end

  # source://activesupport/7.0.8/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#100
  def pipeline=(obj); end

  private

  # source://kredis//lib/kredis/types/proxy.rb#36
  def log_message(method, *args, **kwargs); end

  # source://kredis//lib/kredis/types/proxy.rb#32
  def redis; end

  class << self
    # source://activesupport/7.0.8/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#48
    def pipeline; end

    # source://activesupport/7.0.8/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#92
    def pipeline=(obj); end
  end
end

# source://kredis//lib/kredis/types/proxy/failsafe.rb#1
module Kredis::Types::Proxy::Failsafe
  # source://kredis//lib/kredis/types/proxy/failsafe.rb#2
  def initialize(*_arg0); end

  # source://kredis//lib/kredis/types/proxy/failsafe.rb#7
  def failsafe; end

  # source://kredis//lib/kredis/types/proxy/failsafe.rb#13
  def suppress_failsafe_with(returning: T.unsafe(nil)); end

  private

  # @return [Boolean]
  #
  # source://kredis//lib/kredis/types/proxy/failsafe.rb#23
  def fail_safe_suppressed?; end
end

# source://kredis//lib/kredis/types/proxying.rb#3
class Kredis::Types::Proxying
  # @return [Proxying] a new instance of Proxying
  #
  # source://kredis//lib/kredis/types/proxying.rb#10
  def initialize(redis, key, **options); end

  # source://kredis//lib/kredis/types/proxying.rb#17
  def failsafe(returning: T.unsafe(nil), &block); end

  # Returns the value of attribute key.
  #
  # source://kredis//lib/kredis/types/proxying.rb#4
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://kredis//lib/kredis/types/proxying.rb#4
  def key=(_arg0); end

  # Returns the value of attribute proxy.
  #
  # source://kredis//lib/kredis/types/proxying.rb#4
  def proxy; end

  # Sets the attribute proxy
  #
  # @param value the value to set the attribute proxy to.
  #
  # source://kredis//lib/kredis/types/proxying.rb#4
  def proxy=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#28
  def string_to_type(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#28
  def strings_to_types(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#28
  def type_to_string(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#28
  def types_to_strings(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#21
  def unproxied_redis; end

  class << self
    # source://kredis//lib/kredis/types/proxying.rb#6
    def proxying(*commands); end
  end
end

# source://kredis//lib/kredis/types/scalar.rb#1
class Kredis::Types::Scalar < ::Kredis::Types::Proxying
  # @return [Boolean]
  #
  # source://kredis//lib/kredis/types/scalar.rb#24
  def assigned?; end

  # source://kredis//lib/kredis/types/scalar.rb#28
  def clear; end

  # Returns the value of attribute default.
  #
  # source://kredis//lib/kredis/types/scalar.rb#4
  def default; end

  # Sets the attribute default
  #
  # @param value the value to set the attribute default to.
  #
  # source://kredis//lib/kredis/types/scalar.rb#4
  def default=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def del(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def exists?(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def expire(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/scalar.rb#36
  def expire_at(datetime); end

  # source://kredis//lib/kredis/types/scalar.rb#32
  def expire_in(seconds); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def expireat(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute expires_in.
  #
  # source://kredis//lib/kredis/types/scalar.rb#4
  def expires_in; end

  # Sets the attribute expires_in
  #
  # @param value the value to set the attribute expires_in to.
  #
  # source://kredis//lib/kredis/types/scalar.rb#4
  def expires_in=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def get(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def set(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/scalar.rb#20
  def to_s; end

  # Returns the value of attribute typed.
  #
  # source://kredis//lib/kredis/types/scalar.rb#4
  def typed; end

  # Sets the attribute typed
  #
  # @param value the value to set the attribute typed to.
  #
  # source://kredis//lib/kredis/types/scalar.rb#4
  def typed=(_arg0); end

  # source://kredis//lib/kredis/types/scalar.rb#10
  def value; end

  # source://kredis//lib/kredis/types/scalar.rb#6
  def value=(value); end
end

# source://kredis//lib/kredis/types/set.rb#1
class Kredis::Types::Set < ::Kredis::Types::Proxying
  # source://kredis//lib/kredis/types/set.rb#11
  def <<(*members); end

  # source://kredis//lib/kredis/types/set.rb#11
  def add(*members); end

  # source://kredis//lib/kredis/types/set.rb#39
  def clear; end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def del(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def exists?(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://kredis//lib/kredis/types/set.rb#27
  def include?(member); end

  # source://kredis//lib/kredis/types/set.rb#6
  def members; end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def multi(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/set.rb#16
  def remove(*members); end

  # source://kredis//lib/kredis/types/set.rb#20
  def replace(*members); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def sadd(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/set.rb#43
  def sample(count = T.unsafe(nil)); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def scard(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def sismember(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/set.rb#31
  def size; end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def smembers(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def spop(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def srandmember(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def srem(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/set.rb#35
  def take; end

  # source://kredis//lib/kredis/types/set.rb#6
  def to_a; end

  # Returns the value of attribute typed.
  #
  # source://kredis//lib/kredis/types/set.rb#4
  def typed; end

  # Sets the attribute typed
  #
  # @param value the value to set the attribute typed to.
  #
  # source://kredis//lib/kredis/types/set.rb#4
  def typed=(_arg0); end
end

# source://kredis//lib/kredis/types/slots.rb#1
class Kredis::Types::Slots < ::Kredis::Types::Proxying
  # Returns the value of attribute available.
  #
  # source://kredis//lib/kredis/types/slots.rb#6
  def available; end

  # Sets the attribute available
  #
  # @param value the value to set the attribute available to.
  #
  # source://kredis//lib/kredis/types/slots.rb#6
  def available=(_arg0); end

  # @return [Boolean]
  #
  # source://kredis//lib/kredis/types/slots.rb#41
  def available?; end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def decr(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def del(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def exists?(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def get(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def incr(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/slots.rb#32
  def release; end

  # source://kredis//lib/kredis/types/slots.rb#8
  def reserve; end

  # source://kredis//lib/kredis/types/slots.rb#47
  def reset; end

  # source://kredis//lib/kredis/types/slots.rb#51
  def taken; end
end

# source://kredis//lib/kredis/types/slots.rb#2
class Kredis::Types::Slots::NotAvailable < ::StandardError; end

# You'd normally call this a set, but Redis already has another data type for that
#
# source://kredis//lib/kredis/types/unique_list.rb#2
class Kredis::Types::UniqueList < ::Kredis::Types::List
  # source://kredis//lib/kredis/types/unique_list.rb#18
  def <<(elements); end

  # source://kredis//lib/kredis/types/unique_list.rb#18
  def append(elements); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def exists?(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute limit.
  #
  # source://kredis//lib/kredis/types/unique_list.rb#5
  def limit; end

  # Sets the attribute limit
  #
  # @param value the value to set the attribute limit to.
  #
  # source://kredis//lib/kredis/types/unique_list.rb#5
  def limit=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def ltrim(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#7
  def multi(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/unique_list.rb#7
  def prepend(elements); end

  # Returns the value of attribute typed.
  #
  # source://kredis//lib/kredis/types/unique_list.rb#5
  def typed; end

  # Sets the attribute typed
  #
  # @param value the value to set the attribute typed to.
  #
  # source://kredis//lib/kredis/types/unique_list.rb#5
  def typed=(_arg0); end
end

# source://kredis//lib/kredis/version.rb#2
Kredis::VERSION = T.let(T.unsafe(nil), String)
