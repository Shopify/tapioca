# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activemodel` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module ActiveModel
  extend(::ActiveSupport::Autoload)

  class << self
    def eager_load!; end
    def gem_version; end
    def version; end
  end
end

class ActiveModel::Attribute
  def initialize(name, value_before_type_cast, type, original_attribute = _); end

  def ==(other); end
  def came_from_user?; end
  def changed?; end
  def changed_in_place?; end
  def encode_with(coder); end
  def eql?(other); end
  def forgetting_assignment; end
  def has_been_read?; end
  def hash; end
  def init_with(coder); end
  def initialized?; end
  def name; end
  def original_value; end
  def type; end
  def type_cast(*_); end
  def value; end
  def value_before_type_cast; end
  def value_for_database; end
  def with_cast_value(value); end
  def with_type(type); end
  def with_value_from_database(value); end
  def with_value_from_user(value); end

  protected

  def assigned?; end
  def original_attribute; end
  def original_value_for_database; end

  private

  def _original_value_for_database; end
  def changed_from_assignment?; end
  def initialize_dup(other); end

  class << self
    def from_database(name, value, type); end
    def from_user(name, value, type, original_attribute = _); end
    def null(name); end
    def uninitialized(name, type); end
    def with_cast_value(name, value, type); end
  end
end

class ActiveModel::Attribute::UserProvidedDefault < ::ActiveModel::Attribute
  def initialize(name, value, type, database_default); end

  def marshal_dump; end
  def marshal_load(values); end
  def value_before_type_cast; end
  def with_type(type); end

  protected

  def user_provided_value; end
end

module ActiveModel::AttributeAssignment
  include(::ActiveModel::ForbiddenAttributesProtection)

  def assign_attributes(new_attributes); end
  def attributes=(new_attributes); end

  private

  def _assign_attribute(k, v); end
  def _assign_attributes(attributes); end
end

module ActiveModel::AttributeMethods
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveModel::AttributeMethods::ClassMethods)

  def attribute_missing(match, *args, &block); end
  def method_missing(method, *args, &block); end
  def respond_to?(method, include_private_methods = _); end
  def respond_to_without_attributes?(*_); end

  private

  def _read_attribute(attr); end
  def attribute_method?(attr_name); end
  def matched_attribute_method(method_name); end
  def missing_attribute(attr_name, stack); end
end

module ActiveModel::AttributeMethods::AttrNames
  class << self
    def set_name_cache(name, value); end
  end
end

ActiveModel::AttributeMethods::CALL_COMPILABLE_REGEXP = T.let(T.unsafe(nil), Regexp)

module ActiveModel::AttributeMethods::ClassMethods
  def alias_attribute(new_name, old_name); end
  def attribute_alias(name); end
  def attribute_alias?(new_name); end
  def attribute_method_affix(*affixes); end
  def attribute_method_prefix(*prefixes); end
  def attribute_method_suffix(*suffixes); end
  def define_attribute_method(attr_name); end
  def define_attribute_methods(*attr_names); end
  def undefine_attribute_methods; end

  private

  def attribute_method_matchers_cache; end
  def attribute_method_matchers_matching(method_name); end
  def define_proxy_call(include_private, mod, name, send, *extra); end
  def generated_attribute_methods; end
  def instance_method_already_implemented?(method_name); end
end

class ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher
  def initialize(options = _); end

  def match(method_name); end
  def method_missing_target; end
  def method_name(attr_name); end
  def plain?; end
  def prefix; end
  def suffix; end
end

class ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher::AttributeMethodMatch < ::Struct
  def attr_name; end
  def attr_name=(_); end
  def method_name; end
  def method_name=(_); end
  def target; end
  def target=(_); end

  class << self
    def [](*_); end
    def inspect; end
    def members; end
    def new(*_); end
  end
end

ActiveModel::AttributeMethods::NAME_COMPILABLE_REGEXP = T.let(T.unsafe(nil), Regexp)

class ActiveModel::AttributeMutationTracker
  def initialize(attributes); end

  def any_changes?; end
  def change_to_attribute(attr_name); end
  def changed?(attr_name, from: _, to: _); end
  def changed_attribute_names; end
  def changed_in_place?(attr_name); end
  def changed_values; end
  def changes; end
  def force_change(attr_name); end
  def forget_change(attr_name); end
  def original_value(attr_name); end

  protected

  def attributes; end
  def forced_changes; end

  private

  def attr_names; end
end

ActiveModel::AttributeMutationTracker::OPTION_NOT_GIVEN = T.let(T.unsafe(nil), Object)

class ActiveModel::AttributeSet
  def initialize(attributes); end

  def ==(other); end
  def [](name); end
  def []=(name, value); end
  def accessed; end
  def deep_dup; end
  def each_value(*args, &block); end
  def except(*args, &block); end
  def fetch(*args, &block); end
  def fetch_value(name); end
  def freeze; end
  def key?(name); end
  def keys; end
  def map(&block); end
  def reset(key); end
  def to_h; end
  def to_hash; end
  def values_before_type_cast; end
  def write_cast_value(name, value); end
  def write_from_database(name, value); end
  def write_from_user(name, value); end

  protected

  def attributes; end

  private

  def initialize_clone(_); end
  def initialize_dup(_); end
  def initialized_attributes; end
end

class ActiveModel::AttributeSet::Builder
  def initialize(types, default_attributes = _); end

  def build_from_database(values = _, additional_types = _); end
  def default_attributes; end
  def types; end
end

class ActiveModel::AttributeSet::YAMLEncoder
  def initialize(default_types); end

  def decode(coder); end
  def encode(attribute_set, coder); end

  protected

  def default_types; end
end

module ActiveModel::Attributes
  extend(::ActiveSupport::Concern)

  include(::ActiveModel::AttributeMethods)

  mixes_in_class_methods(::ActiveModel::Attributes::ClassMethods)

  def initialize(*_); end

  def attributes; end

  private

  def attribute(attr_name); end
  def attribute=(attribute_name, value); end
  def write_attribute(attr_name, value); end
end

module ActiveModel::Attributes::ClassMethods
  def attribute(name, type = _, **options); end

  private

  def define_default_attribute(name, value, type); end
  def define_method_attribute=(name); end
end

class ActiveModel::BlockValidator < ::ActiveModel::EachValidator
  def initialize(options, &block); end


  private

  def validate_each(record, attribute, value); end
end

module ActiveModel::Callbacks
  def define_model_callbacks(*callbacks); end

  private

  def _define_after_model_callback(klass, callback); end
  def _define_around_model_callback(klass, callback); end
  def _define_before_model_callback(klass, callback); end

  class << self
    def extended(base); end
  end
end

module ActiveModel::Conversion
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveModel::Conversion::ClassMethods)

  def to_key; end
  def to_model; end
  def to_param; end
  def to_partial_path; end
end

module ActiveModel::Conversion::ClassMethods
  def _to_partial_path; end
end

module ActiveModel::Dirty
  extend(::ActiveSupport::Concern)

  include(::ActiveModel::AttributeMethods)

  def attribute_changed?(attr, from: _, to: _); end
  def attribute_changed_in_place?(attr_name); end
  def attribute_previously_changed?(attr); end
  def attribute_was(attr); end
  def changed; end
  def changed?; end
  def changed_attributes; end
  def changes; end
  def changes_applied; end
  def clear_attribute_changes(attr_names); end
  def clear_changes_information; end
  def previous_changes; end
  def restore_attributes(attributes = _); end

  private

  def attribute_change(attr); end
  def attribute_changed_by_setter?(attr_name); end
  def attribute_previous_change(attr); end
  def attribute_will_change!(attr); end
  def attributes_changed_by_setter; end
  def cache_changed_attributes; end
  def changes_include?(attr_name); end
  def clear_attribute_change(attr_name); end
  def clear_changed_attributes_cache; end
  def forget_attribute_assignments; end
  def initialize_dup(other); end
  def mutations_before_last_save; end
  def mutations_from_database; end
  def previous_changes_include?(attr_name); end
  def restore_attribute!(attr); end
  def set_attribute_was(attr, old_value); end
end

class ActiveModel::EachValidator < ::ActiveModel::Validator
  def initialize(options); end

  def attributes; end
  def check_validity!; end
  def validate(record); end
  def validate_each(record, attribute, value); end
end

class ActiveModel::Errors
  include(::Enumerable)

  def initialize(base); end

  def [](attribute); end
  def add(attribute, message = _, options = _); end
  def added?(attribute, message = _, options = _); end
  def as_json(options = _); end
  def blank?; end
  def clear; end
  def copy!(other); end
  def count; end
  def delete(key); end
  def details; end
  def each; end
  def empty?; end
  def full_message(attribute, message); end
  def full_messages; end
  def full_messages_for(attribute); end
  def generate_message(attribute, type = _, options = _); end
  def has_key?(attribute); end
  def include?(attribute); end
  def init_with(coder); end
  def key?(attribute); end
  def keys; end
  def marshal_dump; end
  def marshal_load(array); end
  def merge!(other); end
  def messages; end
  def size; end
  def to_a; end
  def to_hash(full_messages = _); end
  def to_xml(options = _); end
  def values; end

  private

  def apply_default_array(hash); end
  def initialize_dup(other); end
  def normalize_detail(message, options); end
  def normalize_message(attribute, message, options); end
  def without_default_proc(hash); end
end

ActiveModel::Errors::CALLBACKS_OPTIONS = T.let(T.unsafe(nil), Array)

ActiveModel::Errors::MESSAGE_OPTIONS = T.let(T.unsafe(nil), Array)

class ActiveModel::ForbiddenAttributesError < ::StandardError
end

module ActiveModel::ForbiddenAttributesProtection

  private

  def sanitize_for_mass_assignment(attributes); end
  def sanitize_forbidden_attributes(attributes); end
end

class ActiveModel::LazyAttributeHash
  def initialize(types, values, additional_types, default_attributes, delegate_hash = _); end

  def ==(other); end
  def [](key); end
  def []=(key, value); end
  def deep_dup; end
  def each_key(*args, &block); end
  def each_value(*args, &block); end
  def except(*args, &block); end
  def fetch(*args, &block); end
  def key?(key); end
  def marshal_dump; end
  def marshal_load(values); end
  def select; end
  def transform_values(*args, &block); end

  protected

  def additional_types; end
  def default_attributes; end
  def delegate_hash; end
  def materialize; end
  def types; end
  def values; end

  private

  def assign_default_value(name); end
  def initialize_dup(_); end
end

module ActiveModel::Lint
end

module ActiveModel::Lint::Tests
  def test_errors_aref; end
  def test_model_naming; end
  def test_persisted?; end
  def test_to_key; end
  def test_to_param; end
  def test_to_partial_path; end

  private

  def assert_boolean(result, name); end
  def model; end
end

class ActiveModel::MissingAttributeError < ::NoMethodError
end

module ActiveModel::Model
  include(::ActiveModel::ForbiddenAttributesProtection)
  include(::ActiveModel::AttributeAssignment)
  extend(::ActiveSupport::Concern)

  include(::ActiveSupport::Callbacks)
  include(::ActiveModel::Validations::HelperMethods)
  include(::ActiveModel::Validations)
  include(::ActiveModel::Conversion)

  def initialize(attributes = _); end

  def persisted?; end
end

class ActiveModel::Name
  include(::Comparable)

  def initialize(klass, namespace = _, name = _); end

  def !~(*args, &block); end
  def <=>(*args, &block); end
  def ==(arg); end
  def ===(arg); end
  def =~(*args, &block); end
  def as_json(*args, &block); end
  def cache_key; end
  def collection; end
  def element; end
  def eql?(*args, &block); end
  def human(options = _); end
  def i18n_key; end
  def name; end
  def param_key; end
  def plural; end
  def route_key; end
  def singular; end
  def singular_route_key; end
  def to_s(*args, &block); end
  def to_str(*args, &block); end

  private

  def _singularize(string); end
end

module ActiveModel::Naming
  def model_name; end

  class << self
    def extended(base); end
    def param_key(record_or_class); end
    def plural(record_or_class); end
    def route_key(record_or_class); end
    def singular(record_or_class); end
    def singular_route_key(record_or_class); end
    def uncountable?(record_or_class); end

    private

    def model_name_from_record_or_class(record_or_class); end
  end
end

class ActiveModel::NullMutationTracker
  include(::Singleton)
  extend(::Singleton::SingletonClassMethods)

  def any_changes?(*_); end
  def change_to_attribute(attr_name); end
  def changed?(*_); end
  def changed_attribute_names(*_); end
  def changed_in_place?(*_); end
  def changed_values(*_); end
  def changes(*_); end
  def force_change(*_); end
  def forget_change(*_); end
  def original_value(*_); end

  class << self
    def instance; end
  end
end

class ActiveModel::Railtie < ::Rails::Railtie
end

class ActiveModel::RangeError < ::RangeError
end

module ActiveModel::SecurePassword
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveModel::SecurePassword::ClassMethods)

  class << self
    def min_cost; end
    def min_cost=(_); end
  end
end

module ActiveModel::SecurePassword::ClassMethods
  def has_secure_password(options = _); end
end

module ActiveModel::SecurePassword::InstanceMethodsOnActivation
  def authenticate(unencrypted_password); end
  def password; end
  def password=(unencrypted_password); end
  def password_confirmation=(unencrypted_password); end
end

ActiveModel::SecurePassword::MAX_PASSWORD_LENGTH_ALLOWED = T.let(T.unsafe(nil), Integer)

module ActiveModel::Serialization
  def read_attribute_for_serialization(*_); end
  def serializable_hash(options = _); end

  private

  def serializable_add_includes(options = _); end
end

module ActiveModel::Serializers
  extend(::ActiveSupport::Autoload)
end

module ActiveModel::Serializers::JSON
  include(::ActiveModel::Serialization)
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveModel::Naming)

  def as_json(options = _); end
  def from_json(json, include_root = _); end
end

ActiveModel::Serializers::VERSION = T.let(T.unsafe(nil), String)

class ActiveModel::StrictValidationFailed < ::StandardError
end

module ActiveModel::Translation
  include(::ActiveModel::Naming)

  def human_attribute_name(attribute, options = _); end
  def i18n_scope; end
  def lookup_ancestors; end
end

module ActiveModel::Type
  class << self
    def default_value; end
    def lookup(*args, **kwargs); end
    def register(type_name, klass = _, **options, &block); end
    def registry; end
    def registry=(_); end
  end
end

class ActiveModel::Type::BigInteger < ::ActiveModel::Type::Integer

  private

  def max_value; end
end

class ActiveModel::Type::Binary < ::ActiveModel::Type::Value
  def binary?; end
  def cast(value); end
  def changed_in_place?(raw_old_value, value); end
  def serialize(value); end
  def type; end
end

class ActiveModel::Type::Binary::Data
  def initialize(value); end

  def ==(other); end
  def hex; end
  def to_s; end
  def to_str; end
end

class ActiveModel::Type::Boolean < ::ActiveModel::Type::Value
  def serialize(value); end
  def type; end

  private

  def cast_value(value); end
end

ActiveModel::Type::Boolean::FALSE_VALUES = T.let(T.unsafe(nil), Set)

class ActiveModel::Type::Date < ::ActiveModel::Type::Value
  include(::ActiveModel::Type::Helpers::Timezone)

  def serialize(value); end
  def type; end
  def type_cast_for_schema(value); end

  private

  def cast_value(value); end
  def fallback_string_to_date(string); end
  def fast_string_to_date(string); end
  def new_date(year, mon, mday); end
  def value_from_multiparameter_assignment(*_); end
end

ActiveModel::Type::Date::ISO_DATE = T.let(T.unsafe(nil), Regexp)

class ActiveModel::Type::DateTime < ::ActiveModel::Type::Value
  include(::ActiveModel::Type::Helpers::Timezone)
  include(::ActiveModel::Type::Helpers::TimeValue)

  def serialize(value); end
  def type; end

  private

  def cast_value(value); end
  def fallback_string_to_time(string); end
  def microseconds(time); end
  def value_from_multiparameter_assignment(values_hash); end
end

class ActiveModel::Type::Decimal < ::ActiveModel::Type::Value
  include(::ActiveModel::Type::Helpers::Numeric)

  def type; end
  def type_cast_for_schema(value); end

  private

  def apply_scale(value); end
  def cast_value(value); end
  def convert_float_to_big_decimal(value); end
  def float_precision; end
end

ActiveModel::Type::Decimal::BIGDECIMAL_PRECISION = T.let(T.unsafe(nil), Integer)

class ActiveModel::Type::Float < ::ActiveModel::Type::Value
  include(::ActiveModel::Type::Helpers::Numeric)

  def serialize(value); end
  def type; end
  def type_cast_for_schema(value); end

  private

  def cast_value(value); end
end

module ActiveModel::Type::Helpers
end

class ActiveModel::Type::Helpers::AcceptsMultiparameterTime < ::Module
  def initialize(defaults: _); end
end

module ActiveModel::Type::Helpers::Mutable
  def cast(value); end
  def changed_in_place?(raw_old_value, new_value); end
end

module ActiveModel::Type::Helpers::Numeric
  def cast(value); end
  def changed?(old_value, _new_value, new_value_before_type_cast); end

  private

  def non_numeric_string?(value); end
  def number_to_non_number?(old_value, new_value_before_type_cast); end
end

module ActiveModel::Type::Helpers::TimeValue
  def apply_seconds_precision(value); end
  def serialize(value); end
  def type_cast_for_schema(value); end
  def user_input_in_time_zone(value); end

  private

  def fast_string_to_time(string); end
  def new_time(year, mon, mday, hour, min, sec, microsec, offset = _); end
end

ActiveModel::Type::Helpers::TimeValue::ISO_DATETIME = T.let(T.unsafe(nil), Regexp)

module ActiveModel::Type::Helpers::Timezone
  def default_timezone; end
  def is_utc?; end
end

class ActiveModel::Type::ImmutableString < ::ActiveModel::Type::Value
  def serialize(value); end
  def type; end

  private

  def cast_value(value); end
end

class ActiveModel::Type::Integer < ::ActiveModel::Type::Value
  include(::ActiveModel::Type::Helpers::Numeric)

  def initialize(*_); end

  def deserialize(value); end
  def serialize(value); end
  def type; end

  protected

  def range; end

  private

  def _limit; end
  def cast_value(value); end
  def ensure_in_range(value); end
  def max_value; end
  def min_value; end
end

ActiveModel::Type::Integer::DEFAULT_LIMIT = T.let(T.unsafe(nil), Integer)

class ActiveModel::Type::Registration
  def initialize(name, block, **_); end

  def call(_registry, *args, **kwargs); end
  def matches?(type_name, *args, **kwargs); end

  protected

  def block; end
  def name; end
end

class ActiveModel::Type::Registry
  def initialize; end

  def lookup(symbol, *args); end
  def register(type_name, klass = _, **options, &block); end

  protected

  def registrations; end

  private

  def find_registration(symbol, *args); end
  def registration_klass; end
end

class ActiveModel::Type::String < ::ActiveModel::Type::ImmutableString
  def changed_in_place?(raw_old_value, new_value); end

  private

  def cast_value(value); end
end

class ActiveModel::Type::Time < ::ActiveModel::Type::Value
  include(::ActiveModel::Type::Helpers::Timezone)
  include(::ActiveModel::Type::Helpers::TimeValue)

  def serialize(value); end
  def type; end
  def user_input_in_time_zone(value); end

  private

  def cast_value(value); end
end

class ActiveModel::Type::Value
  def initialize(precision: _, limit: _, scale: _); end

  def ==(other); end
  def assert_valid_value(*_); end
  def binary?; end
  def cast(value); end
  def changed?(old_value, new_value, _new_value_before_type_cast); end
  def changed_in_place?(raw_old_value, new_value); end
  def deserialize(value); end
  def eql?(other); end
  def force_equality?(_value); end
  def hash; end
  def limit; end
  def map(value); end
  def precision; end
  def scale; end
  def serialize(value); end
  def type; end
  def type_cast_for_schema(value); end
  def value_constructed_by_mass_assignment?(_value); end

  private

  def cast_value(value); end
end

class ActiveModel::UnknownAttributeError < ::NoMethodError
  def initialize(record, attribute); end

  def attribute; end
  def record; end
end

module ActiveModel::VERSION
end

ActiveModel::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

ActiveModel::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

ActiveModel::VERSION::PRE = T.let(T.unsafe(nil), String)

ActiveModel::VERSION::STRING = T.let(T.unsafe(nil), String)

ActiveModel::VERSION::TINY = T.let(T.unsafe(nil), Integer)

class ActiveModel::ValidationError < ::StandardError
  def initialize(model); end

  def model; end
end

module ActiveModel::Validations
  extend(::ActiveSupport::Concern)

  include(::ActiveSupport::Callbacks)
  include(::ActiveModel::Validations::HelperMethods)

  mixes_in_class_methods(::ActiveModel::Validations::HelperMethods)

  def errors; end
  def invalid?(context = _); end
  def read_attribute_for_validation(*_); end
  def valid?(context = _); end
  def validate(context = _); end
  def validate!(context = _); end
  def validates_with(*args, &block); end

  private

  def initialize_dup(other); end
  def raise_validation_error; end
  def run_validations!; end
end

class ActiveModel::Validations::AbsenceValidator < ::ActiveModel::EachValidator
  def validate_each(record, attr_name, value); end
end

class ActiveModel::Validations::AcceptanceValidator < ::ActiveModel::EachValidator
  def initialize(options); end

  def validate_each(record, attribute, value); end

  private

  def acceptable_option?(value); end
  def setup!(klass); end
end

class ActiveModel::Validations::AcceptanceValidator::AttributeDefinition
  def initialize(attributes); end

  def define_on(klass); end
  def matches?(method_name); end

  protected

  def attributes; end

  private

  def convert_to_reader_name(method_name); end
end

class ActiveModel::Validations::AcceptanceValidator::LazilyDefineAttributes < ::Module
  def initialize(attribute_definition); end
end

module ActiveModel::Validations::Callbacks
  extend(::ActiveSupport::Concern)

  include(::ActiveSupport::Callbacks)

  mixes_in_class_methods(::ActiveModel::Validations::Callbacks::ClassMethods)


  private

  def run_validations!; end
end

module ActiveModel::Validations::Callbacks::ClassMethods
  def after_validation(*args, &block); end
  def before_validation(*args, &block); end
end

module ActiveModel::Validations::ClassMethods
  def attribute_method?(attribute); end
  def clear_validators!; end
  def inherited(base); end
  def validate(*args, &block); end
  def validates(*attributes); end
  def validates!(*attributes); end
  def validates_each(*attr_names, &block); end
  def validates_with(*args, &block); end
  def validators; end
  def validators_on(*attributes); end

  private

  def _parse_validates_options(options); end
  def _validates_default_keys; end
end

ActiveModel::Validations::ClassMethods::VALID_OPTIONS_FOR_VALIDATE = T.let(T.unsafe(nil), Array)

module ActiveModel::Validations::Clusivity
  def check_validity!; end

  private

  def delimiter; end
  def include?(record, value); end
  def inclusion_method(enumerable); end
end

ActiveModel::Validations::Clusivity::ERROR_MESSAGE = T.let(T.unsafe(nil), String)

class ActiveModel::Validations::ConfirmationValidator < ::ActiveModel::EachValidator
  def initialize(options); end

  def validate_each(record, attribute, value); end

  private

  def confirmation_value_equal?(record, attribute, value, confirmed); end
  def setup!(klass); end
end

class ActiveModel::Validations::ExclusionValidator < ::ActiveModel::EachValidator
  include(::ActiveModel::Validations::Clusivity)

  def validate_each(record, attribute, value); end
end

class ActiveModel::Validations::FormatValidator < ::ActiveModel::EachValidator
  def check_validity!; end
  def validate_each(record, attribute, value); end

  private

  def check_options_validity(name); end
  def option_call(record, name); end
  def record_error(record, attribute, name, value); end
  def regexp_using_multiline_anchors?(regexp); end
end

module ActiveModel::Validations::HelperMethods
  def validates_absence_of(*attr_names); end
  def validates_acceptance_of(*attr_names); end
  def validates_confirmation_of(*attr_names); end
  def validates_exclusion_of(*attr_names); end
  def validates_format_of(*attr_names); end
  def validates_inclusion_of(*attr_names); end
  def validates_length_of(*attr_names); end
  def validates_numericality_of(*attr_names); end
  def validates_presence_of(*attr_names); end
  def validates_size_of(*attr_names); end

  private

  def _merge_attributes(attr_names); end
end

class ActiveModel::Validations::InclusionValidator < ::ActiveModel::EachValidator
  include(::ActiveModel::Validations::Clusivity)

  def validate_each(record, attribute, value); end
end

class ActiveModel::Validations::LengthValidator < ::ActiveModel::EachValidator
  def initialize(options); end

  def check_validity!; end
  def validate_each(record, attribute, value); end

  private

  def skip_nil_check?(key); end
end

ActiveModel::Validations::LengthValidator::CHECKS = T.let(T.unsafe(nil), Hash)

ActiveModel::Validations::LengthValidator::MESSAGES = T.let(T.unsafe(nil), Hash)

ActiveModel::Validations::LengthValidator::RESERVED_OPTIONS = T.let(T.unsafe(nil), Array)

class ActiveModel::Validations::NumericalityValidator < ::ActiveModel::EachValidator
  def check_validity!; end
  def validate_each(record, attr_name, value); end

  private

  def allow_only_integer?(record); end
  def filtered_options(value); end
  def is_hexadecimal_literal?(raw_value); end
  def is_integer?(raw_value); end
  def is_number?(raw_value); end
  def parse_as_number(raw_value); end
  def record_attribute_changed_in_place?(record, attr_name); end
end

ActiveModel::Validations::NumericalityValidator::CHECKS = T.let(T.unsafe(nil), Hash)

ActiveModel::Validations::NumericalityValidator::INTEGER_REGEX = T.let(T.unsafe(nil), Regexp)

ActiveModel::Validations::NumericalityValidator::RESERVED_OPTIONS = T.let(T.unsafe(nil), Array)

class ActiveModel::Validations::PresenceValidator < ::ActiveModel::EachValidator
  def validate_each(record, attr_name, value); end
end

class ActiveModel::Validations::WithValidator < ::ActiveModel::EachValidator
  def validate_each(record, attr, val); end
end

class ActiveModel::Validator
  def initialize(options = _); end

  def kind; end
  def options; end
  def validate(record); end

  class << self
    def kind; end
  end
end

ActiveModel::Attribute::Uninitialized::UNINITIALIZED_ORIGINAL_VALUE = T.let(T.unsafe(nil), Object)
