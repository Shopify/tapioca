# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `cgi` gem.
# Please instead update this file by running `bin/tapioca gem cgi`.

# source://cgi//cgi/cookie.rb#45
CGI::Cookie::DOMAIN_VALUE_RE = T.let(T.unsafe(nil), Regexp)

# source://cgi//cgi/cookie.rb#44
CGI::Cookie::PATH_VALUE_RE = T.let(T.unsafe(nil), Regexp)

# source://cgi//cgi/cookie.rb#43
CGI::Cookie::TOKEN_RE = T.let(T.unsafe(nil), Regexp)

# Html5
class CGI::HTML3
  include ::CGI::TagMaker
  include ::CGI::Html3
  include ::CGI::HtmlExtension
end

class CGI::HTML4
  include ::CGI::TagMaker
  include ::CGI::Html4
  include ::CGI::HtmlExtension
end

class CGI::HTML4Fr
  include ::CGI::TagMaker
  include ::CGI::Html4Tr
  include ::CGI::Html4Fr
  include ::CGI::HtmlExtension
end

class CGI::HTML4Tr
  include ::CGI::TagMaker
  include ::CGI::Html4Tr
  include ::CGI::HtmlExtension
end

class CGI::HTML5
  include ::CGI::TagMaker
  include ::CGI::Html5
  include ::CGI::HtmlExtension
end

# Mixin module for HTML version 3 generation methods.
module CGI::Html3
  include ::CGI::TagMaker

  # source://cgi//cgi/html.rb#20
  def a(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def address(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def applet(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def area(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def b(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def base(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def basefont(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def big(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def blockquote(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def body(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def br(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def caption(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def center(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def cite(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def code(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def dd(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def dfn(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def dir(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def div(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def dl(attributes = T.unsafe(nil), &block); end

  # The DOCTYPE declaration for this version of HTML
  #
  # source://cgi//cgi/html.rb#826
  def doctype; end

  # source://cgi//cgi/html.rb#61
  def dt(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def em(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def font(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def form(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h1(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h2(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h3(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h4(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h5(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h6(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def head(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def hr(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def html(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def i(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def img(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def input(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def isindex(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def kbd(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def li(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def link(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def listing(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def map(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def menu(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def meta(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def ol(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def option(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def p(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def param(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def plaintext(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def pre(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def samp(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def script(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def select(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def small(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def strike(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def strong(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def style(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def sub(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def sup(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def table(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def td(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def textarea(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def th(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def title(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def tr(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def tt(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def u(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def ul(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def var(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def xmp(attributes = T.unsafe(nil), &block); end
end

# Mixin module for HTML version 4 generation methods.
module CGI::Html4
  include ::CGI::TagMaker

  # source://cgi//cgi/html.rb#20
  def a(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def abbr(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def acronym(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def address(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def area(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def b(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def base(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def bdo(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def big(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def blockquote(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def body(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def br(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def button(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def caption(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def cite(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def code(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def col(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def colgroup(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def dd(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def del(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def dfn(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def div(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def dl(attributes = T.unsafe(nil), &block); end

  # The DOCTYPE declaration for this version of HTML
  #
  # source://cgi//cgi/html.rb#865
  def doctype; end

  # source://cgi//cgi/html.rb#61
  def dt(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def em(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def fieldset(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def form(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h1(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h2(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h3(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h4(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h5(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h6(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def head(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def hr(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def html(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def i(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def img(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def input(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def ins(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def kbd(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def label(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def legend(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def li(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def link(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def map(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def meta(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def noscript(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def object(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def ol(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def optgroup(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def option(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def p(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def param(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def pre(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def q(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def samp(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def script(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def select(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def small(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def span(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def strong(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def style(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def sub(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def sup(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def table(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def tbody(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def td(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def textarea(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def tfoot(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def th(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def thead(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def title(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def tr(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def tt(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def ul(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def var(attributes = T.unsafe(nil), &block); end
end

# Mixin module for generating HTML version 4 with framesets.
module CGI::Html4Fr
  include ::CGI::TagMaker

  # The DOCTYPE declaration for this version of HTML
  #
  # source://cgi//cgi/html.rb#945
  def doctype; end

  # source://cgi//cgi/html.rb#43
  def frame(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def frameset(attributes = T.unsafe(nil), &block); end
end

# Mixin module for HTML version 4 transitional generation methods.
module CGI::Html4Tr
  include ::CGI::TagMaker

  # source://cgi//cgi/html.rb#20
  def a(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def abbr(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def acronym(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def address(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def applet(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def area(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def b(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def base(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def basefont(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def bdo(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def big(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def blockquote(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def body(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def br(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def button(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def caption(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def center(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def cite(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def code(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def col(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def colgroup(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def dd(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def del(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def dfn(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def dir(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def div(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def dl(attributes = T.unsafe(nil), &block); end

  # The DOCTYPE declaration for this version of HTML
  #
  # source://cgi//cgi/html.rb#904
  def doctype; end

  # source://cgi//cgi/html.rb#61
  def dt(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def em(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def fieldset(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def font(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def form(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h1(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h2(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h3(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h4(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h5(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h6(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def head(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def hr(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def html(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def i(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def iframe(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def img(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def input(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def ins(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def isindex(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def kbd(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def label(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def legend(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def li(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def link(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def map(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def menu(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def meta(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def noframes(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def noscript(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def object(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def ol(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def optgroup(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def option(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def p(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def param(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def pre(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def q(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def s(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def samp(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def script(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def select(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def small(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def span(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def strike(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def strong(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def style(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def sub(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def sup(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def table(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def tbody(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def td(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def textarea(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def tfoot(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def th(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def thead(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def title(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def tr(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def tt(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def u(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def ul(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def var(attributes = T.unsafe(nil), &block); end
end

# Mixin module for HTML version 5 generation methods.
module CGI::Html5
  include ::CGI::TagMaker

  # source://cgi//cgi/html.rb#20
  def a(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def abbr(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def address(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def area(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def article(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def aside(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def audio(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def b(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def base(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def bdi(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def bdo(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def blockquote(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def body(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def br(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def button(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def canvas(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def caption(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def cite(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def code(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def col(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def colgroup(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def command(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def datalist(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def dd(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def del(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def details(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def dfn(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def dialog(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def div(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def dl(attributes = T.unsafe(nil), &block); end

  # The DOCTYPE declaration for this version of HTML
  #
  # source://cgi//cgi/html.rb#972
  def doctype; end

  # source://cgi//cgi/html.rb#61
  def dt(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def em(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def embed(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def fieldset(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def figcaption(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def figure(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def footer(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def form(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h1(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h2(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h3(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h4(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h5(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def h6(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def head(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def header(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def hgroup(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def hr(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def html(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def i(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def iframe(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def img(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def input(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def ins(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def kbd(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def keygen(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def label(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def legend(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def li(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def link(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def map(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def mark(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def menu(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def meta(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def meter(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def nav(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def noscript(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def object(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def ol(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def optgroup(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def option(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def output(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def p(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def param(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def pre(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def progress(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def q(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def rp(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def rt(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def ruby(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def s(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def samp(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def script(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def section(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def select(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def small(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def source(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def span(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def strong(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def style(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def sub(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def summary(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def sup(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def table(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def tbody(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def td(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def textarea(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def tfoot(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def th(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def thead(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def time(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def title(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#61
  def tr(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def track(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def u(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def ul(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def var(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#20
  def video(attributes = T.unsafe(nil), &block); end

  # source://cgi//cgi/html.rb#43
  def wbr(attributes = T.unsafe(nil), &block); end
end

# Mixin module providing HTML generation methods.
#
# For example,
#   cgi.a("http://www.example.com") { "Example" }
#     # => "<A HREF=\"http://www.example.com\">Example</A>"
#
# Modules Html3, Html4, etc., contain more basic HTML-generation methods
# (+#title+, +#h1+, etc.).
#
# See class CGI for a detailed example.
module CGI::HtmlExtension
  # Generate an Anchor element as a string.
  #
  # +href+ can either be a string, giving the URL
  # for the HREF attribute, or it can be a hash of
  # the element's attributes.
  #
  # The body of the element is the string returned by the no-argument
  # block passed in.
  #
  #   a("http://www.example.com") { "Example" }
  #     # => "<A HREF=\"http://www.example.com\">Example</A>"
  #
  #   a("HREF" => "http://www.example.com", "TARGET" => "_top") { "Example" }
  #     # => "<A HREF=\"http://www.example.com\" TARGET=\"_top\">Example</A>"
  #
  # source://cgi//cgi/html.rb#97
  def a(href = T.unsafe(nil)); end

  # Generate a Document Base URI element as a String.
  #
  # +href+ can either by a string, giving the base URL for the HREF
  # attribute, or it can be a has of the element's attributes.
  #
  # The passed-in no-argument block is ignored.
  #
  #   base("http://www.example.com/cgi")
  #     # => "<BASE HREF=\"http://www.example.com/cgi\">"
  #
  # source://cgi//cgi/html.rb#115
  def base(href = T.unsafe(nil)); end

  # Generate a BlockQuote element as a string.
  #
  # +cite+ can either be a string, give the URI for the source of
  # the quoted text, or a hash, giving all attributes of the element,
  # or it can be omitted, in which case the element has no attributes.
  #
  # The body is provided by the passed-in no-argument block
  #
  #   blockquote("http://www.example.com/quotes/foo.html") { "Foo!" }
  #     #=> "<BLOCKQUOTE CITE=\"http://www.example.com/quotes/foo.html\">Foo!</BLOCKQUOTE>
  #
  # source://cgi//cgi/html.rb#134
  def blockquote(cite = T.unsafe(nil)); end

  # Generate a Table Caption element as a string.
  #
  # +align+ can be a string, giving the alignment of the caption
  # (one of top, bottom, left, or right).  It can be a hash of
  # all the attributes of the element.  Or it can be omitted.
  #
  # The body of the element is provided by the passed-in no-argument block.
  #
  #   caption("left") { "Capital Cities" }
  #     # => <CAPTION ALIGN=\"left\">Capital Cities</CAPTION>
  #
  # source://cgi//cgi/html.rb#154
  def caption(align = T.unsafe(nil)); end

  # Generate a Checkbox Input element as a string.
  #
  # The attributes of the element can be specified as three arguments,
  # +name+, +value+, and +checked+.  +checked+ is a boolean value;
  # if true, the CHECKED attribute will be included in the element.
  #
  # Alternatively, the attributes can be specified as a hash.
  #
  #   checkbox("name")
  #     # = checkbox("NAME" => "name")
  #
  #   checkbox("name", "value")
  #     # = checkbox("NAME" => "name", "VALUE" => "value")
  #
  #   checkbox("name", "value", true)
  #     # = checkbox("NAME" => "name", "VALUE" => "value", "CHECKED" => true)
  #
  # source://cgi//cgi/html.rb#180
  def checkbox(name = T.unsafe(nil), value = T.unsafe(nil), checked = T.unsafe(nil)); end

  # Generate a sequence of checkbox elements, as a String.
  #
  # The checkboxes will all have the same +name+ attribute.
  # Each checkbox is followed by a label.
  # There will be one checkbox for each value.  Each value
  # can be specified as a String, which will be used both
  # as the value of the VALUE attribute and as the label
  # for that checkbox.  A single-element array has the
  # same effect.
  #
  # Each value can also be specified as a three-element array.
  # The first element is the VALUE attribute; the second is the
  # label; and the third is a boolean specifying whether this
  # checkbox is CHECKED.
  #
  # Each value can also be specified as a two-element
  # array, by omitting either the value element (defaults
  # to the same as the label), or the boolean checked element
  # (defaults to false).
  #
  #   checkbox_group("name", "foo", "bar", "baz")
  #     # <INPUT TYPE="checkbox" NAME="name" VALUE="foo">foo
  #     # <INPUT TYPE="checkbox" NAME="name" VALUE="bar">bar
  #     # <INPUT TYPE="checkbox" NAME="name" VALUE="baz">baz
  #
  #   checkbox_group("name", ["foo"], ["bar", true], "baz")
  #     # <INPUT TYPE="checkbox" NAME="name" VALUE="foo">foo
  #     # <INPUT TYPE="checkbox" CHECKED NAME="name" VALUE="bar">bar
  #     # <INPUT TYPE="checkbox" NAME="name" VALUE="baz">baz
  #
  #   checkbox_group("name", ["1", "Foo"], ["2", "Bar", true], "Baz")
  #     # <INPUT TYPE="checkbox" NAME="name" VALUE="1">Foo
  #     # <INPUT TYPE="checkbox" CHECKED NAME="name" VALUE="2">Bar
  #     # <INPUT TYPE="checkbox" NAME="name" VALUE="Baz">Baz
  #
  #   checkbox_group("NAME" => "name",
  #                    "VALUES" => ["foo", "bar", "baz"])
  #
  #   checkbox_group("NAME" => "name",
  #                    "VALUES" => [["foo"], ["bar", true], "baz"])
  #
  #   checkbox_group("NAME" => "name",
  #                    "VALUES" => [["1", "Foo"], ["2", "Bar", true], "Baz"])
  #
  # source://cgi//cgi/html.rb#234
  def checkbox_group(name = T.unsafe(nil), *values); end

  # Generate an File Upload Input element as a string.
  #
  # The attributes of the element can be specified as three arguments,
  # +name+, +size+, and +maxlength+.  +maxlength+ is the maximum length
  # of the file's _name_, not of the file's _contents_.
  #
  # Alternatively, the attributes can be specified as a hash.
  #
  # See #multipart_form() for forms that include file uploads.
  #
  #   file_field("name")
  #     # <INPUT TYPE="file" NAME="name" SIZE="20">
  #
  #   file_field("name", 40)
  #     # <INPUT TYPE="file" NAME="name" SIZE="40">
  #
  #   file_field("name", 40, 100)
  #     # <INPUT TYPE="file" NAME="name" SIZE="40" MAXLENGTH="100">
  #
  #   file_field("NAME" => "name", "SIZE" => 40)
  #     # <INPUT TYPE="file" NAME="name" SIZE="40">
  #
  # source://cgi//cgi/html.rb#276
  def file_field(name = T.unsafe(nil), size = T.unsafe(nil), maxlength = T.unsafe(nil)); end

  # Generate a Form element as a string.
  #
  # +method+ should be either "get" or "post", and defaults to the latter.
  # +action+ defaults to the current CGI script name.  +enctype+
  # defaults to "application/x-www-form-urlencoded".
  #
  # Alternatively, the attributes can be specified as a hash.
  #
  # See also #multipart_form() for forms that include file uploads.
  #
  #   form{ "string" }
  #     # <FORM METHOD="post" ENCTYPE="application/x-www-form-urlencoded">string</FORM>
  #
  #   form("get") { "string" }
  #     # <FORM METHOD="get" ENCTYPE="application/x-www-form-urlencoded">string</FORM>
  #
  #   form("get", "url") { "string" }
  #     # <FORM METHOD="get" ACTION="url" ENCTYPE="application/x-www-form-urlencoded">string</FORM>
  #
  #   form("METHOD" => "post", "ENCTYPE" => "enctype") { "string" }
  #     # <FORM METHOD="post" ENCTYPE="enctype">string</FORM>
  #
  # source://cgi//cgi/html.rb#310
  def form(method = T.unsafe(nil), action = T.unsafe(nil), enctype = T.unsafe(nil)); end

  # Generate a Hidden Input element as a string.
  #
  # The attributes of the element can be specified as two arguments,
  # +name+ and +value+.
  #
  # Alternatively, the attributes can be specified as a hash.
  #
  #   hidden("name")
  #     # <INPUT TYPE="hidden" NAME="name">
  #
  #   hidden("name", "value")
  #     # <INPUT TYPE="hidden" NAME="name" VALUE="value">
  #
  #   hidden("NAME" => "name", "VALUE" => "reset", "ID" => "foo")
  #     # <INPUT TYPE="hidden" NAME="name" VALUE="value" ID="foo">
  #
  # source://cgi//cgi/html.rb#351
  def hidden(name = T.unsafe(nil), value = T.unsafe(nil)); end

  # Generate a top-level HTML element as a string.
  #
  # The attributes of the element are specified as a hash.  The
  # pseudo-attribute "PRETTY" can be used to specify that the generated
  # HTML string should be indented.  "PRETTY" can also be specified as
  # a string as the sole argument to this method.  The pseudo-attribute
  # "DOCTYPE", if given, is used as the leading DOCTYPE SGML tag; it
  # should include the entire text of this tag, including angle brackets.
  #
  # The body of the html element is supplied as a block.
  #
  #   html{ "string" }
  #     # <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML>string</HTML>
  #
  #   html("LANG" => "ja") { "string" }
  #     # <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML LANG="ja">string</HTML>
  #
  #   html("DOCTYPE" => false) { "string" }
  #     # <HTML>string</HTML>
  #
  #   html("DOCTYPE" => '<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">') { "string" }
  #     # <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN"><HTML>string</HTML>
  #
  #   html("PRETTY" => "  ") { "<BODY></BODY>" }
  #     # <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
  #     # <HTML>
  #     #   <BODY>
  #     #   </BODY>
  #     # </HTML>
  #
  #   html("PRETTY" => "\t") { "<BODY></BODY>" }
  #     # <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
  #     # <HTML>
  #     #         <BODY>
  #     #         </BODY>
  #     # </HTML>
  #
  #   html("PRETTY") { "<BODY></BODY>" }
  #     # = html("PRETTY" => "  ") { "<BODY></BODY>" }
  #
  #   html(if $VERBOSE then "PRETTY" end) { "HTML string" }
  #
  # source://cgi//cgi/html.rb#403
  def html(attributes = T.unsafe(nil)); end

  # Generate an Image Button Input element as a string.
  #
  # +src+ is the URL of the image to use for the button.  +name+
  # is the input name.  +alt+ is the alternative text for the image.
  #
  # Alternatively, the attributes can be specified as a hash.
  #
  #   image_button("url")
  #     # <INPUT TYPE="image" SRC="url">
  #
  #   image_button("url", "name", "string")
  #     # <INPUT TYPE="image" SRC="url" NAME="name" ALT="string">
  #
  #   image_button("SRC" => "url", "ALT" => "string")
  #     # <INPUT TYPE="image" SRC="url" ALT="string">
  #
  # source://cgi//cgi/html.rb#448
  def image_button(src = T.unsafe(nil), name = T.unsafe(nil), alt = T.unsafe(nil)); end

  # Generate an Image element as a string.
  #
  # +src+ is the URL of the image.  +alt+ is the alternative text for
  # the image.  +width+ is the width of the image, and +height+ is
  # its height.
  #
  # Alternatively, the attributes can be specified as a hash.
  #
  #   img("src", "alt", 100, 50)
  #     # <IMG SRC="src" ALT="alt" WIDTH="100" HEIGHT="50">
  #
  #   img("SRC" => "src", "ALT" => "alt", "WIDTH" => 100, "HEIGHT" => 50)
  #     # <IMG SRC="src" ALT="alt" WIDTH="100" HEIGHT="50">
  #
  # source://cgi//cgi/html.rb#474
  def img(src = T.unsafe(nil), alt = T.unsafe(nil), width = T.unsafe(nil), height = T.unsafe(nil)); end

  # Generate a Form element with multipart encoding as a String.
  #
  # Multipart encoding is used for forms that include file uploads.
  #
  # +action+ is the action to perform.  +enctype+ is the encoding
  # type, which defaults to "multipart/form-data".
  #
  # Alternatively, the attributes can be specified as a hash.
  #
  #   multipart_form{ "string" }
  #     # <FORM METHOD="post" ENCTYPE="multipart/form-data">string</FORM>
  #
  #   multipart_form("url") { "string" }
  #     # <FORM METHOD="post" ACTION="url" ENCTYPE="multipart/form-data">string</FORM>
  #
  # source://cgi//cgi/html.rb#500
  def multipart_form(action = T.unsafe(nil), enctype = T.unsafe(nil)); end

  # Generate a Password Input element as a string.
  #
  # +name+ is the name of the input field.  +value+ is its default
  # value.  +size+ is the size of the input field display.  +maxlength+
  # is the maximum length of the inputted password.
  #
  # Alternatively, attributes can be specified as a hash.
  #
  #   password_field("name")
  #     # <INPUT TYPE="password" NAME="name" SIZE="40">
  #
  #   password_field("name", "value")
  #     # <INPUT TYPE="password" NAME="name" VALUE="value" SIZE="40">
  #
  #   password_field("password", "value", 80, 200)
  #     # <INPUT TYPE="password" NAME="name" VALUE="value" SIZE="80" MAXLENGTH="200">
  #
  #   password_field("NAME" => "name", "VALUE" => "value")
  #     # <INPUT TYPE="password" NAME="name" VALUE="value">
  #
  # source://cgi//cgi/html.rb#542
  def password_field(name = T.unsafe(nil), value = T.unsafe(nil), size = T.unsafe(nil), maxlength = T.unsafe(nil)); end

  # Generate a Select element as a string.
  #
  # +name+ is the name of the element.  The +values+ are the options that
  # can be selected from the Select menu.  Each value can be a String or
  # a one, two, or three-element Array.  If a String or a one-element
  # Array, this is both the value of that option and the text displayed for
  # it.  If a three-element Array, the elements are the option value, displayed
  # text, and a boolean value specifying whether this option starts as selected.
  # The two-element version omits either the option value (defaults to the same
  # as the display text) or the boolean selected specifier (defaults to false).
  #
  # The attributes and options can also be specified as a hash.  In this
  # case, options are specified as an array of values as described above,
  # with the hash key of "VALUES".
  #
  #   popup_menu("name", "foo", "bar", "baz")
  #     # <SELECT NAME="name">
  #     #   <OPTION VALUE="foo">foo</OPTION>
  #     #   <OPTION VALUE="bar">bar</OPTION>
  #     #   <OPTION VALUE="baz">baz</OPTION>
  #     # </SELECT>
  #
  #   popup_menu("name", ["foo"], ["bar", true], "baz")
  #     # <SELECT NAME="name">
  #     #   <OPTION VALUE="foo">foo</OPTION>
  #     #   <OPTION VALUE="bar" SELECTED>bar</OPTION>
  #     #   <OPTION VALUE="baz">baz</OPTION>
  #     # </SELECT>
  #
  #   popup_menu("name", ["1", "Foo"], ["2", "Bar", true], "Baz")
  #     # <SELECT NAME="name">
  #     #   <OPTION VALUE="1">Foo</OPTION>
  #     #   <OPTION SELECTED VALUE="2">Bar</OPTION>
  #     #   <OPTION VALUE="Baz">Baz</OPTION>
  #     # </SELECT>
  #
  #   popup_menu("NAME" => "name", "SIZE" => 2, "MULTIPLE" => true,
  #               "VALUES" => [["1", "Foo"], ["2", "Bar", true], "Baz"])
  #     # <SELECT NAME="name" MULTIPLE SIZE="2">
  #     #   <OPTION VALUE="1">Foo</OPTION>
  #     #   <OPTION SELECTED VALUE="2">Bar</OPTION>
  #     #   <OPTION VALUE="Baz">Baz</OPTION>
  #     # </SELECT>
  #
  # source://cgi//cgi/html.rb#597
  def popup_menu(name = T.unsafe(nil), *values); end

  # Generates a radio-button Input element.
  #
  # +name+ is the name of the input field.  +value+ is the value of
  # the field if checked.  +checked+ specifies whether the field
  # starts off checked.
  #
  # Alternatively, the attributes can be specified as a hash.
  #
  #   radio_button("name", "value")
  #     # <INPUT TYPE="radio" NAME="name" VALUE="value">
  #
  #   radio_button("name", "value", true)
  #     # <INPUT TYPE="radio" NAME="name" VALUE="value" CHECKED>
  #
  #   radio_button("NAME" => "name", "VALUE" => "value", "ID" => "foo")
  #     # <INPUT TYPE="radio" NAME="name" VALUE="value" ID="foo">
  #
  # source://cgi//cgi/html.rb#646
  def radio_button(name = T.unsafe(nil), value = T.unsafe(nil), checked = T.unsafe(nil)); end

  # Generate a sequence of radio button Input elements, as a String.
  #
  # This works the same as #checkbox_group().  However, it is not valid
  # to have more than one radiobutton in a group checked.
  #
  #   radio_group("name", "foo", "bar", "baz")
  #     # <INPUT TYPE="radio" NAME="name" VALUE="foo">foo
  #     # <INPUT TYPE="radio" NAME="name" VALUE="bar">bar
  #     # <INPUT TYPE="radio" NAME="name" VALUE="baz">baz
  #
  #   radio_group("name", ["foo"], ["bar", true], "baz")
  #     # <INPUT TYPE="radio" NAME="name" VALUE="foo">foo
  #     # <INPUT TYPE="radio" CHECKED NAME="name" VALUE="bar">bar
  #     # <INPUT TYPE="radio" NAME="name" VALUE="baz">baz
  #
  #   radio_group("name", ["1", "Foo"], ["2", "Bar", true], "Baz")
  #     # <INPUT TYPE="radio" NAME="name" VALUE="1">Foo
  #     # <INPUT TYPE="radio" CHECKED NAME="name" VALUE="2">Bar
  #     # <INPUT TYPE="radio" NAME="name" VALUE="Baz">Baz
  #
  #   radio_group("NAME" => "name",
  #                 "VALUES" => ["foo", "bar", "baz"])
  #
  #   radio_group("NAME" => "name",
  #                 "VALUES" => [["foo"], ["bar", true], "baz"])
  #
  #   radio_group("NAME" => "name",
  #                 "VALUES" => [["1", "Foo"], ["2", "Bar", true], "Baz"])
  #
  # source://cgi//cgi/html.rb#685
  def radio_group(name = T.unsafe(nil), *values); end

  # Generate a reset button Input element, as a String.
  #
  # This resets the values on a form to their initial values.  +value+
  # is the text displayed on the button. +name+ is the name of this button.
  #
  # Alternatively, the attributes can be specified as a hash.
  #
  #   reset
  #     # <INPUT TYPE="reset">
  #
  #   reset("reset")
  #     # <INPUT TYPE="reset" VALUE="reset">
  #
  #   reset("VALUE" => "reset", "ID" => "foo")
  #     # <INPUT TYPE="reset" VALUE="reset" ID="foo">
  #
  # source://cgi//cgi/html.rb#720
  def reset(value = T.unsafe(nil), name = T.unsafe(nil)); end

  # Generate a Select element as a string.
  #
  # +name+ is the name of the element.  The +values+ are the options that
  # can be selected from the Select menu.  Each value can be a String or
  # a one, two, or three-element Array.  If a String or a one-element
  # Array, this is both the value of that option and the text displayed for
  # it.  If a three-element Array, the elements are the option value, displayed
  # text, and a boolean value specifying whether this option starts as selected.
  # The two-element version omits either the option value (defaults to the same
  # as the display text) or the boolean selected specifier (defaults to false).
  #
  # The attributes and options can also be specified as a hash.  In this
  # case, options are specified as an array of values as described above,
  # with the hash key of "VALUES".
  #
  #   popup_menu("name", "foo", "bar", "baz")
  #     # <SELECT NAME="name">
  #     #   <OPTION VALUE="foo">foo</OPTION>
  #     #   <OPTION VALUE="bar">bar</OPTION>
  #     #   <OPTION VALUE="baz">baz</OPTION>
  #     # </SELECT>
  #
  #   popup_menu("name", ["foo"], ["bar", true], "baz")
  #     # <SELECT NAME="name">
  #     #   <OPTION VALUE="foo">foo</OPTION>
  #     #   <OPTION VALUE="bar" SELECTED>bar</OPTION>
  #     #   <OPTION VALUE="baz">baz</OPTION>
  #     # </SELECT>
  #
  #   popup_menu("name", ["1", "Foo"], ["2", "Bar", true], "Baz")
  #     # <SELECT NAME="name">
  #     #   <OPTION VALUE="1">Foo</OPTION>
  #     #   <OPTION SELECTED VALUE="2">Bar</OPTION>
  #     #   <OPTION VALUE="Baz">Baz</OPTION>
  #     # </SELECT>
  #
  #   popup_menu("NAME" => "name", "SIZE" => 2, "MULTIPLE" => true,
  #               "VALUES" => [["1", "Foo"], ["2", "Bar", true], "Baz"])
  #     # <SELECT NAME="name" MULTIPLE SIZE="2">
  #     #   <OPTION VALUE="1">Foo</OPTION>
  #     #   <OPTION SELECTED VALUE="2">Bar</OPTION>
  #     #   <OPTION VALUE="Baz">Baz</OPTION>
  #     # </SELECT>
  #
  # source://cgi//cgi/html.rb#597
  def scrolling_list(name = T.unsafe(nil), *values); end

  # Generate a submit button Input element, as a String.
  #
  # +value+ is the text to display on the button.  +name+ is the name
  # of the input.
  #
  # Alternatively, the attributes can be specified as a hash.
  #
  #   submit
  #     # <INPUT TYPE="submit">
  #
  #   submit("ok")
  #     # <INPUT TYPE="submit" VALUE="ok">
  #
  #   submit("ok", "button1")
  #     # <INPUT TYPE="submit" VALUE="ok" NAME="button1">
  #
  #   submit("VALUE" => "ok", "NAME" => "button1", "ID" => "foo")
  #     # <INPUT TYPE="submit" VALUE="ok" NAME="button1" ID="foo">
  #
  # source://cgi//cgi/html.rb#750
  def submit(value = T.unsafe(nil), name = T.unsafe(nil)); end

  # Generate a text field Input element, as a String.
  #
  # +name+ is the name of the input field.  +value+ is its initial
  # value.  +size+ is the size of the input area.  +maxlength+
  # is the maximum length of input accepted.
  #
  # Alternatively, the attributes can be specified as a hash.
  #
  #   text_field("name")
  #     # <INPUT TYPE="text" NAME="name" SIZE="40">
  #
  #   text_field("name", "value")
  #     # <INPUT TYPE="text" NAME="name" VALUE="value" SIZE="40">
  #
  #   text_field("name", "value", 80)
  #     # <INPUT TYPE="text" NAME="name" VALUE="value" SIZE="80">
  #
  #   text_field("name", "value", 80, 200)
  #     # <INPUT TYPE="text" NAME="name" VALUE="value" SIZE="80" MAXLENGTH="200">
  #
  #   text_field("NAME" => "name", "VALUE" => "value")
  #     # <INPUT TYPE="text" NAME="name" VALUE="value">
  #
  # source://cgi//cgi/html.rb#782
  def text_field(name = T.unsafe(nil), value = T.unsafe(nil), size = T.unsafe(nil), maxlength = T.unsafe(nil)); end

  # Generate a TextArea element, as a String.
  #
  # +name+ is the name of the textarea.  +cols+ is the number of
  # columns and +rows+ is the number of rows in the display.
  #
  # Alternatively, the attributes can be specified as a hash.
  #
  # The body is provided by the passed-in no-argument block
  #
  #   textarea("name")
  #      # = textarea("NAME" => "name", "COLS" => 70, "ROWS" => 10)
  #
  #   textarea("name", 40, 5)
  #      # = textarea("NAME" => "name", "COLS" => 40, "ROWS" => 5)
  #
  # source://cgi//cgi/html.rb#808
  def textarea(name = T.unsafe(nil), cols = T.unsafe(nil), rows = T.unsafe(nil)); end
end

# Base module for HTML-generation mixins.
#
# Provides methods for code generation for tags following
# the various DTD element types.
module CGI::TagMaker
  # Generate code for an empty element.
  #
  #   - O EMPTY
  #
  # source://cgi//cgi/html.rb#27
  def nOE_element(element, attributes = T.unsafe(nil)); end

  # source://cgi//cgi/html.rb#43
  def nOE_element_def(attributes = T.unsafe(nil), &block); end

  # Generate code for an element for which the end (and possibly the
  # start) tag is optional.
  #
  #   O O or - O
  #
  # source://cgi//cgi/html.rb#52
  def nO_element(element, attributes = T.unsafe(nil)); end

  # source://cgi//cgi/html.rb#61
  def nO_element_def(attributes = T.unsafe(nil), &block); end

  # Generate code for an element with required start and end tags.
  #
  #   - -
  #
  # source://cgi//cgi/html.rb#12
  def nn_element(element, attributes = T.unsafe(nil)); end

  # source://cgi//cgi/html.rb#20
  def nn_element_def(attributes = T.unsafe(nil), &block); end
end

# source://cgi//cgi.rb#291
CGI::VERSION = T.let(T.unsafe(nil), String)
