# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   tapioca sync

# typed: true

module ActionView
  extend(::ActiveSupport::Autoload)

  def self.eager_load!; end
  def self.gem_version; end
  def self.version; end
end

class ActionView::AbstractRenderer
  def initialize(lookup_context); end

  def any_templates?(*args, &block); end
  def find_file(*args, &block); end
  def find_template(*args, &block); end
  def formats(*args, &block); end
  def render; end
  def template_exists?(*args, &block); end
  def with_fallbacks(*args, &block); end
  def with_layout_format(*args, &block); end

  private

  def extract_details(options); end
  def instrument(name, **options); end
  def prepend_formats(formats); end
end

class ActionView::ActionViewError < ::StandardError
end

class ActionView::Base
  include(::ActionView::CompiledTemplates)
  include(::ActionView::Context)
  include(::ERB::Util)
  include(::ActionView::Helpers::CaptureHelper)
  include(::ActionView::Helpers::ControllerHelper)
  include(::ActionView::Helpers::CspHelper)
  include(::ActionView::Helpers::CsrfHelper)
  include(::ActionView::Helpers::DateHelper)
  include(::ActionView::Helpers::OutputSafetyHelper)
  include(::ActionView::Helpers::TagHelper)
  include(::ActiveSupport::Benchmarkable)
  include(::ActionView::Helpers::ActiveModelHelper)
  include(::ActionView::Helpers::AssetUrlHelper)
  include(::ActionView::Helpers::AssetTagHelper)
  include(::ActionView::Helpers::UrlHelper)
  include(::ActionView::Helpers::AtomFeedHelper)
  include(::ActionView::Helpers::CacheHelper)
  include(::ActionView::Helpers::SanitizeHelper)
  include(::ActionView::Helpers::DebugHelper)
  include(::ActionView::Helpers::TextHelper)
  include(::ActionView::Helpers::FormTagHelper)
  include(::ActionView::ModelNaming)
  include(::ActionView::RecordIdentifier)
  include(::ActionView::Helpers::FormHelper)
  include(::ActionView::Helpers::TranslationHelper)
  include(::ActionView::Helpers::FormOptionsHelper)
  include(::ActionView::Helpers::JavaScriptHelper)
  include(::ActionView::Helpers::NumberHelper)
  include(::ActionView::Helpers::RecordTagHelper)
  include(::ActionView::Helpers::RenderingHelper)
  include(::ActionView::Helpers)
  extend(::ActionView::Helpers::UrlHelper::ClassMethods)
  extend(::ActionView::Helpers::SanitizeHelper::ClassMethods)

  def initialize(context = _, assigns = _, controller = _, formats = _); end

  def _routes; end
  def _routes=(val); end
  def _routes?; end
  def assign(new_assigns); end
  def assigns; end
  def assigns=(_); end
  def automatically_disable_submit_tag; end
  def automatically_disable_submit_tag=(obj); end
  def config; end
  def config=(_); end
  def debug_missing_translation; end
  def debug_missing_translation=(obj); end
  def default_formats; end
  def default_formats=(obj); end
  def field_error_proc; end
  def field_error_proc=(obj); end
  def formats(*args, &block); end
  def formats=(arg); end
  def locale(*args, &block); end
  def locale=(arg); end
  def logger; end
  def logger=(val); end
  def logger?; end
  def lookup_context(*args, &block); end
  def prefix_partial_path_with_controller_namespace; end
  def prefix_partial_path_with_controller_namespace=(obj); end
  def raise_on_missing_translations; end
  def raise_on_missing_translations=(obj); end
  def streaming_completion_on_exception; end
  def streaming_completion_on_exception=(obj); end
  def view_paths(*args, &block); end
  def view_paths=(arg); end
  def view_renderer; end
  def view_renderer=(_); end

  def self._routes; end
  def self._routes=(val); end
  def self._routes?; end
  def self.automatically_disable_submit_tag; end
  def self.automatically_disable_submit_tag=(obj); end
  def self.cache_template_loading; end
  def self.cache_template_loading=(value); end
  def self.debug_missing_translation; end
  def self.debug_missing_translation=(obj); end
  def self.default_form_builder; end
  def self.default_form_builder=(obj); end
  def self.default_formats; end
  def self.default_formats=(obj); end
  def self.erb_trim_mode=(arg); end
  def self.field_error_proc; end
  def self.field_error_proc=(obj); end
  def self.logger; end
  def self.logger=(val); end
  def self.logger?; end
  def self.prefix_partial_path_with_controller_namespace; end
  def self.prefix_partial_path_with_controller_namespace=(obj); end
  def self.raise_on_missing_translations; end
  def self.raise_on_missing_translations=(obj); end
  def self.streaming_completion_on_exception; end
  def self.streaming_completion_on_exception=(obj); end
  def self.xss_safe?; end
end

module ActionView::CompiledTemplates
end

module ActionView::Context
  include(::ActionView::CompiledTemplates)

  def _layout_for(name = _); end
  def _prepare_context; end
  def output_buffer; end
  def output_buffer=(_); end
  def view_flow; end
  def view_flow=(_); end
end

class ActionView::Digestor
  def self.digest(name:, finder:, dependencies: _); end
  def self.logger; end
  def self.tree(name, finder, partial = _, seen = _); end
end

class ActionView::Digestor::Injected < ::ActionView::Digestor::Node
  def digest(finder, _ = _); end
end

class ActionView::Digestor::Missing < ::ActionView::Digestor::Node
  def digest(finder, _ = _); end
end

class ActionView::Digestor::Node
  def initialize(name, logical_name, template, children = _); end

  def children; end
  def dependency_digest(finder, stack); end
  def digest(finder, stack = _); end
  def logical_name; end
  def name; end
  def template; end
  def to_dep_map; end

  def self.create(name, logical_name, template, partial); end
end

class ActionView::Digestor::NullLogger
  def self.debug(_); end
  def self.error(_); end
end

class ActionView::Digestor::Partial < ::ActionView::Digestor::Node
end

module ActionView::Digestor::PerExecutionDigestCacheExpiry
  def self.before(target); end
end

ActionView::ENCODING_FLAG = T.let(T.unsafe(nil), String)

class ActionView::EncodingError < ::StandardError
end

class ActionView::FallbackFileSystemResolver < ::ActionView::FileSystemResolver
  def decorate(*_); end

  def self.instances; end
end

class ActionView::FileSystemResolver < ::ActionView::PathResolver
  def initialize(path, pattern = _); end

  def ==(resolver); end
  def eql?(resolver); end
  def to_path; end
  def to_s; end
end

module ActionView::Helpers
  include(::ActiveSupport::Benchmarkable)
  include(::ActionView::Helpers::ActiveModelHelper)
  include(::ActionView::Helpers::AssetUrlHelper)
  include(::ActionView::Helpers::AtomFeedHelper)
  include(::ActionView::Helpers::CacheHelper)
  include(::ActionView::Helpers::SanitizeHelper)
  include(::ActionView::Helpers::CaptureHelper)
  include(::ActionView::Helpers::ControllerHelper)
  include(::ActionView::Helpers::CspHelper)
  include(::ActionView::Helpers::CsrfHelper)
  include(::ActionView::Helpers::DateHelper)
  include(::ActionView::Helpers::OutputSafetyHelper)
  include(::ActionView::Helpers::TagHelper)
  include(::ActionView::Helpers::DebugHelper)
  include(::ActionView::Helpers::TextHelper)
  include(::ActionView::Helpers::FormOptionsHelper)
  include(::ActionView::Helpers::JavaScriptHelper)
  include(::ActionView::Helpers::NumberHelper)
  include(::ActionView::Helpers::RecordTagHelper)
  include(::ActionView::Helpers::RenderingHelper)
  extend(::ActiveSupport::Autoload)
  extend(::ActiveSupport::Concern)

  include(::ActionView::Helpers::TagHelper)
  include(::ActionView::Helpers::AssetTagHelper)
  include(::ActionView::Helpers::UrlHelper)
  include(::ActionView::Helpers::SanitizeHelper)
  include(::ActionView::Helpers::TextHelper)
  include(::ActionView::Helpers::FormTagHelper)
  include(::ActionView::Helpers::FormHelper)
  include(::ActionView::Helpers::TranslationHelper)

  def self.eager_load!; end
end

module ActionView::Helpers::ActiveModelHelper
end

module ActionView::Helpers::ActiveModelInstanceTag
  def content_tag(type, options, *_); end
  def error_message; end
  def error_wrapping(html_tag); end
  def object; end
  def tag(type, options, *_); end

  private

  def object_has_errors?; end
  def select_markup_helper?(type); end
  def tag_generate_errors?(options); end
end

module ActionView::Helpers::AssetTagHelper
  include(::ActionView::Helpers::AssetUrlHelper)
  extend(::ActiveSupport::Concern)

  include(::ActionView::Helpers::TagHelper)

  def audio_tag(*sources); end
  def auto_discovery_link_tag(type = _, url_options = _, tag_options = _); end
  def favicon_link_tag(source = _, options = _); end
  def image_alt(src); end
  def image_tag(source, options = _); end
  def javascript_include_tag(*sources); end
  def preload_link_tag(source, options = _); end
  def stylesheet_link_tag(*sources); end
  def video_tag(*sources); end

  private

  def check_for_image_tag_errors(options); end
  def extract_dimensions(size); end
  def multiple_sources_tag_builder(type, sources); end
  def resolve_image_source(source, skip_pipeline); end
  def resolve_link_as(extname, mime_type); end
end

module ActionView::Helpers::AssetUrlHelper
  def asset_path(source, options = _); end
  def asset_url(source, options = _); end
  def audio_path(source, options = _); end
  def audio_url(source, options = _); end
  def compute_asset_extname(source, options = _); end
  def compute_asset_host(source = _, options = _); end
  def compute_asset_path(source, options = _); end
  def font_path(source, options = _); end
  def font_url(source, options = _); end
  def image_path(source, options = _); end
  def image_url(source, options = _); end
  def javascript_path(source, options = _); end
  def javascript_url(source, options = _); end
  def path_to_asset(source, options = _); end
  def path_to_audio(source, options = _); end
  def path_to_font(source, options = _); end
  def path_to_image(source, options = _); end
  def path_to_javascript(source, options = _); end
  def path_to_stylesheet(source, options = _); end
  def path_to_video(source, options = _); end
  def public_compute_asset_path(source, options = _); end
  def stylesheet_path(source, options = _); end
  def stylesheet_url(source, options = _); end
  def url_to_asset(source, options = _); end
  def url_to_audio(source, options = _); end
  def url_to_font(source, options = _); end
  def url_to_image(source, options = _); end
  def url_to_javascript(source, options = _); end
  def url_to_stylesheet(source, options = _); end
  def url_to_video(source, options = _); end
  def video_path(source, options = _); end
  def video_url(source, options = _); end
end

ActionView::Helpers::AssetUrlHelper::ASSET_EXTENSIONS = T.let(T.unsafe(nil), Hash)

ActionView::Helpers::AssetUrlHelper::ASSET_PUBLIC_DIRECTORIES = T.let(T.unsafe(nil), Hash)

ActionView::Helpers::AssetUrlHelper::URI_REGEXP = T.let(T.unsafe(nil), Regexp)

module ActionView::Helpers::AtomFeedHelper
  def atom_feed(options = _, &block); end
end

class ActionView::Helpers::AtomFeedHelper::AtomBuilder
  def initialize(xml); end


  private

  def method_missing(method, *arguments, &block); end
  def xhtml_block?(method, arguments); end
end

ActionView::Helpers::AtomFeedHelper::AtomBuilder::XHTML_TAG_NAMES = T.let(T.unsafe(nil), Set)

class ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder < ::ActionView::Helpers::AtomFeedHelper::AtomBuilder
  def initialize(xml, view, feed_options = _); end

  def entry(record, options = _); end
  def updated(date_or_time = _); end
end

module ActionView::Helpers::CacheHelper
  def cache(name = _, options = _, &block); end
  def cache_fragment_name(name = _, skip_digest: _, virtual_path: _); end
  def cache_if(condition, name = _, options = _, &block); end
  def cache_unless(condition, name = _, options = _, &block); end

  private

  def fragment_for(name = _, options = _, &block); end
  def fragment_name_with_digest(name, virtual_path); end
  def read_fragment_for(name, options); end
  def write_fragment_for(name, options); end
end

module ActionView::Helpers::CaptureHelper
  def capture(*args); end
  def content_for(name, content = _, options = _, &block); end
  def content_for?(name); end
  def provide(name, content = _, &block); end
  def with_output_buffer(buf = _); end
end

module ActionView::Helpers::ControllerHelper
  def action_name(*args, &block); end
  def assign_controller(controller); end
  def controller; end
  def controller=(_); end
  def controller_name(*args, &block); end
  def controller_path(*args, &block); end
  def cookies(*args, &block); end
  def flash(*args, &block); end
  def headers(*args, &block); end
  def logger; end
  def params(*args, &block); end
  def request; end
  def request=(_); end
  def request_forgery_protection_token(*args, &block); end
  def respond_to?(method_name, include_private = _); end
  def response(*args, &block); end
  def session(*args, &block); end
end

ActionView::Helpers::ControllerHelper::CONTROLLER_DELEGATES = T.let(T.unsafe(nil), Array)

module ActionView::Helpers::CspHelper
  def csp_meta_tag; end
end

module ActionView::Helpers::CsrfHelper
  def csrf_meta_tag; end
  def csrf_meta_tags; end
end

module ActionView::Helpers::DateHelper
  def date_select(object_name, method, options = _, html_options = _); end
  def datetime_select(object_name, method, options = _, html_options = _); end
  def distance_of_time_in_words(from_time, to_time = _, options = _); end
  def distance_of_time_in_words_to_now(from_time, options = _); end
  def select_date(date = _, options = _, html_options = _); end
  def select_datetime(datetime = _, options = _, html_options = _); end
  def select_day(date, options = _, html_options = _); end
  def select_hour(datetime, options = _, html_options = _); end
  def select_minute(datetime, options = _, html_options = _); end
  def select_month(date, options = _, html_options = _); end
  def select_second(datetime, options = _, html_options = _); end
  def select_time(datetime = _, options = _, html_options = _); end
  def select_year(date, options = _, html_options = _); end
  def time_ago_in_words(from_time, options = _); end
  def time_select(object_name, method, options = _, html_options = _); end
  def time_tag(date_or_time, *args, &block); end

  private

  def normalize_distance_of_time_argument_to_time(value); end
end

ActionView::Helpers::DateHelper::MINUTES_IN_QUARTER_YEAR = T.let(T.unsafe(nil), Integer)

ActionView::Helpers::DateHelper::MINUTES_IN_THREE_QUARTERS_YEAR = T.let(T.unsafe(nil), Integer)

ActionView::Helpers::DateHelper::MINUTES_IN_YEAR = T.let(T.unsafe(nil), Integer)

class ActionView::Helpers::DateTimeSelector
  include(::ActionView::Helpers::CaptureHelper)
  include(::ActionView::Helpers::OutputSafetyHelper)
  include(::ActionView::Helpers::TagHelper)

  def initialize(datetime, options = _, html_options = _); end

  def select_date; end
  def select_datetime; end
  def select_day; end
  def select_hour; end
  def select_minute; end
  def select_month; end
  def select_second; end
  def select_time; end
  def select_year; end

  private

  def build_hidden(type, value); end
  def build_options(selected, options = _); end
  def build_options_and_select(type, selected, options = _); end
  def build_select(type, select_options_as_html); end
  def build_selects_from_types(order); end
  def css_class_attribute(type, html_options_class, options); end
  def date_order; end
  def day; end
  def hour; end
  def input_id_from_type(type); end
  def input_name_from_type(type); end
  def min; end
  def month; end
  def month_name(number); end
  def month_names; end
  def prompt_option_tag(type, options); end
  def sec; end
  def separator(type); end
  def set_day_if_discarded; end
  def translated_date_order; end
  def translated_month_names; end
  def year; end
end

ActionView::Helpers::DateTimeSelector::AMPM_TRANSLATION = T.let(T.unsafe(nil), Hash)

ActionView::Helpers::DateTimeSelector::DEFAULT_PREFIX = T.let(T.unsafe(nil), String)

ActionView::Helpers::DateTimeSelector::POSITION = T.let(T.unsafe(nil), Hash)

module ActionView::Helpers::DebugHelper
  include(::ActionView::Helpers::CaptureHelper)
  include(::ActionView::Helpers::OutputSafetyHelper)
  include(::ActionView::Helpers::TagHelper)

  def debug(object); end
end

class ActionView::Helpers::FormBuilder
  include(::ActionView::ModelNaming)

  def initialize(object_name, object, template, options); end

  def button(value = _, options = _, &block); end
  def check_box(method, options = _, checked_value = _, unchecked_value = _); end
  def collection_check_boxes(method, collection, value_method, text_method, options = _, html_options = _, &block); end
  def collection_radio_buttons(method, collection, value_method, text_method, options = _, html_options = _, &block); end
  def collection_select(method, collection, value_method, text_method, options = _, html_options = _); end
  def color_field(method, options = _); end
  def date_field(method, options = _); end
  def date_select(method, options = _, html_options = _); end
  def datetime_field(method, options = _); end
  def datetime_local_field(method, options = _); end
  def datetime_select(method, options = _, html_options = _); end
  def email_field(method, options = _); end
  def emitted_hidden_id?; end
  def field_helpers; end
  def field_helpers=(val); end
  def field_helpers?; end
  def fields(scope = _, model: _, **options, &block); end
  def fields_for(record_name, record_object = _, fields_options = _, &block); end
  def file_field(method, options = _); end
  def grouped_collection_select(method, collection, group_method, group_label_method, option_key_method, option_value_method, options = _, html_options = _); end
  def hidden_field(method, options = _); end
  def index; end
  def label(method, text = _, options = _, &block); end
  def month_field(method, options = _); end
  def multipart; end
  def multipart=(multipart); end
  def multipart?; end
  def number_field(method, options = _); end
  def object; end
  def object=(_); end
  def object_name; end
  def object_name=(_); end
  def options; end
  def options=(_); end
  def password_field(method, options = _); end
  def phone_field(method, options = _); end
  def radio_button(method, tag_value, options = _); end
  def range_field(method, options = _); end
  def search_field(method, options = _); end
  def select(method, choices = _, options = _, html_options = _, &block); end
  def submit(value = _, options = _); end
  def telephone_field(method, options = _); end
  def text_area(method, options = _); end
  def text_field(method, options = _); end
  def time_field(method, options = _); end
  def time_select(method, options = _, html_options = _); end
  def time_zone_select(method, priority_zones = _, options = _, html_options = _); end
  def to_model; end
  def to_partial_path; end
  def url_field(method, options = _); end
  def week_field(method, options = _); end

  private

  def convert_to_legacy_options(options); end
  def fields_for_nested_model(name, object, fields_options, block); end
  def fields_for_with_nested_attributes(association_name, association, options, block); end
  def nested_attributes_association?(association_name); end
  def nested_child_index(name); end
  def objectify_options(options); end
  def submit_default_value; end

  def self._to_partial_path; end
  def self.field_helpers; end
  def self.field_helpers=(val); end
  def self.field_helpers?; end
end

module ActionView::Helpers::FormHelper
  include(::ActionView::ModelNaming)
  include(::ActionView::RecordIdentifier)
  extend(::ActiveSupport::Concern)

  include(::ActionView::Helpers::TagHelper)
  include(::ActionView::Helpers::UrlHelper)
  include(::ActionView::Helpers::SanitizeHelper)
  include(::ActionView::Helpers::TextHelper)
  include(::ActionView::Helpers::FormTagHelper)

  def check_box(object_name, method, options = _, checked_value = _, unchecked_value = _); end
  def color_field(object_name, method, options = _); end
  def date_field(object_name, method, options = _); end
  def datetime_field(object_name, method, options = _); end
  def datetime_local_field(object_name, method, options = _); end
  def default_form_builder; end
  def default_form_builder=(_); end
  def email_field(object_name, method, options = _); end
  def fields(scope = _, model: _, **options, &block); end
  def fields_for(record_name, record_object = _, options = _, &block); end
  def file_field(object_name, method, options = _); end
  def form_for(record, options = _, &block); end
  def form_with(model: _, scope: _, url: _, format: _, **options, &block); end
  def form_with_generates_ids; end
  def form_with_generates_ids=(obj); end
  def form_with_generates_remote_forms; end
  def form_with_generates_remote_forms=(obj); end
  def hidden_field(object_name, method, options = _); end
  def label(object_name, method, content_or_options = _, options = _, &block); end
  def month_field(object_name, method, options = _); end
  def number_field(object_name, method, options = _); end
  def password_field(object_name, method, options = _); end
  def phone_field(object_name, method, options = _); end
  def radio_button(object_name, method, tag_value, options = _); end
  def range_field(object_name, method, options = _); end
  def search_field(object_name, method, options = _); end
  def telephone_field(object_name, method, options = _); end
  def text_area(object_name, method, options = _); end
  def text_field(object_name, method, options = _); end
  def time_field(object_name, method, options = _); end
  def url_field(object_name, method, options = _); end
  def week_field(object_name, method, options = _); end

  private

  def apply_form_for_options!(record, object, options); end
  def default_form_builder_class; end
  def html_options_for_form_with(url_for_options = _, model = _, html: _, local: _, skip_enforcing_utf8: _, **options); end
  def instantiate_builder(record_name, record_object, options); end

  def self.form_with_generates_ids; end
  def self.form_with_generates_ids=(obj); end
  def self.form_with_generates_remote_forms; end
  def self.form_with_generates_remote_forms=(obj); end
end

module ActionView::Helpers::FormOptionsHelper
  include(::ActionView::Helpers::SanitizeHelper)
  include(::ActionView::Helpers::CaptureHelper)
  include(::ActionView::Helpers::OutputSafetyHelper)
  include(::ActionView::Helpers::TagHelper)
  include(::ActionView::Helpers::TextHelper)
  extend(::ActionView::Helpers::SanitizeHelper::ClassMethods)

  def collection_check_boxes(object, method, collection, value_method, text_method, options = _, html_options = _, &block); end
  def collection_radio_buttons(object, method, collection, value_method, text_method, options = _, html_options = _, &block); end
  def collection_select(object, method, collection, value_method, text_method, options = _, html_options = _); end
  def grouped_collection_select(object, method, collection, group_method, group_label_method, option_key_method, option_value_method, options = _, html_options = _); end
  def grouped_options_for_select(grouped_options, selected_key = _, options = _); end
  def option_groups_from_collection_for_select(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = _); end
  def options_for_select(container, selected = _); end
  def options_from_collection_for_select(collection, value_method, text_method, selected = _); end
  def select(object, method, choices = _, options = _, html_options = _, &block); end
  def time_zone_options_for_select(selected = _, priority_zones = _, model = _); end
  def time_zone_select(object, method, priority_zones = _, options = _, html_options = _); end

  private

  def extract_selected_and_disabled(selected); end
  def extract_values_from_collection(collection, value_method, selected); end
  def option_html_attributes(element); end
  def option_text_and_value(option); end
  def option_value_selected?(value, selected); end
  def prompt_text(prompt); end
  def value_for_collection(item, value); end
end

module ActionView::Helpers::FormTagHelper
  extend(::ActiveSupport::Concern)

  include(::ActionView::Helpers::TagHelper)
  include(::ActionView::Helpers::UrlHelper)
  include(::ActionView::Helpers::SanitizeHelper)
  include(::ActionView::Helpers::TextHelper)

  def button_tag(content_or_options = _, options = _, &block); end
  def check_box_tag(name, value = _, checked = _, options = _); end
  def color_field_tag(name, value = _, options = _); end
  def date_field_tag(name, value = _, options = _); end
  def datetime_field_tag(name, value = _, options = _); end
  def datetime_local_field_tag(name, value = _, options = _); end
  def email_field_tag(name, value = _, options = _); end
  def embed_authenticity_token_in_remote_forms; end
  def embed_authenticity_token_in_remote_forms=(obj); end
  def field_set_tag(legend = _, options = _, &block); end
  def file_field_tag(name, options = _); end
  def form_tag(url_for_options = _, options = _, &block); end
  def hidden_field_tag(name, value = _, options = _); end
  def image_submit_tag(source, options = _); end
  def label_tag(name = _, content_or_options = _, options = _, &block); end
  def month_field_tag(name, value = _, options = _); end
  def number_field_tag(name, value = _, options = _); end
  def password_field_tag(name = _, value = _, options = _); end
  def phone_field_tag(name, value = _, options = _); end
  def radio_button_tag(name, value, checked = _, options = _); end
  def range_field_tag(name, value = _, options = _); end
  def search_field_tag(name, value = _, options = _); end
  def select_tag(name, option_tags = _, options = _); end
  def submit_tag(value = _, options = _); end
  def telephone_field_tag(name, value = _, options = _); end
  def text_area_tag(name, content = _, options = _); end
  def text_field_tag(name, value = _, options = _); end
  def time_field_tag(name, value = _, options = _); end
  def url_field_tag(name, value = _, options = _); end
  def utf8_enforcer_tag; end
  def week_field_tag(name, value = _, options = _); end

  private

  def convert_direct_upload_option_to_url(options); end
  def extra_tags_for_form(html_options); end
  def form_tag_html(html_options); end
  def form_tag_with_body(html_options, content); end
  def html_options_for_form(url_for_options, options); end
  def sanitize_to_id(name); end
  def set_default_disable_with(value, tag_options); end

  def self.embed_authenticity_token_in_remote_forms; end
  def self.embed_authenticity_token_in_remote_forms=(obj); end
end

module ActionView::Helpers::JavaScriptHelper
  def escape_javascript(javascript); end
  def j(javascript); end
  def javascript_cdata_section(content); end
  def javascript_tag(content_or_options_with_block = _, html_options = _, &block); end
end

ActionView::Helpers::JavaScriptHelper::JS_ESCAPE_MAP = T.let(T.unsafe(nil), Hash)

module ActionView::Helpers::NumberHelper
  def number_to_currency(number, options = _); end
  def number_to_human(number, options = _); end
  def number_to_human_size(number, options = _); end
  def number_to_percentage(number, options = _); end
  def number_to_phone(number, options = _); end
  def number_with_delimiter(number, options = _); end
  def number_with_precision(number, options = _); end

  private

  def delegate_number_helper_method(method, number, options); end
  def escape_units(units); end
  def escape_unsafe_options(options); end
  def parse_float(number, raise_error); end
  def valid_float?(number); end
  def wrap_with_output_safety_handling(number, raise_on_invalid, &block); end
end

class ActionView::Helpers::NumberHelper::InvalidNumberError < ::StandardError
  def initialize(number); end

  def number; end
  def number=(_); end
end

module ActionView::Helpers::OutputSafetyHelper
  def raw(stringish); end
  def safe_join(array, sep = _); end
  def to_sentence(array, options = _); end
end

module ActionView::Helpers::RecordTagHelper
  def content_tag_for(*_); end
  def div_for(*_); end
end

module ActionView::Helpers::RenderingHelper
  def _layout_for(*args, &block); end
  def render(options = _, locals = _, &block); end
end

module ActionView::Helpers::SanitizeHelper
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActionView::Helpers::SanitizeHelper::ClassMethods)

  def sanitize(html, options = _); end
  def sanitize_css(style); end
  def strip_links(html); end
  def strip_tags(html); end
end

module ActionView::Helpers::SanitizeHelper::ClassMethods
  def full_sanitizer; end
  def full_sanitizer=(_); end
  def link_sanitizer; end
  def link_sanitizer=(_); end
  def sanitized_allowed_attributes; end
  def sanitized_allowed_attributes=(attributes); end
  def sanitized_allowed_css_keywords; end
  def sanitized_allowed_css_keywords=(_); end
  def sanitized_allowed_css_properties; end
  def sanitized_allowed_css_properties=(_); end
  def sanitized_allowed_protocols; end
  def sanitized_allowed_protocols=(_); end
  def sanitized_allowed_tags; end
  def sanitized_allowed_tags=(tags); end
  def sanitized_bad_tags; end
  def sanitized_bad_tags=(_); end
  def sanitized_protocol_separator; end
  def sanitized_protocol_separator=(_); end
  def sanitized_shorthand_css_properties; end
  def sanitized_shorthand_css_properties=(_); end
  def sanitized_uri_attributes; end
  def sanitized_uri_attributes=(_); end
  def sanitizer_vendor; end
  def white_list_sanitizer; end
  def white_list_sanitizer=(_); end

  private

  def deprecate_option(name); end
end

module ActionView::Helpers::TagHelper
  include(::ActionView::Helpers::CaptureHelper)
  include(::ActionView::Helpers::OutputSafetyHelper)
  extend(::ActiveSupport::Concern)

  def cdata_section(content); end
  def content_tag(name, content_or_options_with_block = _, options = _, escape = _, &block); end
  def escape_once(html); end
  def tag(name = _, options = _, open = _, escape = _); end

  private

  def tag_builder; end
end

ActionView::Helpers::TagHelper::BOOLEAN_ATTRIBUTES = T.let(T.unsafe(nil), Set)

ActionView::Helpers::TagHelper::PRE_CONTENT_STRINGS = T.let(T.unsafe(nil), Hash)

ActionView::Helpers::TagHelper::TAG_PREFIXES = T.let(T.unsafe(nil), Set)

class ActionView::Helpers::TagHelper::TagBuilder
  include(::ActionView::Helpers::CaptureHelper)
  include(::ActionView::Helpers::OutputSafetyHelper)

  def initialize(view_context); end

  def boolean_tag_option(key); end
  def content_tag_string(name, content, options, escape = _); end
  def tag_option(key, value, escape); end
  def tag_options(options, escape = _); end
  def tag_string(name, content = _, escape_attributes: _, **options, &block); end

  private

  def method_missing(called, *args, &block); end
  def prefix_tag_option(prefix, key, value, escape); end
  def respond_to_missing?(*args); end
end

ActionView::Helpers::TagHelper::TagBuilder::VOID_ELEMENTS = T.let(T.unsafe(nil), Set)

module ActionView::Helpers::Tags
  extend(::ActiveSupport::Autoload)
end

class ActionView::Helpers::Tags::Base
  include(::ActionView::Helpers::CaptureHelper)
  include(::ActionView::Helpers::OutputSafetyHelper)
  include(::ActionView::Helpers::TagHelper)
  include(::ActionView::Helpers::UrlHelper)
  include(::ActionView::Helpers::SanitizeHelper)
  include(::ActionView::Helpers::TextHelper)
  include(::ActionView::Helpers::FormTagHelper)
  include(::ActionView::Helpers::ActiveModelInstanceTag)
  include(::ActionView::Helpers::FormOptionsHelper)
  extend(::ActionView::Helpers::UrlHelper::ClassMethods)
  extend(::ActionView::Helpers::SanitizeHelper::ClassMethods)

  def initialize(object_name, method_name, template_object, options = _); end

  def object; end
  def render; end

  private

  def add_default_name_and_id(options); end
  def add_default_name_and_id_for_value(tag_value, options); end
  def add_options(option_tags, options, value = _); end
  def generate_ids?; end
  def name_and_id_index(options); end
  def placeholder_required?(html_options); end
  def retrieve_autoindex(pre_match); end
  def retrieve_object(object); end
  def sanitized_method_name; end
  def sanitized_object_name; end
  def sanitized_value(value); end
  def select_content_tag(option_tags, options, html_options); end
  def tag_id(index = _); end
  def tag_name(multiple = _, index = _); end
  def value; end
  def value_before_type_cast; end
  def value_came_from_user?; end
end

class ActionView::Helpers::Tags::CheckBox < ::ActionView::Helpers::Tags::Base
  include(::ActionView::Helpers::Tags::Checkable)

  def initialize(object_name, method_name, template_object, checked_value, unchecked_value, options); end

  def render; end

  private

  def checked?(value); end
  def hidden_field_for_checkbox(options); end
end

class ActionView::Helpers::Tags::CollectionCheckBoxes < ::ActionView::Helpers::Tags::Base
  include(::ActionView::Helpers::Tags::CollectionHelpers)

  def render(&block); end

  private

  def hidden_field_name; end
  def render_component(builder); end
end

class ActionView::Helpers::Tags::CollectionCheckBoxes::CheckBoxBuilder < ::ActionView::Helpers::Tags::CollectionHelpers::Builder
  def check_box(extra_html_options = _); end
end

class ActionView::Helpers::Tags::CollectionRadioButtons < ::ActionView::Helpers::Tags::Base
  include(::ActionView::Helpers::Tags::CollectionHelpers)

  def render(&block); end

  private

  def render_component(builder); end
end

class ActionView::Helpers::Tags::CollectionRadioButtons::RadioButtonBuilder < ::ActionView::Helpers::Tags::CollectionHelpers::Builder
  def radio_button(extra_html_options = _); end
end

class ActionView::Helpers::Tags::CollectionSelect < ::ActionView::Helpers::Tags::Base
  def initialize(object_name, method_name, template_object, collection, value_method, text_method, options, html_options); end

  def render; end
end

class ActionView::Helpers::Tags::ColorField < ::ActionView::Helpers::Tags::TextField
  def render; end

  private

  def validate_color_string(string); end
end

class ActionView::Helpers::Tags::DateField < ::ActionView::Helpers::Tags::DatetimeField

  private

  def format_date(value); end
end

class ActionView::Helpers::Tags::DateSelect < ::ActionView::Helpers::Tags::Base
  def initialize(object_name, method_name, template_object, options, html_options); end

  def render; end

  private

  def datetime_selector(options, html_options); end
  def default_datetime(options); end
  def select_type; end

  def self.select_type; end
end

class ActionView::Helpers::Tags::DatetimeField < ::ActionView::Helpers::Tags::TextField
  def render; end

  private

  def datetime_value(value); end
  def format_date(value); end
end

class ActionView::Helpers::Tags::DatetimeLocalField < ::ActionView::Helpers::Tags::DatetimeField

  private

  def format_date(value); end

  def self.field_type; end
end

class ActionView::Helpers::Tags::DatetimeSelect < ::ActionView::Helpers::Tags::DateSelect
end

class ActionView::Helpers::Tags::EmailField < ::ActionView::Helpers::Tags::TextField
end

class ActionView::Helpers::Tags::FileField < ::ActionView::Helpers::Tags::TextField
end

class ActionView::Helpers::Tags::GroupedCollectionSelect < ::ActionView::Helpers::Tags::Base
  def initialize(object_name, method_name, template_object, collection, group_method, group_label_method, option_key_method, option_value_method, options, html_options); end

  def render; end
end

class ActionView::Helpers::Tags::HiddenField < ::ActionView::Helpers::Tags::TextField
end

class ActionView::Helpers::Tags::Label < ::ActionView::Helpers::Tags::Base
  def initialize(object_name, method_name, template_object, content_or_options = _, options = _); end

  def render(&block); end

  private

  def render_component(builder); end
end

class ActionView::Helpers::Tags::Label::LabelBuilder
  def initialize(template_object, object_name, method_name, object, tag_value); end

  def object; end
  def translation; end
end

class ActionView::Helpers::Tags::MonthField < ::ActionView::Helpers::Tags::DatetimeField

  private

  def format_date(value); end
end

class ActionView::Helpers::Tags::NumberField < ::ActionView::Helpers::Tags::TextField
  def render; end
end

class ActionView::Helpers::Tags::PasswordField < ::ActionView::Helpers::Tags::TextField
  def render; end
end

class ActionView::Helpers::Tags::RadioButton < ::ActionView::Helpers::Tags::Base
  include(::ActionView::Helpers::Tags::Checkable)

  def initialize(object_name, method_name, template_object, tag_value, options); end

  def render; end

  private

  def checked?(value); end
end

class ActionView::Helpers::Tags::RangeField < ::ActionView::Helpers::Tags::NumberField
end

class ActionView::Helpers::Tags::SearchField < ::ActionView::Helpers::Tags::TextField
  def render; end
end

class ActionView::Helpers::Tags::Select < ::ActionView::Helpers::Tags::Base
  def initialize(object_name, method_name, template_object, choices, options, html_options); end

  def render; end

  private

  def grouped_choices?; end
end

class ActionView::Helpers::Tags::TelField < ::ActionView::Helpers::Tags::TextField
end

class ActionView::Helpers::Tags::TextArea < ::ActionView::Helpers::Tags::Base
  include(::ActionView::Helpers::Tags::Placeholderable)

  def render; end
end

class ActionView::Helpers::Tags::TextField < ::ActionView::Helpers::Tags::Base
  include(::ActionView::Helpers::Tags::Placeholderable)

  def render; end

  private

  def field_type; end

  def self.field_type; end
end

class ActionView::Helpers::Tags::TimeField < ::ActionView::Helpers::Tags::DatetimeField

  private

  def format_date(value); end
end

class ActionView::Helpers::Tags::TimeSelect < ::ActionView::Helpers::Tags::DateSelect
end

class ActionView::Helpers::Tags::TimeZoneSelect < ::ActionView::Helpers::Tags::Base
  def initialize(object_name, method_name, template_object, priority_zones, options, html_options); end

  def render; end
end

class ActionView::Helpers::Tags::Translator
  def initialize(object, object_name, method_and_value, scope:); end

  def translate; end

  protected

  def method_and_value; end
  def model; end
  def object_name; end
  def scope; end

  private

  def human_attribute_name; end
  def i18n_default; end
end

class ActionView::Helpers::Tags::UrlField < ::ActionView::Helpers::Tags::TextField
end

class ActionView::Helpers::Tags::WeekField < ::ActionView::Helpers::Tags::DatetimeField

  private

  def format_date(value); end
end

module ActionView::Helpers::TextHelper
  include(::ActionView::Helpers::OutputSafetyHelper)
  extend(::ActiveSupport::Concern)

  include(::ActionView::Helpers::SanitizeHelper)
  include(::ActionView::Helpers::TagHelper)

  def concat(string); end
  def current_cycle(name = _); end
  def cycle(first_value, *values); end
  def excerpt(text, phrase, options = _); end
  def highlight(text, phrases, options = _); end
  def pluralize(count, singular, plural_arg = _, plural: _, locale: _); end
  def reset_cycle(name = _); end
  def safe_concat(string); end
  def simple_format(text, html_options = _, options = _); end
  def truncate(text, options = _, &block); end
  def word_wrap(text, line_width: _, break_sequence: _); end

  private

  def cut_excerpt_part(part_position, part, separator, options); end
  def get_cycle(name); end
  def set_cycle(name, cycle_object); end
  def split_paragraphs(text); end
end

class ActionView::Helpers::TextHelper::Cycle
  def initialize(first_value, *values); end

  def current_value; end
  def reset; end
  def to_s; end
  def values; end

  private

  def next_index; end
  def previous_index; end
  def step_index(n); end
end

module ActionView::Helpers::TranslationHelper
  extend(::ActiveSupport::Concern)

  include(::ActionView::Helpers::TagHelper)

  def l(*args); end
  def localize(*args); end
  def t(key, options = _); end
  def translate(key, options = _); end

  private

  def html_safe_translation_key?(key); end
  def scope_key_by_partial(key); end
end

module ActionView::Helpers::UrlHelper
  extend(::ActiveSupport::Concern)

  include(::ActionView::Helpers::TagHelper)

  mixes_in_class_methods(::ActionView::Helpers::UrlHelper::ClassMethods)

  def button_to(name = _, options = _, html_options = _, &block); end
  def current_page?(options, check_parameters: _); end
  def link_to(name = _, options = _, html_options = _, &block); end
  def link_to_if(condition, name, options = _, html_options = _, &block); end
  def link_to_unless(condition, name, options = _, html_options = _, &block); end
  def link_to_unless_current(name, options = _, html_options = _, &block); end
  def mail_to(email_address, name = _, html_options = _, &block); end
  def url_for(options = _); end

  protected

  def _back_url; end
  def _filtered_referrer; end

  private

  def add_method_to_attributes!(html_options, method); end
  def convert_options_to_data_attributes(options, html_options); end
  def link_to_remote_options?(options); end
  def method_not_get_method?(method); end
  def method_tag(method); end
  def to_form_params(attribute, namespace = _); end
  def token_tag(token = _, form_options: _); end
end

ActionView::Helpers::UrlHelper::BUTTON_TAG_METHOD_VERBS = T.let(T.unsafe(nil), Array)

module ActionView::Helpers::UrlHelper::ClassMethods
  def _url_for_modules; end
end

ActionView::Helpers::UrlHelper::STRINGIFIED_COMMON_METHODS = T.let(T.unsafe(nil), Hash)

class ActionView::I18nProxy < ::I18n::Config
  def initialize(original_config, lookup_context); end

  def locale; end
  def locale=(value); end
  def lookup_context; end
  def original_config; end
end

module ActionView::Layouts
  extend(::ActiveSupport::Concern)

  include(::ActionView::ViewPaths)
  include(::ActionView::Rendering)

  mixes_in_class_methods(::ActionView::Layouts::ClassMethods)

  def initialize(*_); end

  def _layout_conditions(*args, &block); end
  def _normalize_options(options); end
  def action_has_layout=(_); end
  def action_has_layout?; end

  private

  def _conditional_layout?; end
  def _default_layout(formats, require_layout = _); end
  def _include_layout?(options); end
  def _layout(*_); end
  def _layout_for_option(name); end
  def _normalize_layout(value); end
end

module ActionView::Layouts::ClassMethods
  def _write_layout_method; end
  def inherited(klass); end
  def layout(layout, conditions = _); end

  private

  def _implied_layout_name; end
end

module ActionView::Layouts::ClassMethods::LayoutConditions

  private

  def _conditional_layout?; end
end

class ActionView::LogSubscriber < ::ActiveSupport::LogSubscriber
  def initialize; end

  def logger; end
  def render_collection(event); end
  def render_partial(event); end
  def render_template(event); end
  def start(name, id, payload); end

  private

  def cache_message(payload); end
  def from_rails_root(string); end
  def log_rendering_start(payload); end
  def rails_root; end
  def render_count(payload); end
end

ActionView::LogSubscriber::EMPTY = T.let(T.unsafe(nil), String)

ActionView::LogSubscriber::VIEWS_PATTERN = T.let(T.unsafe(nil), Regexp)

class ActionView::LookupContext
  include(::ActionView::LookupContext::Accessors)
  include(::ActionView::LookupContext::DetailsCache)
  include(::ActionView::LookupContext::ViewPaths)

  def initialize(view_paths, details = _, prefixes = _); end

  def digest_cache; end
  def fallbacks; end
  def fallbacks=(obj); end
  def formats=(values); end
  def locale; end
  def locale=(value); end
  def prefixes; end
  def prefixes=(_); end
  def registered_details; end
  def registered_details=(obj); end
  def rendered_format; end
  def rendered_format=(_); end

  private

  def initialize_details(target, details); end

  def self.fallbacks; end
  def self.fallbacks=(obj); end
  def self.register_detail(name, &block); end
  def self.registered_details; end
  def self.registered_details=(obj); end
end

module ActionView::LookupContext::Accessors
  def default_formats; end
  def default_handlers; end
  def default_locale; end
  def default_variants; end
  def formats; end
  def formats=(value); end
  def handlers; end
  def handlers=(value); end
  def locale; end
  def locale=(value); end
  def variants; end
  def variants=(value); end
end

ActionView::LookupContext::Accessors::DEFAULT_PROCS = T.let(T.unsafe(nil), Hash)

module ActionView::LookupContext::DetailsCache
  def cache; end
  def cache=(_); end
  def details_key; end
  def disable_cache; end

  private

  def _set_detail(key, value); end
end

class ActionView::LookupContext::DetailsKey
  def eql?(_); end

  def self.clear; end
  def self.digest_caches; end
  def self.get(details); end
end

module ActionView::LookupContext::ViewPaths
  def any?(name, prefixes = _, partial = _); end
  def any_templates?(name, prefixes = _, partial = _); end
  def exists?(name, prefixes = _, partial = _, keys = _, **options); end
  def find(name, prefixes = _, partial = _, keys = _, options = _); end
  def find_all(name, prefixes = _, partial = _, keys = _, options = _); end
  def find_file(name, prefixes = _, partial = _, keys = _, options = _); end
  def find_template(name, prefixes = _, partial = _, keys = _, options = _); end
  def html_fallback_for_js; end
  def template_exists?(name, prefixes = _, partial = _, keys = _, **options); end
  def view_paths; end
  def view_paths=(paths); end
  def with_fallbacks; end

  private

  def args_for_any(name, prefixes, partial); end
  def args_for_lookup(name, prefixes, partial, keys, details_options); end
  def detail_args_for(options); end
  def detail_args_for_any; end
  def normalize_name(name, prefixes); end
end

class ActionView::MissingTemplate < ::ActionView::ActionViewError
  def initialize(paths, path, prefixes, partial, details, *_); end

  def path; end
end

module ActionView::ModelNaming
  def convert_to_model(object); end
  def model_name_from_record_or_class(record_or_class); end
end

class ActionView::OptimizedFileSystemResolver < ::ActionView::FileSystemResolver
  def build_query(path, details); end
end

class ActionView::OutputBuffer < ::ActiveSupport::SafeBuffer
  def initialize(*_); end

  def <<(value); end
  def append=(value); end
  def safe_append=(value); end
  def safe_expr_append=(val); end
end

class ActionView::OutputFlow
  def initialize; end

  def append(key, value); end
  def append!(key, value); end
  def content; end
  def get(key); end
  def set(key, value); end
end

class ActionView::PartialRenderer < ::ActionView::AbstractRenderer
  include(::ActionView::CollectionCaching)

  def initialize(*_); end

  def collection_cache; end
  def collection_cache=(obj); end
  def render(context, options, block); end

  private

  def collection_from_object; end
  def collection_from_options; end
  def collection_with_template; end
  def collection_without_template; end
  def find_partial; end
  def find_template(path, locals); end
  def merge_prefix_into_object_path(prefix, object_path); end
  def partial_path(object = _); end
  def prefixed_partial_names; end
  def raise_invalid_identifier(path); end
  def raise_invalid_option_as(as); end
  def render_collection; end
  def render_partial; end
  def retrieve_template_keys; end
  def retrieve_variable(path, as); end
  def setup(context, options, block); end

  def self.collection_cache; end
  def self.collection_cache=(obj); end
end

ActionView::PartialRenderer::IDENTIFIER_ERROR_MESSAGE = T.let(T.unsafe(nil), String)

ActionView::PartialRenderer::OPTION_AS_ERROR_MESSAGE = T.let(T.unsafe(nil), String)

ActionView::PartialRenderer::PREFIXED_PARTIAL_NAMES = T.let(T.unsafe(nil), Concurrent::Map)

class ActionView::PathResolver < ::ActionView::Resolver
  def initialize(pattern = _); end


  private

  def build_query(path, details); end
  def escape_entry(entry); end
  def extract_handler_and_format_and_variant(path); end
  def find_template_paths(query); end
  def find_templates(name, prefix, partial, details, outside_app_allowed = _); end
  def inside_path?(path, filename); end
  def mtime(p); end
  def query(path, details, formats, outside_app_allowed); end
  def reject_files_external_to_app(files); end
end

ActionView::PathResolver::DEFAULT_PATTERN = T.let(T.unsafe(nil), String)

ActionView::PathResolver::EXTENSIONS = T.let(T.unsafe(nil), Hash)

class ActionView::PathSet
  include(::Enumerable)

  def initialize(paths = _); end

  def +(array); end
  def <<(*args); end
  def [](*args, &block); end
  def compact; end
  def concat(*args); end
  def each(*args, &block); end
  def exists?(path, prefixes, *args); end
  def find(*args); end
  def find_all(path, prefixes = _, *args); end
  def find_all_with_query(query); end
  def find_file(path, prefixes = _, *args); end
  def include?(*args, &block); end
  def insert(*args); end
  def paths; end
  def pop(*args, &block); end
  def push(*args); end
  def size(*args, &block); end
  def to_ary; end
  def unshift(*args); end

  private

  def _find_all(path, prefixes, args, outside_app); end
  def initialize_copy(other); end
  def typecast(paths); end
end

class ActionView::Railtie < ::Rails::Engine
end

module ActionView::RecordIdentifier
  include(::ActionView::ModelNaming)
  extend(::ActionView::RecordIdentifier)
  extend(::ActionView::ModelNaming)

  def dom_class(record_or_class, prefix = _); end
  def dom_id(record, prefix = _); end

  private

  def record_key_for_dom_id(record); end
end

ActionView::RecordIdentifier::JOIN = T.let(T.unsafe(nil), String)

ActionView::RecordIdentifier::NEW = T.let(T.unsafe(nil), String)

class ActionView::Renderer
  def initialize(lookup_context); end

  def cache_hits; end
  def lookup_context; end
  def lookup_context=(_); end
  def render(context, options); end
  def render_body(context, options); end
  def render_partial(context, options, &block); end
  def render_template(context, options); end
end

module ActionView::Rendering
  extend(::ActiveSupport::Concern)

  include(::ActionView::ViewPaths)

  mixes_in_class_methods(::ActionView::Rendering::ClassMethods)

  def process(*_); end
  def render_to_body(options = _); end
  def rendered_format; end
  def view_context; end
  def view_context_class; end
  def view_context_class=(_); end
  def view_renderer; end

  private

  def _normalize_args(action = _, options = _); end
  def _normalize_options(options); end
  def _process_format(format); end
  def _render_template(options); end
end

module ActionView::Rendering::ClassMethods
  def view_context_class; end
end

class ActionView::Resolver
  def initialize; end

  def caching; end
  def caching=(obj); end
  def caching?(*args, &block); end
  def clear_cache; end
  def find_all(name, prefix = _, partial = _, details = _, key = _, locals = _); end
  def find_all_anywhere(name, prefix, partial = _, details = _, key = _, locals = _); end
  def find_all_with_query(query); end

  private

  def build_path(name, prefix, partial); end
  def cached(key, path_info, details, locals); end
  def decorate(templates, path_info, details, locals); end
  def find_templates(name, prefix, partial, details, outside_app_allowed = _); end

  def self.caching; end
  def self.caching=(obj); end
  def self.caching?; end
end

class ActionView::Resolver::Cache
  def initialize; end

  def cache(key, name, prefix, partial, locals); end
  def cache_query(query); end
  def clear; end
  def inspect; end
  def size; end

  private

  def canonical_no_templates(templates); end
  def templates_have_changed?(cached_templates, fresh_templates); end
end

ActionView::Resolver::Cache::KEY_BLOCK = T.let(T.unsafe(nil), Proc)

ActionView::Resolver::Cache::NAME_BLOCK = T.let(T.unsafe(nil), Proc)

ActionView::Resolver::Cache::NO_TEMPLATES = T.let(T.unsafe(nil), Array)

ActionView::Resolver::Cache::PARTIAL_BLOCK = T.let(T.unsafe(nil), Proc)

ActionView::Resolver::Cache::PREFIX_BLOCK = T.let(T.unsafe(nil), Proc)

class ActionView::Resolver::Cache::SmallCache < ::Concurrent::Map
  def initialize(options = _); end
end

class ActionView::Resolver::Path
  def initialize(name, prefix, partial, virtual); end

  def name; end
  def partial; end
  def partial?; end
  def prefix; end
  def to_s; end
  def to_str; end
  def virtual; end

  def self.build(name, prefix, partial); end
end

module ActionView::RoutingUrlFor
  def url_for(options = _); end
  def url_options; end

  private

  def _generate_paths_by_default; end
  def _routes_context; end
  def only_path?(host); end
  def optimize_routes_generation?; end
end

class ActionView::StreamingBuffer
  def initialize(block); end

  def <<(value); end
  def append=(value); end
  def concat(value); end
  def html_safe; end
  def html_safe?; end
  def safe_append=(value); end
  def safe_concat(value); end
end

class ActionView::StreamingFlow < ::ActionView::OutputFlow
  def initialize(view, fiber); end

  def append!(key, value); end
  def get(key); end

  private

  def inside_fiber?; end
end

class ActionView::StreamingTemplateRenderer < ::ActionView::TemplateRenderer
  def render_template(template, layout_name = _, locals = _); end

  private

  def delayed_render(buffer, template, layout, view, locals); end
end

class ActionView::StreamingTemplateRenderer::Body
  def initialize(&start); end

  def each(&block); end

  private

  def log_error(exception); end
end

class ActionView::Template
  extend(::ActiveSupport::Autoload)
  extend(::ActionView::Template::Handlers)

  def initialize(source, identifier, handler, details); end

  def encode!; end
  def formats; end
  def formats=(_); end
  def handler; end
  def identifier; end
  def inspect; end
  def locals; end
  def locals=(_); end
  def original_encoding; end
  def refresh(view); end
  def render(view, locals, buffer = _, &block); end
  def source; end
  def supports_streaming?; end
  def type; end
  def updated_at; end
  def variants; end
  def variants=(_); end
  def virtual_path; end
  def virtual_path=(_); end

  private

  def compile(mod); end
  def compile!(view); end
  def handle_render_error(view, e); end
  def identifier_method_name; end
  def instrument(action, &block); end
  def instrument_payload; end
  def instrument_render_template(&block); end
  def locals_code; end
  def method_name; end
end

class ActionView::Template::Error < ::ActionView::ActionViewError
  def initialize(template); end

  def annoted_source_code; end
  def cause; end
  def file_name; end
  def line_number; end
  def source_extract(indentation = _, output = _); end
  def sub_template_message; end
  def sub_template_of(template_path); end

  private

  def formatted_code_for(source_code, line_counter, indent, output); end
  def source_location; end
end

ActionView::Template::Error::SOURCE_CODE_RADIUS = T.let(T.unsafe(nil), Integer)

ActionView::Template::Finalizer = T.let(T.unsafe(nil), Proc)

class ActionView::Template::HTML
  def initialize(string, type = _); end

  def formats; end
  def identifier; end
  def inspect; end
  def render(*args); end
  def to_str; end
  def type; end
  def type=(_); end
end

module ActionView::Template::Handlers
  def handler_for_extension(extension); end
  def register_default_template_handler(extension, klass); end
  def register_template_handler(*extensions, handler); end
  def registered_template_handler(extension); end
  def template_handler_extensions; end
  def unregister_template_handler(*extensions); end

  def self.extended(base); end
  def self.extensions; end
end

class ActionView::Template::Handlers::Builder
  def call(template); end
  def default_format; end
  def default_format=(val); end
  def default_format?; end

  private

  def require_engine; end

  def self.default_format; end
  def self.default_format=(val); end
  def self.default_format?; end
end

class ActionView::Template::Handlers::ERB
  def call(template); end
  def erb_implementation; end
  def erb_implementation=(val); end
  def erb_implementation?; end
  def erb_trim_mode; end
  def erb_trim_mode=(val); end
  def erb_trim_mode?; end
  def escape_whitelist; end
  def escape_whitelist=(val); end
  def escape_whitelist?; end
  def handles_encoding?; end
  def supports_streaming?; end

  private

  def valid_encoding(string, encoding); end

  def self.call(template); end
  def self.erb_implementation; end
  def self.erb_implementation=(val); end
  def self.erb_implementation?; end
  def self.erb_trim_mode; end
  def self.erb_trim_mode=(val); end
  def self.erb_trim_mode?; end
  def self.escape_whitelist; end
  def self.escape_whitelist=(val); end
  def self.escape_whitelist?; end
end

ActionView::Template::Handlers::ERB::ENCODING_TAG = T.let(T.unsafe(nil), Regexp)

class ActionView::Template::Handlers::ERB::Erubi < ::Erubi::Engine
  def initialize(input, properties = _); end

  def evaluate(action_view_erb_handler_context); end

  private

  def add_code(code); end
  def add_expression(indicator, code); end
  def add_postamble(_); end
  def add_text(text); end
  def flush_newline_if_pending(src); end
end

ActionView::Template::Handlers::ERB::Erubi::BLOCK_EXPR = T.let(T.unsafe(nil), Regexp)

class ActionView::Template::Handlers::Html < ::ActionView::Template::Handlers::Raw
  def call(template); end
end

class ActionView::Template::Handlers::Raw
  def call(template); end
end

class ActionView::Template::Text
  def initialize(string); end

  def formats; end
  def identifier; end
  def inspect; end
  def render(*args); end
  def to_str; end
  def type; end
  def type=(_); end
end

class ActionView::Template::Types
  def type_klass; end
  def type_klass=(obj); end

  def self.[](type); end
  def self.delegate_to(klass); end
  def self.symbols; end
  def self.type_klass; end
  def self.type_klass=(obj); end
end

class ActionView::Template::Types::Type
  def initialize(symbol); end

  def ==(type); end
  def ref; end
  def symbol; end
  def to_s; end
  def to_str; end
  def to_sym; end

  def self.[](type); end
end

ActionView::Template::Types::Type::SET = T.let(T.unsafe(nil), T.untyped)

ActionView::TemplateError = ActionView::Template::Error

class ActionView::TemplateRenderer < ::ActionView::AbstractRenderer
  def render(context, options); end

  private

  def determine_template(options); end
  def find_layout(layout, keys, formats); end
  def render_template(template, layout_name = _, locals = _); end
  def render_with_layout(path, locals); end
  def resolve_layout(layout, keys, formats); end
end

class ActionView::TestCase < ::ActiveSupport::TestCase
  include(::Rails::Dom::Testing::Assertions::DomAssertions)
  include(::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable)
  include(::Rails::Dom::Testing::Assertions::SelectorAssertions)
  include(::Rails::Dom::Testing::Assertions)
  include(::ActionDispatch::Assertions::ResponseAssertions)
  include(::ActionDispatch::Assertions::RoutingAssertions)
  include(::ActionDispatch::Assertions)
  include(::AbstractController::Helpers)
  include(::ActionView::Helpers::CaptureHelper)
  include(::ActionView::Helpers::ControllerHelper)
  include(::ActionView::Helpers::CspHelper)
  include(::ActionView::Helpers::CsrfHelper)
  include(::ActionView::Helpers::DateHelper)
  include(::ActionView::Helpers::OutputSafetyHelper)
  include(::ActionView::Helpers::TagHelper)
  include(::ActiveSupport::Benchmarkable)
  include(::ActionView::Helpers::ActiveModelHelper)
  include(::ActionView::Helpers::AssetUrlHelper)
  include(::ActionView::Helpers::AssetTagHelper)
  include(::ActionView::Helpers::UrlHelper)
  include(::ActionView::Helpers::AtomFeedHelper)
  include(::ActionView::Helpers::CacheHelper)
  include(::ActionView::Helpers::SanitizeHelper)
  include(::ActionView::Helpers::DebugHelper)
  include(::ActionView::Helpers::TextHelper)
  include(::ActionView::Helpers::FormTagHelper)
  include(::ActionDispatch::TestProcess::FixtureFile)
  include(::ActionDispatch::TestProcess)
  include(::ActionController::TemplateAssertions)
  include(::ActionView::CompiledTemplates)
  include(::ActionView::Context)
  include(::ActionDispatch::Routing::PolymorphicRoutes)
  include(::ActionView::ModelNaming)
  include(::ActionView::RecordIdentifier)
  include(::ActionView::Helpers::FormHelper)
  include(::ActionView::Helpers::TranslationHelper)
  include(::ActionView::Helpers::FormOptionsHelper)
  include(::ActionView::Helpers::JavaScriptHelper)
  include(::ActionView::Helpers::NumberHelper)
  include(::ActionView::Helpers::RecordTagHelper)
  include(::ActionView::Helpers::RenderingHelper)
  include(::ActionView::Helpers)
  include(::ActiveSupport::Testing::ConstantLookup)
  include(::ActionView::RoutingUrlFor)
  include(::ActionView::TestCase::Behavior)
  extend(::AbstractController::Helpers::ClassMethods)
  extend(::ActionView::Helpers::UrlHelper::ClassMethods)
  extend(::ActionView::Helpers::SanitizeHelper::ClassMethods)
  extend(::ActiveSupport::Testing::ConstantLookup::ClassMethods)
  extend(::ActionView::TestCase::Behavior::ClassMethods)

  def _helper_methods; end
  def _helper_methods=(val); end
  def _helper_methods?; end
  def _helpers; end
  def _helpers=(val); end
  def _helpers?; end
  def debug_missing_translation; end
  def debug_missing_translation=(obj); end

  def self.__callbacks; end
  def self._helper_methods; end
  def self._helper_methods=(val); end
  def self._helper_methods?; end
  def self._helpers; end
  def self._helpers=(val); end
  def self._helpers?; end
  def self.debug_missing_translation; end
  def self.debug_missing_translation=(obj); end
end

module ActionView::TestCase::Behavior
  include(::ActionDispatch::TestProcess::FixtureFile)
  include(::ActionDispatch::TestProcess)
  include(::ActionController::TemplateAssertions)
  include(::ActionView::CompiledTemplates)
  include(::ActionView::Context)
  include(::ActionDispatch::Routing::PolymorphicRoutes)
  include(::ActionView::ModelNaming)
  include(::ActionView::RecordIdentifier)
  include(::ActionView::RoutingUrlFor)
  extend(::ActiveSupport::Concern)

  include(::Rails::Dom::Testing::Assertions)
  include(::ActionDispatch::Assertions)
  include(::AbstractController::Helpers)
  include(::ActionView::Helpers::TagHelper)
  include(::ActionView::Helpers::AssetTagHelper)
  include(::ActionView::Helpers::UrlHelper)
  include(::ActionView::Helpers::SanitizeHelper)
  include(::ActionView::Helpers::TextHelper)
  include(::ActionView::Helpers::FormTagHelper)
  include(::ActionView::Helpers::FormHelper)
  include(::ActionView::Helpers::TranslationHelper)
  include(::ActionView::Helpers)
  include(::ActiveSupport::Testing::ConstantLookup)

  mixes_in_class_methods(::ActionView::TestCase::Behavior::ClassMethods)

  def _routes; end
  def config; end
  def controller; end
  def controller=(_); end
  def lookup_context(*args, &block); end
  def output_buffer; end
  def output_buffer=(_); end
  def render(options = _, local_assigns = _, &block); end
  def rendered; end
  def rendered=(_); end
  def rendered_views; end
  def setup_with_controller; end

  private

  def _user_defined_ivars; end
  def _view; end
  def document_root_element; end
  def make_test_case_available_to_view!; end
  def method_missing(selector, *args); end
  def respond_to_missing?(name, include_private = _); end
  def say_no_to_protect_against_forgery!; end
  def view; end
  def view_assigns; end
end

module ActionView::TestCase::Behavior::ClassMethods
  def determine_default_helper_class(name); end
  def helper_class; end
  def helper_class=(_); end
  def helper_method(*methods); end
  def new(*_); end
  def tests(helper_class); end

  private

  def include_helper_modules!; end
end

ActionView::TestCase::Behavior::INTERNAL_IVARS = T.let(T.unsafe(nil), Array)

module ActionView::TestCase::Behavior::Locals
  def render(options = _, local_assigns = _); end
  def rendered_views; end
  def rendered_views=(_); end
end

class ActionView::TestCase::Behavior::RenderedViewsCollection
  def initialize; end

  def add(view, locals); end
  def locals_for(view); end
  def rendered_views; end
  def view_rendered?(view, expected_locals); end
end

class ActionView::TestCase::TestController < ::ActionController::Base
  include(::ActionDispatch::TestProcess::FixtureFile)
  include(::ActionDispatch::TestProcess)

  def initialize; end

  def controller_path=(path); end
  def params; end
  def params=(_); end
  def request; end
  def request=(_); end
  def response; end
  def response=(_); end

  private

  def _layout(formats); end

  def self._helpers; end
  def self.controller_path=(_); end
  def self.middleware_stack; end
end

module ActionView::VERSION
end

ActionView::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

ActionView::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

ActionView::VERSION::PRE = T.let(T.unsafe(nil), String)

ActionView::VERSION::STRING = T.let(T.unsafe(nil), String)

ActionView::VERSION::TINY = T.let(T.unsafe(nil), Integer)

module ActionView::ViewPaths
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActionView::ViewPaths::ClassMethods)

  def _prefixes; end
  def any_templates?(*args, &block); end
  def append_view_path(path); end
  def details_for_lookup; end
  def formats(*args, &block); end
  def formats=(arg); end
  def locale(*args, &block); end
  def locale=(arg); end
  def lookup_context; end
  def prepend_view_path(path); end
  def template_exists?(*args, &block); end
  def view_paths(*args, &block); end
end

module ActionView::ViewPaths::ClassMethods
  def _prefixes; end
  def append_view_path(path); end
  def prepend_view_path(path); end
  def view_paths; end
  def view_paths=(paths); end

  private

  def local_prefixes; end
end

class ActionView::WrongEncodingError < ::ActionView::EncodingError
  def initialize(string, encoding); end

  def message; end
end

module ActionView::CollectionCaching
  extend(::ActiveSupport::Concern)


  private

  def cache_collection_render(instrumentation_payload); end
  def callable_cache_key?; end
  def collection_by_cache_keys; end
  def expanded_cache_key(key); end
  def fetch_or_cache_partial(cached_partials, order_by:); end
end

class ActionView::DependencyTracker
  def self.find_dependencies(name, template, view_paths = _); end
  def self.register_tracker(extension, tracker); end
  def self.remove_tracker(handler); end
end

class ActionView::DependencyTracker::ERBTracker
  def initialize(name, template, view_paths = _); end

  def dependencies; end

  private

  def add_dependencies(render_dependencies, arguments, pattern); end
  def add_dynamic_dependency(dependencies, dependency); end
  def add_static_dependency(dependencies, dependency); end
  def directory; end
  def explicit_dependencies; end
  def name; end
  def render_dependencies; end
  def resolve_directories(wildcard_dependencies); end
  def source; end
  def template; end

  def self.call(name, template, view_paths = _); end
  def self.supports_view_paths?; end
end

ActionView::DependencyTracker::ERBTracker::EXPLICIT_DEPENDENCY = T.let(T.unsafe(nil), Regexp)

ActionView::DependencyTracker::ERBTracker::IDENTIFIER = T.let(T.unsafe(nil), Regexp)

ActionView::DependencyTracker::ERBTracker::LAYOUT_DEPENDENCY = T.let(T.unsafe(nil), Regexp)

ActionView::DependencyTracker::ERBTracker::LAYOUT_HASH_KEY = T.let(T.unsafe(nil), Regexp)

ActionView::DependencyTracker::ERBTracker::PARTIAL_HASH_KEY = T.let(T.unsafe(nil), Regexp)

ActionView::DependencyTracker::ERBTracker::RENDER_ARGUMENTS = T.let(T.unsafe(nil), Regexp)

ActionView::DependencyTracker::ERBTracker::STRING = T.let(T.unsafe(nil), Regexp)

ActionView::DependencyTracker::ERBTracker::VARIABLE_OR_METHOD_CHAIN = T.let(T.unsafe(nil), Regexp)

module ActionView::Helpers::Tags::Checkable
  def input_checked?(options); end
end

module ActionView::Helpers::Tags::CollectionHelpers
  def initialize(object_name, method_name, template_object, collection, value_method, text_method, options, html_options); end


  private

  def default_html_options_for_collection(item, value); end
  def hidden_field; end
  def hidden_field_name; end
  def instantiate_builder(builder_class, item, value, text, html_options); end
  def render_collection; end
  def render_collection_for(builder_class, &block); end
  def sanitize_attribute_name(value); end
end

class ActionView::Helpers::Tags::CollectionHelpers::Builder
  def initialize(template_object, object_name, method_name, object, sanitized_attribute_name, text, value, input_html_options); end

  def label(label_html_options = _, &block); end
  def object; end
  def text; end
  def value; end
end

module ActionView::Helpers::Tags::Placeholderable
  def initialize(*_); end
end

class ActionView::PartialIteration
  def initialize(size); end

  def first?; end
  def index; end
  def iterate!; end
  def last?; end
  def size; end
end
