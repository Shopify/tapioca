# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   tapioca sync

# typed: true

module ActionView
  extend(::ActiveSupport::Autoload)

  def self.eager_load!; end
  def self.gem_version; end
  def self.version; end
end

ActionView::ENCODING_FLAG = T.let(T.unsafe(nil), String)

module ActionView::Helpers
  include(::ActiveSupport::Benchmarkable)
  include(::ActionView::Helpers::ActiveModelHelper)
  include(::ActionView::Helpers::AssetUrlHelper)
  include(::ActionView::Helpers::AtomFeedHelper)
  include(::ActionView::Helpers::CacheHelper)
  include(::ActionView::Helpers::SanitizeHelper)
  include(::ActionView::Helpers::CaptureHelper)
  include(::ActionView::Helpers::ControllerHelper)
  include(::ActionView::Helpers::CspHelper)
  include(::ActionView::Helpers::CsrfHelper)
  include(::ActionView::Helpers::DateHelper)
  include(::ActionView::Helpers::OutputSafetyHelper)
  include(::ActionView::Helpers::TagHelper)
  include(::ActionView::Helpers::DebugHelper)
  include(::ActionView::Helpers::TextHelper)
  include(::ActionView::Helpers::FormOptionsHelper)
  include(::ActionView::Helpers::JavaScriptHelper)
  include(::ActionView::Helpers::NumberHelper)
  include(::ActionView::Helpers::RecordTagHelper)
  include(::ActionView::Helpers::RenderingHelper)
  extend(::ActiveSupport::Autoload)
  extend(::ActiveSupport::Concern)

  include(::ActionView::Helpers::TagHelper)
  include(::ActionView::Helpers::AssetTagHelper)
  include(::ActionView::Helpers::UrlHelper)
  include(::ActionView::Helpers::SanitizeHelper)
  include(::ActionView::Helpers::TextHelper)
  include(::ActionView::Helpers::FormTagHelper)
  include(::ActionView::Helpers::FormHelper)
  include(::ActionView::Helpers::TranslationHelper)

  def self.eager_load!; end
end

module ActionView::Helpers::SanitizeHelper
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActionView::Helpers::SanitizeHelper::ClassMethods)

  def sanitize(html, options = _); end
  def sanitize_css(style); end
  def strip_links(html); end
  def strip_tags(html); end
end

module ActionView::Helpers::SanitizeHelper::ClassMethods
  def full_sanitizer; end
  def full_sanitizer=(_); end
  def link_sanitizer; end
  def link_sanitizer=(_); end
  def sanitized_allowed_attributes; end
  def sanitized_allowed_attributes=(attributes); end
  def sanitized_allowed_css_keywords; end
  def sanitized_allowed_css_keywords=(_); end
  def sanitized_allowed_css_properties; end
  def sanitized_allowed_css_properties=(_); end
  def sanitized_allowed_protocols; end
  def sanitized_allowed_protocols=(_); end
  def sanitized_allowed_tags; end
  def sanitized_allowed_tags=(tags); end
  def sanitized_bad_tags; end
  def sanitized_bad_tags=(_); end
  def sanitized_protocol_separator; end
  def sanitized_protocol_separator=(_); end
  def sanitized_shorthand_css_properties; end
  def sanitized_shorthand_css_properties=(_); end
  def sanitized_uri_attributes; end
  def sanitized_uri_attributes=(_); end
  def sanitizer_vendor; end
  def white_list_sanitizer; end
  def white_list_sanitizer=(_); end

  private

  def deprecate_option(name); end
end

ActionView::TemplateError = ActionView::Template::Error

module Rails
  extend(::ActiveSupport::Autoload)

  def self.app_class; end
  def self.app_class=(_); end
  def self.application; end
  def self.application=(_); end
  def self.backtrace_cleaner; end
  def self.cache; end
  def self.cache=(_); end
  def self.configuration; end
  def self.env; end
  def self.env=(environment); end
  def self.gem_version; end
  def self.groups(*groups); end
  def self.initialize!(*args, &block); end
  def self.initialized?(*args, &block); end
  def self.logger; end
  def self.logger=(_); end
  def self.public_path; end
  def self.root; end
  def self.version; end
end

module Rails::Html
end

class Rails::Html::FullSanitizer < ::Rails::Html::Sanitizer
  def sanitize(html, options = _); end
end

class Rails::Html::LinkSanitizer < ::Rails::Html::Sanitizer
  def initialize; end

  def sanitize(html, options = _); end
end

class Rails::Html::PermitScrubber < ::Loofah::Scrubber
  def initialize; end

  def attributes; end
  def attributes=(attributes); end
  def scrub(node); end
  def tags; end
  def tags=(tags); end

  protected

  def allowed_node?(node); end
  def keep_node?(node); end
  def scrub_attribute(node, attr_node); end
  def scrub_attribute?(name); end
  def scrub_attributes(node); end
  def scrub_css_attribute(node); end
  def scrub_node(node); end
  def skip_node?(node); end
  def validate!(var, name); end
end

class Rails::Html::SafeListSanitizer < ::Rails::Html::Sanitizer
  def initialize; end

  def sanitize(html, options = _); end
  def sanitize_css(style_string); end

  private

  def allowed_attributes(options); end
  def allowed_tags(options); end

  def self.allowed_attributes; end
  def self.allowed_attributes=(_); end
  def self.allowed_tags; end
  def self.allowed_tags=(_); end
end

class Rails::Html::Sanitizer
  def sanitize(html, options = _); end

  private

  def properly_encode(fragment, options); end
  def remove_xpaths(node, xpaths); end

  def self.full_sanitizer; end
  def self.link_sanitizer; end
  def self.safe_list_sanitizer; end
  def self.white_list_sanitizer; end
end

Rails::Html::Sanitizer::VERSION = T.let(T.unsafe(nil), String)

class Rails::Html::TargetScrubber < ::Rails::Html::PermitScrubber
  def allowed_node?(node); end
  def scrub_attribute?(name); end
end

class Rails::Html::TextOnlyScrubber < ::Loofah::Scrubber
  def initialize; end

  def scrub(node); end
end

Rails::Html::WhiteListSanitizer = Rails::Html::SafeListSanitizer

Rails::Html::XPATHS_TO_REMOVE = T.let(T.unsafe(nil), Array)
