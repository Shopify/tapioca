# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `minitest-reporters` gem.
# Please instead update this file by running `bin/tapioca gem minitest-reporters`.

# typed: true

module Minitest
  class << self
    def __run(reporter, options); end
    def after_run(&block); end
    def autorun; end
    def backtrace_filter; end
    def backtrace_filter=(_arg0); end
    def clock_time; end
    def extensions; end
    def extensions=(_arg0); end
    def filter_backtrace(bt); end
    def info_signal; end
    def info_signal=(_arg0); end
    def init_plugins(options); end
    def load_plugins; end
    def parallel_executor; end
    def parallel_executor=(_arg0); end
    def process_args(args = T.unsafe(nil)); end
    def reporter; end
    def reporter=(_arg0); end
    def run(args = T.unsafe(nil)); end
    def run_one_method(klass, method_name); end
  end
end

Minitest::ENCS = T.let(T.unsafe(nil), TrueClass)

class Minitest::Expectation < ::Struct
  def ctx; end
  def ctx=(_); end
  def must_be(*args); end
  def must_be_close_to(*args); end
  def must_be_empty(*args); end
  def must_be_instance_of(*args); end
  def must_be_kind_of(*args); end
  def must_be_nil(*args); end
  def must_be_same_as(*args); end
  def must_be_silent(*args); end
  def must_be_within_delta(*args); end
  def must_be_within_epsilon(*args); end
  def must_equal(*args); end
  def must_include(*args); end
  def must_match(*args); end
  def must_output(*args); end
  def must_raise(*args); end
  def must_respond_to(*args); end
  def must_throw(*args); end
  def path_must_exist(*args); end
  def path_wont_exist(*args); end
  def target; end
  def target=(_); end
  def wont_be(*args); end
  def wont_be_close_to(*args); end
  def wont_be_empty(*args); end
  def wont_be_instance_of(*args); end
  def wont_be_kind_of(*args); end
  def wont_be_nil(*args); end
  def wont_be_same_as(*args); end
  def wont_be_within_delta(*args); end
  def wont_be_within_epsilon(*args); end
  def wont_equal(*args); end
  def wont_include(*args); end
  def wont_match(*args); end
  def wont_respond_to(*args); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class Minitest::ExtensibleBacktraceFilter
  def initialize; end

  def add_filter(regex); end
  def filter(backtrace); end
  def filters?(str); end

  class << self
    def default_filter; end
  end
end

module Minitest::RelativePosition
  private

  def pad(str, size = T.unsafe(nil)); end
  def pad_mark(str); end
  def pad_test(str); end
  def print_with_info_padding(line); end
end

Minitest::RelativePosition::INFO_PADDING = T.let(T.unsafe(nil), Integer)
Minitest::RelativePosition::MARK_SIZE = T.let(T.unsafe(nil), Integer)
Minitest::RelativePosition::TEST_PADDING = T.let(T.unsafe(nil), Integer)
Minitest::RelativePosition::TEST_SIZE = T.let(T.unsafe(nil), Integer)

module Minitest::Reporters
  class << self
    def choose_reporters(console_reporters, env); end
    def clock_time; end
    def minitest_version; end
    def reporters; end
    def reporters=(_arg0); end
    def use!(console_reporters = T.unsafe(nil), env = T.unsafe(nil), backtrace_filter = T.unsafe(nil)); end
    def use_around_test_hooks!; end
    def use_old_activesupport_fix!; end
    def use_runner!(console_reporters, env); end
  end
end

module Minitest::Reporters::ANSI; end

module Minitest::Reporters::ANSI::Code
  include ::ANSI::Constants
  include ::ANSI::Code
  extend ::ANSI::Constants
  extend ::ANSI::Code

  class << self
    def color?; end
  end
end

class Minitest::Reporters::BaseReporter < ::Minitest::StatisticsReporter
  def initialize(options = T.unsafe(nil)); end

  def add_defaults(defaults); end
  def after_test(_test); end
  def before_test(test); end
  def record(test); end
  def report; end
  def tests; end
  def tests=(_arg0); end

  protected

  def after_suite(test); end
  def before_suite(test); end
  def filter_backtrace(backtrace); end
  def print(*args); end
  def print_colored_status(test); end
  def print_info(e, name = T.unsafe(nil)); end
  def puts(*args); end
  def result(test); end
  def test_class(result); end
  def total_count; end
  def total_time; end
end

class Minitest::Reporters::DefaultReporter < ::Minitest::Reporters::BaseReporter
  include ::ANSI::Constants
  include ::ANSI::Code
  include ::Minitest::Reporters::ANSI::Code
  include ::Minitest::RelativePosition

  def initialize(options = T.unsafe(nil)); end

  def after_suite(suite); end
  def before_suite(suite); end
  def before_test(test); end
  def on_record(test); end
  def on_report; end
  def on_start; end
  def print_failure(test); end
  def record(test); end
  def record_failure(record); end
  def record_pass(record); end
  def record_skip(record); end
  def report; end
  def start; end
  def to_s; end

  private

  def color?; end
  def colored_for(result, string); end
  def get_source_location(result); end
  def green(string); end
  def location(exception); end
  def message_for(test); end
  def red(string); end
  def relative_path(path); end
  def result_line; end
  def suite_duration(suite); end
  def suite_result; end
  def yellow(string); end
end

class Minitest::Reporters::HtmlReporter < ::Minitest::Reporters::BaseReporter
  def initialize(args = T.unsafe(nil)); end

  def friendly_name(test); end
  def passes; end
  def percent_errors_failures; end
  def percent_passes; end
  def percent_skipps; end
  def report; end
  def start; end
  def title; end

  private

  def compare_suites(suite_a, suite_b); end
  def compare_suites_by_name(suite_a, suite_b); end
  def compare_tests(test_a, test_b); end
  def compare_tests_by_name(test_a, test_b); end
  def html_file; end
  def location(exception); end
  def message_for(test); end
  def summarize_suite(suite, tests); end
  def test_fail_or_error?(test); end
  def total_time_to_hms; end
end

class Minitest::Reporters::JUnitReporter < ::Minitest::Reporters::BaseReporter
  def initialize(reports_dir = T.unsafe(nil), empty = T.unsafe(nil), options = T.unsafe(nil)); end

  def get_relative_path(result); end
  def report; end
  def reports_path; end

  private

  def analyze_suite(tests); end
  def filename_for(suite); end
  def get_source_location(result); end
  def location(exception); end
  def message_for(test); end
  def parse_xml_for(xml, suite, tests); end
  def xml_message_for(test); end
end

Minitest::Reporters::JUnitReporter::DEFAULT_REPORTS_DIR = T.let(T.unsafe(nil), String)

class Minitest::Reporters::MeanTimeReporter < ::Minitest::Reporters::DefaultReporter
  def initialize(options = T.unsafe(nil)); end

  def after_suite(suite); end
  def on_record(test); end
  def on_report; end
  def on_start; end
  def report; end
  def reset_statistics!; end

  protected

  def all_suite_times; end
  def all_suite_times=(_arg0); end

  private

  def asc?; end
  def avg_label; end
  def column_sorted_body; end
  def create_new_report!; end
  def create_or_update_previous_runs!; end
  def current_run; end
  def defaults; end
  def des_label; end
  def desc?; end
  def max_label; end
  def min_label; end
  def options; end
  def order; end
  def order_sorted_body; end
  def previous_run; end
  def previous_runs_filename; end
  def previously_ran?; end
  def rate(run, min, max); end
  def report_body; end
  def report_filename; end
  def report_title; end
  def run_label(rating); end
  def samples; end
  def show_count; end
  def sort_column; end
  def write_to_screen!; end

  class << self
    def reset_statistics!; end
  end
end

class Minitest::Reporters::MeanTimeReporter::InvalidOrder < ::StandardError; end
class Minitest::Reporters::MeanTimeReporter::InvalidSortColumn < ::StandardError; end

class Minitest::Reporters::ProgressReporter < ::Minitest::Reporters::BaseReporter
  include ::Minitest::RelativePosition
  include ::ANSI::Constants
  include ::ANSI::Code
  include ::Minitest::Reporters::ANSI::Code

  def initialize(options = T.unsafe(nil)); end

  def before_test(test); end
  def record(test); end
  def report; end
  def start; end

  private

  def color; end
  def color=(color); end
  def print_test_with_time(test); end
  def show; end
end

Minitest::Reporters::ProgressReporter::PROGRESS_MARK = T.let(T.unsafe(nil), String)

class Minitest::Reporters::RubyMateReporter < ::Minitest::Reporters::BaseReporter
  include ::Minitest::RelativePosition

  def record(test); end
  def report; end
  def start; end

  private

  def print_test_with_time(test); end
end

Minitest::Reporters::RubyMateReporter::INFO_PADDING = T.let(T.unsafe(nil), Integer)

class Minitest::Reporters::RubyMineReporter < ::Minitest::Reporters::DefaultReporter
  def initialize(options = T.unsafe(nil)); end
end

class Minitest::Reporters::SpecReporter < ::Minitest::Reporters::BaseReporter
  include ::ANSI::Constants
  include ::ANSI::Code
  include ::Minitest::Reporters::ANSI::Code
  include ::Minitest::RelativePosition

  def record(test); end
  def report; end
  def start; end

  protected

  def after_suite(_suite); end
  def before_suite(suite); end
  def record_print_failures_if_any(test); end
  def record_print_status(test); end
end

class Minitest::Reporters::Suite
  def initialize(name); end

  def ==(other); end
  def eql?(other); end
  def hash; end
  def name; end
  def to_s; end
end

Minitest::Reporters::VERSION = T.let(T.unsafe(nil), String)
Minitest::VERSION = T.let(T.unsafe(nil), String)
