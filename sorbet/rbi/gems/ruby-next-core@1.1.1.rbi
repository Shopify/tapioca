# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby-next-core` gem.
# Please instead update this file by running `bin/tapioca gem ruby-next-core`.


# source://ruby-next-core//lib/ruby-next/language/unparser.rb#10
Parser::Lexer::ESCAPES = T.let(T.unsafe(nil), Hash)

# Add binding argument to all self-less eval's
#
# source://ruby-next-core//lib/ruby-next/version.rb#3
module RubyNext
  class << self
    # source://ruby-next-core//lib/ruby-next/config.rb#35
    def current_ruby_version; end

    # Returns the value of attribute debug_enabled.
    #
    # source://ruby-next-core//lib/ruby-next/logging.rb#8
    def debug_enabled; end

    # source://ruby-next-core//lib/ruby-next/logging.rb#24
    def debug_enabled=(val); end

    # source://ruby-next-core//lib/ruby-next/logging.rb#16
    def debug_source(source, filepath = T.unsafe(nil)); end

    # Returns true if we want to use edge syntax
    #
    # @return [Boolean]
    #
    # source://ruby-next-core//lib/ruby-next/config.rb#41
    def edge_syntax?; end

    # Load transpile settings from the RC file (nextify command flags)
    #
    # source://ruby-next-core//lib/ruby-next/config.rb#67
    def load_from_rc(path = T.unsafe(nil)); end

    # source://ruby-next-core//lib/ruby-next/config.rb#49
    def next_ruby_version(version = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://ruby-next-core//lib/ruby-next/config.rb#45
    def proposed_syntax?; end

    # Returns the value of attribute silence_warnings.
    #
    # source://ruby-next-core//lib/ruby-next/logging.rb#7
    def silence_warnings; end

    # Sets the attribute silence_warnings
    #
    # @param value the value to set the attribute silence_warnings to.
    #
    # source://ruby-next-core//lib/ruby-next/logging.rb#7
    def silence_warnings=(_arg0); end

    # source://ruby-next-core//lib/ruby-next/logging.rb#10
    def warn(msg); end

    private

    # Returns the value of attribute debug_filter.
    #
    # source://ruby-next-core//lib/ruby-next/logging.rb#38
    def debug_filter; end
  end
end

# source://ruby-next-core//lib/ruby-next/core.rb#9
module RubyNext::Core
  class << self
    # @return [Boolean]
    #
    # source://ruby-next-core//lib/ruby-next/core.rb#122
    def backports?; end

    # @return [Boolean]
    #
    # source://ruby-next-core//lib/ruby-next/core.rb#118
    def core_ext?; end

    # source://ruby-next-core//lib/ruby-next/core/refinement/import.rb#7
    def import_methods(*others, bind); end

    # Inject `using RubyNext` at the top of the source code
    #
    # source://ruby-next-core//lib/ruby-next/core.rb#131
    def inject!(contents); end

    # source://ruby-next-core//lib/ruby-next/core.rb#126
    def patch(*_arg0, **_arg1, &_arg2); end

    # source://ruby-next-core//lib/ruby-next/core.rb#140
    def patches; end

    # @return [Boolean]
    #
    # source://ruby-next-core//lib/ruby-next/core.rb#114
    def refine?; end

    # Returns the value of attribute strategy.
    #
    # source://ruby-next-core//lib/ruby-next/core.rb#107
    def strategy; end

    # @raise [ArgumentError]
    #
    # source://ruby-next-core//lib/ruby-next/core.rb#109
    def strategy=(val); end
  end
end

# Patch contains the extension implementation
# and meta information (e.g., Ruby version).
#
# source://ruby-next-core//lib/ruby-next/core.rb#12
class RubyNext::Core::Patch
  # Create a new patch for module/class (mod)
  # with the specified uniq name
  #
  # `core_ext` defines the strategy for core extensions:
  #    - :patch — extend class directly
  #    - :prepend — extend class by prepending a module (e.g., when needs `super`)
  #
  # @return [Patch] a new instance of Patch
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#21
  def initialize(mod = T.unsafe(nil), method:, version:, name: T.unsafe(nil), supported: T.unsafe(nil), native: T.unsafe(nil), location: T.unsafe(nil), refineable: T.unsafe(nil), core_ext: T.unsafe(nil), singleton: T.unsafe(nil)); end

  # Returns the value of attribute body.
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#13
  def body; end

  # Returns the value of attribute core_ext.
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#13
  def core_ext; end

  # @return [Boolean]
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#43
  def core_ext?; end

  # Returns the value of attribute location.
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#13
  def location; end

  # Returns the value of attribute method_name.
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#13
  def method_name; end

  # Returns the value of attribute mod.
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#13
  def mod; end

  # Returns the value of attribute name.
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#13
  def name; end

  # Returns the value of attribute native.
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#13
  def native; end

  # Returns the value of attribute native.
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#13
  def native?; end

  # @return [Boolean]
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#39
  def prepend?; end

  # Returns the value of attribute refineables.
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#13
  def refineables; end

  # Returns the value of attribute singleton.
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#13
  def singleton; end

  # Returns the value of attribute singleton.
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#13
  def singleton?; end

  # Returns the value of attribute supported.
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#13
  def supported; end

  # Returns the value of attribute supported.
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#13
  def supported?; end

  # source://ruby-next-core//lib/ruby-next/core.rb#51
  def to_module; end

  # Returns the value of attribute version.
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#13
  def version; end

  private

  # source://ruby-next-core//lib/ruby-next/core.rb#68
  def build_location(trace_locations); end

  # source://ruby-next-core//lib/ruby-next/core.rb#61
  def build_module_name; end

  # @return [Boolean]
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#80
  def native_location?(location); end
end

# Registry for patches
#
# source://ruby-next-core//lib/ruby-next/core.rb#86
class RubyNext::Core::Patches
  # @return [Patches] a new instance of Patches
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#89
  def initialize; end

  # Register new patch
  #
  # @raise [ArgumentError]
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#96
  def <<(patch); end

  # Returns the value of attribute extensions.
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#87
  def extensions; end

  # Returns the value of attribute refined.
  #
  # source://ruby-next-core//lib/ruby-next/core.rb#87
  def refined; end
end

# Defines last minor version for every major version
#
# source://ruby-next-core//lib/ruby-next/config.rb#11
RubyNext::LAST_MINOR_VERSIONS = T.let(T.unsafe(nil), Hash)

# source://ruby-next-core//lib/ruby-next/config.rb#16
RubyNext::LATEST_VERSION = T.let(T.unsafe(nil), Array)

# Language module contains tools to transpile newer Ruby syntax
# into an older one.
#
# It works the following way:
#   - Takes a Ruby source code as input
#   - Generates the AST using the edge parser (via the `parser` gem)
#   - Pass this AST through the list of processors (one feature = one processor)
#   - Each processor may modify the AST
#   - Generates a transpiled source code from the transformed AST (via the `unparser` gem)
#
# source://ruby-next-core//lib/ruby-next/language.rb#23
module RubyNext::Language
  class << self
    # @return [Boolean]
    #
    # source://ruby-next-core//lib/ruby-next/language.rb#94
    def ast?; end

    # Rewriters required for the current version
    #
    # source://ruby-next-core//lib/ruby-next/language.rb#150
    def current_rewriters; end

    # Returns the value of attribute exclude_patterns.
    #
    # source://ruby-next-core//lib/ruby-next/language.rb#70
    def exclude_patterns; end

    # Returns the value of attribute include_patterns.
    #
    # source://ruby-next-core//lib/ruby-next/language.rb#69
    def include_patterns; end

    # Returns the value of attribute mode.
    #
    # source://ruby-next-core//lib/ruby-next/language.rb#83
    def mode; end

    # @raise [ArgumentError]
    #
    # source://ruby-next-core//lib/ruby-next/language.rb#85
    def mode=(val); end

    # source://ruby-next-core//lib/ruby-next/language/parser.rb#48
    def parse(source, file = T.unsafe(nil)); end

    # source://ruby-next-core//lib/ruby-next/language/parser.rb#58
    def parse_with_comments(source, file = T.unsafe(nil)); end

    # source://ruby-next-core//lib/ruby-next/language/parser.rb#40
    def parser; end

    # Returns the value of attribute parser_class.
    #
    # source://ruby-next-core//lib/ruby-next/language/parser.rb#38
    def parser_class; end

    # Sets the attribute parser_class
    #
    # @param value the value to set the attribute parser_class to.
    #
    # source://ruby-next-core//lib/ruby-next/language/parser.rb#38
    def parser_class=(_arg0); end

    # Returns the value of attribute parser_syntax_errors.
    #
    # source://ruby-next-core//lib/ruby-next/language/parser.rb#38
    def parser_syntax_errors; end

    # Sets the attribute parser_syntax_errors
    #
    # @param value the value to set the attribute parser_syntax_errors to.
    #
    # source://ruby-next-core//lib/ruby-next/language/parser.rb#38
    def parser_syntax_errors=(_arg0); end

    # @return [Boolean]
    #
    # source://ruby-next-core//lib/ruby-next/language.rb#90
    def rewrite?; end

    # Returns the value of attribute rewriters.
    #
    # source://ruby-next-core//lib/ruby-next/language.rb#77
    def rewriters; end

    # Sets the attribute rewriters
    #
    # @param value the value to set the attribute rewriters to.
    #
    # source://ruby-next-core//lib/ruby-next/language.rb#77
    def rewriters=(_arg0); end

    # source://ruby-next-core//lib/ruby-next/language.rb#98
    def runtime!; end

    # @return [Boolean]
    #
    # source://ruby-next-core//lib/ruby-next/language.rb#104
    def runtime?; end

    # This method guarantees that rewriters will be returned in order they defined in Language module
    #
    # source://ruby-next-core//lib/ruby-next/language.rb#155
    def select_rewriters(*names); end

    # Returns the value of attribute strategy.
    #
    # source://ruby-next-core//lib/ruby-next/language.rb#79
    def strategy; end

    # Sets the attribute strategy
    #
    # @param value the value to set the attribute strategy to.
    #
    # source://ruby-next-core//lib/ruby-next/language.rb#79
    def strategy=(_arg0); end

    # @return [Boolean]
    #
    # source://ruby-next-core//lib/ruby-next/language.rb#136
    def target_dir?(dirname); end

    # source://ruby-next-core//lib/ruby-next/language.rb#108
    def transform(source, rewriters: T.unsafe(nil), using: T.unsafe(nil), path: T.unsafe(nil), context: T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://ruby-next-core//lib/ruby-next/language.rb#144
    def transformable?(path); end

    # source://ruby-next-core//lib/ruby-next/language.rb#72
    def watch_dirs; end

    private

    # Sets the attribute exclude_patterns
    #
    # @param value the value to set the attribute exclude_patterns to.
    #
    # source://ruby-next-core//lib/ruby-next/language.rb#202
    def exclude_patterns=(_arg0); end

    # Sets the attribute include_patterns
    #
    # @param value the value to set the attribute include_patterns to.
    #
    # source://ruby-next-core//lib/ruby-next/language.rb#202
    def include_patterns=(_arg0); end

    # source://ruby-next-core//lib/ruby-next/language.rb#166
    def regenerate(source, rewriters:, using:, context:); end

    # source://ruby-next-core//lib/ruby-next/language.rb#178
    def rewrite(source, rewriters:, using:, context:); end

    # source://ruby-next-core//lib/ruby-next/language.rb#191
    def text_rewrite(source, rewriters:, using:, context:); end

    # Sets the attribute watch_dirs
    #
    # @param value the value to set the attribute watch_dirs to.
    #
    # source://ruby-next-core//lib/ruby-next/language.rb#201
    def watch_dirs=(_arg0); end
  end
end

# source://ruby-next-core//lib/ruby-next/language/parser.rb#24
class RubyNext::Language::Builder < ::Parser::Builders::Default
  # source://ruby-next-core//lib/ruby-next/language/parser.rb#31
  def check_reserved_for_numparam(name, loc); end
end

# source://ruby-next-core//lib/ruby-next/language/parser.rb#12
module RubyNext::Language::BuilderExt
  # source://ruby-next-core//lib/ruby-next/language/parser.rb#13
  def match_pattern(lhs, match_t, rhs); end

  # source://ruby-next-core//lib/ruby-next/language/parser.rb#18
  def match_pattern_p(lhs, match_t, rhs); end
end

# source://ruby-next-core//lib/ruby-next/language/eval.rb#33
module RubyNext::Language::ClassEval; end

# Refinements for `eval`-like methods.
# Transpiling eval is only possible if we do not use local from the binding,
# because we cannot access the binding of caller (without non-production ready hacks).
#
# This module is meant mainly for testing purposes.
#
# source://ruby-next-core//lib/ruby-next/language/eval.rb#61
module RubyNext::Language::Eval
  include ::RubyNext::Language::InstanceEval
  include ::RubyNext::Language::ClassEval
  include ::RubyNext::Language::KernelEval
end

# source://ruby-next-core//lib/ruby-next/language/eval.rb#20
module RubyNext::Language::InstanceEval; end

# source://ruby-next-core//lib/ruby-next/language/eval.rb#5
module RubyNext::Language::KernelEval; end

# source://ruby-next-core//lib/ruby-next/language/paco_parsers/base.rb#5
module RubyNext::Language::PacoParsers; end

# source://ruby-next-core//lib/ruby-next/language/paco_parsers/base.rb#6
class RubyNext::Language::PacoParsers::Base
  include ::Paco
  include ::Paco::Combinators::Char
  include ::Paco::Combinators

  # source://ruby-next-core//lib/ruby-next/language/paco_parsers/base.rb#9
  def parse(io); end

  private

  # source://ruby-next-core//lib/ruby-next/language/paco_parsers/base.rb#15
  def anything_between(left, right); end

  # source://ruby-next-core//lib/ruby-next/language/paco_parsers/base.rb#29
  def balanced(l, r, inner); end

  # source://ruby-next-core//lib/ruby-next/language/paco_parsers/base.rb#23
  def starting_string(str); end
end

# source://ruby-next-core//lib/ruby-next/language/paco_parsers/comments.rb#6
class RubyNext::Language::PacoParsers::Comments < ::RubyNext::Language::PacoParsers::Base
  # Matches a Ruby block comment (from `=begin` till `=end`)
  #
  # source://ruby-next-core//lib/ruby-next/language/paco_parsers/comments.rb#20
  def block_comment; end

  # source://ruby-next-core//lib/ruby-next/language/paco_parsers/comments.rb#7
  def default; end

  # Matches a Ruby line comment (from `#` till the end of the line)
  #
  # source://ruby-next-core//lib/ruby-next/language/paco_parsers/comments.rb#15
  def line_comment; end
end

# source://ruby-next-core//lib/ruby-next/language/paco_parsers/string_literals.rb#6
class RubyNext::Language::PacoParsers::StringLiterals < ::RubyNext::Language::PacoParsers::Base
  # source://ruby-next-core//lib/ruby-next/language/paco_parsers/string_literals.rb#15
  def all_strings; end

  # source://ruby-next-core//lib/ruby-next/language/paco_parsers/string_literals.rb#9
  def default; end

  # source://ruby-next-core//lib/ruby-next/language/paco_parsers/string_literals.rb#59
  def double_quoted; end

  # source://ruby-next-core//lib/ruby-next/language/paco_parsers/string_literals.rb#63
  def escapable_string(left, right = T.unsafe(nil), interpolate: T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/paco_parsers/string_literals.rb#55
  def external_cmd_exec; end

  # source://ruby-next-core//lib/ruby-next/language/paco_parsers/string_literals.rb#27
  def literal_start; end

  # source://ruby-next-core//lib/ruby-next/language/paco_parsers/string_literals.rb#31
  def quoted; end

  # source://ruby-next-core//lib/ruby-next/language/paco_parsers/string_literals.rb#45
  def quoted_expanded; end

  # source://ruby-next-core//lib/ruby-next/language/paco_parsers/string_literals.rb#41
  def single_quoted; end

  private

  # source://ruby-next-core//lib/ruby-next/language/paco_parsers/string_literals.rb#86
  def reduce_tokens(tokens); end
end

# source://ruby-next-core//lib/ruby-next/language/paco_parsers/string_literals.rb#7
RubyNext::Language::PacoParsers::StringLiterals::PAIRS = T.let(T.unsafe(nil), Hash)

# source://ruby-next-core//lib/ruby-next/language/parser.rb#76
class RubyNext::Language::PrismParser < ::Prism::Translation::Parser
  # source://ruby-next-core//lib/ruby-next/language/parser.rb#79
  def valid_error?(error); end
end

# source://ruby-next-core//lib/ruby-next/language.rb#29
class RubyNext::Language::RewriterNotFoundError < ::StandardError; end

# source://ruby-next-core//lib/ruby-next/language/rewriters/abstract.rb#5
module RubyNext::Language::Rewriters; end

# source://ruby-next-core//lib/ruby-next/language/rewriters/abstract.rb#6
class RubyNext::Language::Rewriters::Abstract < ::Parser::TreeRewriter
  # @return [Abstract] a new instance of Abstract
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/abstract.rb#44
  def initialize(context); end

  private

  # Returns the value of attribute context.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/abstract.rb#51
  def context; end

  class << self
    # @return [Boolean]
    #
    # source://ruby-next-core//lib/ruby-next/language/rewriters/abstract.rb#35
    def ast?; end

    # @return [Boolean]
    #
    # source://ruby-next-core//lib/ruby-next/language/rewriters/abstract.rb#31
    def text?; end

    # source://ruby-next-core//lib/ruby-next/language/rewriters/abstract.rb#39
    def transform(source, **opts); end

    # Returns true if the syntax is not supported
    # by the current Ruby (performs syntax check, not version check)
    #
    # @return [Boolean]
    #
    # source://ruby-next-core//lib/ruby-next/language/rewriters/abstract.rb#14
    def unsupported_syntax?; end

    # Returns true if the syntax is supported
    # by the specified version
    #
    # @return [Boolean]
    #
    # source://ruby-next-core//lib/ruby-next/language/rewriters/abstract.rb#27
    def unsupported_version?(version); end
  end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/abstract.rb#9
RubyNext::Language::Rewriters::Abstract::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/abstract.rb#7
RubyNext::Language::Rewriters::Abstract::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/abstract.rb#8
RubyNext::Language::Rewriters::Abstract::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/anonymous_block.rb#6
class RubyNext::Language::Rewriters::AnonymousBlock < ::RubyNext::Language::Rewriters::Base
  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/anonymous_block.rb#13
  def on_args(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/anonymous_block.rb#32
  def on_send(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/anonymous_block.rb#39
  def on_super(node); end

  private

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/anonymous_block.rb#48
  def extract_block_pass(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/anonymous_block.rb#52
  def process_block(node, block); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/anonymous_block.rb#11
RubyNext::Language::Rewriters::AnonymousBlock::BLOCK = T.let(T.unsafe(nil), Symbol)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/anonymous_block.rb#9
RubyNext::Language::Rewriters::AnonymousBlock::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/anonymous_block.rb#7
RubyNext::Language::Rewriters::AnonymousBlock::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/anonymous_block.rb#8
RubyNext::Language::Rewriters::AnonymousBlock::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.2/anonymous_restargs.rb#6
class RubyNext::Language::Rewriters::AnonymousRestArgs < ::RubyNext::Language::Rewriters::Base
  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.2/anonymous_restargs.rb#14
  def on_args(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.2/anonymous_restargs.rb#38
  def on_send(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.2/anonymous_restargs.rb#44
  def on_super(node); end

  private

  # @return [Boolean]
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.2/anonymous_restargs.rb#52
  def forwarded_args?(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.2/anonymous_restargs.rb#70
  def process_send_args(node); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.2/anonymous_restargs.rb#12
RubyNext::Language::Rewriters::AnonymousRestArgs::KWREST = T.let(T.unsafe(nil), Symbol)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.2/anonymous_restargs.rb#9
RubyNext::Language::Rewriters::AnonymousRestArgs::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.2/anonymous_restargs.rb#7
RubyNext::Language::Rewriters::AnonymousRestArgs::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.2/anonymous_restargs.rb#11
RubyNext::Language::Rewriters::AnonymousRestArgs::REST = T.let(T.unsafe(nil), Symbol)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.2/anonymous_restargs.rb#8
RubyNext::Language::Rewriters::AnonymousRestArgs::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/args_forward.rb#6
class RubyNext::Language::Rewriters::ArgsForward < ::RubyNext::Language::Rewriters::Base
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/args_forward.rb#14
  def on_args(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/args_forward.rb#48
  def on_def(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/args_forward.rb#62
  def on_defs(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/args_forward.rb#34
  def on_send(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/args_forward.rb#41
  def on_super(node); end

  private

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/args_forward.rb#107
  def extract_fargs(node); end

  # @return [Boolean]
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/args_forward.rb#101
  def forward_arg?(args); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/args_forward.rb#125
  def forwarded_args; end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/args_forward.rb#111
  def process_fargs(node, fargs); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/args_forward.rb#91
  def ruby2_keywords_node(receiver, name); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/args_forward.rb#12
RubyNext::Language::Rewriters::ArgsForward::BLOCK = T.let(T.unsafe(nil), Symbol)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/args_forward.rb#9
RubyNext::Language::Rewriters::ArgsForward::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/args_forward.rb#7
RubyNext::Language::Rewriters::ArgsForward::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/args_forward.rb#11
RubyNext::Language::Rewriters::ArgsForward::REST = T.let(T.unsafe(nil), Symbol)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/args_forward.rb#8
RubyNext::Language::Rewriters::ArgsForward::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/args_forward_leading.rb#6
class RubyNext::Language::Rewriters::ArgsForwardLeading < ::RubyNext::Language::Rewriters::ArgsForward
  # Returns the value of attribute leading_farg.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/args_forward_leading.rb#11
  def leading_farg; end

  # Returns the value of attribute leading_farg.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/args_forward_leading.rb#11
  def leading_farg?; end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/args_forward_leading.rb#26
  def on_args(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/args_forward_leading.rb#14
  def on_def(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/args_forward_leading.rb#20
  def on_defs(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/args_forward_leading.rb#32
  def on_send(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/args_forward_leading.rb#38
  def on_super(node); end

  private

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/args_forward_leading.rb#64
  def def_with_leading_farg(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/args_forward_leading.rb#56
  def method_with_leading_arg(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/args_forward_leading.rb#46
  def send_with_leading_farg(node); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/args_forward_leading.rb#9
RubyNext::Language::Rewriters::ArgsForwardLeading::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/args_forward_leading.rb#7
RubyNext::Language::Rewriters::ArgsForwardLeading::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/args_forward_leading.rb#8
RubyNext::Language::Rewriters::ArgsForwardLeading::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/base.rb#16
class RubyNext::Language::Rewriters::Base < ::RubyNext::Language::Rewriters::Abstract
  # @return [Base] a new instance of Base
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/base.rb#74
  def initialize(*args); end

  # Returns the value of attribute locals.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/base.rb#68
  def locals; end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/base.rb#79
  def s(type, *children); end

  private

  # BFS with predicate block
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/base.rb#86
  def find_child(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/base.rb#111
  def insert_after(range, ast); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/base.rb#115
  def insert_before(range, ast); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/base.rb#107
  def remove(range); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/base.rb#103
  def replace(range, ast); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/base.rb#119
  def unparse(ast); end

  class << self
    # @return [Boolean]
    #
    # source://ruby-next-core//lib/ruby-next/language/rewriters/base.rb#70
    def ast?; end
  end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/base.rb#17
class RubyNext::Language::Rewriters::Base::LocalsTracker
  # @return [LocalsTracker] a new instance of LocalsTracker
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/base.rb#32
  def initialize; end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/base.rb#41
  def [](name, suffix = T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/base.rb#52
  def fetch(name); end

  # @return [Boolean]
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/base.rb#48
  def key?(name); end

  # Returns the value of attribute stacks.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/base.rb#30
  def stacks; end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/base.rb#36
  def with(**locals); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/base.rb#8
RubyNext::Language::Rewriters::CUSTOM_PARSER_REQUIRED = T.let(T.unsafe(nil), String)

# Special rewriter for Ruby <=2.3, which doesn't support __dir__ in iseq.eval
#
# source://ruby-next-core//lib/ruby-next/language/rewriters/2.4/dir.rb#7
class RubyNext::Language::Rewriters::Dir < ::RubyNext::Language::Rewriters::Base
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.4/dir.rb#11
  def on_send(node); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.4/dir.rb#9
RubyNext::Language::Rewriters::Dir::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.4/dir.rb#8
RubyNext::Language::Rewriters::Dir::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/endless_method.rb#6
class RubyNext::Language::Rewriters::EndlessMethod < ::RubyNext::Language::Rewriters::Base
  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/endless_method.rb#11
  def on_def(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/endless_method.rb#35
  def on_defs(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/endless_method.rb#17
  def process_def(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/endless_method.rb#40
  def process_defs(node); end

  private

  # @return [Boolean]
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/endless_method.rb#60
  def endless?(node); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/endless_method.rb#9
RubyNext::Language::Rewriters::EndlessMethod::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/endless_method.rb#7
RubyNext::Language::Rewriters::EndlessMethod::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/endless_method.rb#8
RubyNext::Language::Rewriters::EndlessMethod::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/endless_method_command.rb#6
class RubyNext::Language::Rewriters::EndlessMethodCommand < ::RubyNext::Language::Rewriters::EndlessMethod
  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/endless_method_command.rb#11
  def process_def(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/endless_method_command.rb#17
  def process_defs(node); end

  private

  # @return [Boolean]
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/endless_method_command.rb#25
  def command?(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/endless_method_command.rb#36
  def parser30; end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/endless_method_command.rb#9
RubyNext::Language::Rewriters::EndlessMethodCommand::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/endless_method_command.rb#7
RubyNext::Language::Rewriters::EndlessMethodCommand::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/endless_method_command.rb#8
RubyNext::Language::Rewriters::EndlessMethodCommand::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.6/endless_range.rb#6
class RubyNext::Language::Rewriters::EndlessRange < ::RubyNext::Language::Rewriters::Base
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.6/endless_range.rb#25
  def on_erange(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.6/endless_range.rb#11
  def on_index(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.6/endless_range.rb#25
  def on_irange(node); end

  private

  # Returns the value of attribute current_index.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.6/endless_range.rb#55
  def current_index; end

  # @return [Boolean]
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.6/endless_range.rb#57
  def index_arg?(node); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.6/endless_range.rb#9
RubyNext::Language::Rewriters::EndlessRange::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.6/endless_range.rb#7
RubyNext::Language::Rewriters::EndlessRange::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.6/endless_range.rb#8
RubyNext::Language::Rewriters::EndlessRange::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# Separate pattern matching rewriter for Ruby 2.7 to
# transpile only case...in  with a find pattern
#
# source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/find_pattern.rb#10
class RubyNext::Language::Rewriters::FindPattern < ::RubyNext::Language::Rewriters::PatternMatching
  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/find_pattern.rb#15
  def on_case_match(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/find_pattern.rb#31
  def on_find_pattern(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/find_pattern.rb#23
  def on_match_pattern(node); end

  private

  # Returns the value of attribute has_find_pattern.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/find_pattern.rb#38
  def has_find_pattern; end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/find_pattern.rb#13
RubyNext::Language::Rewriters::FindPattern::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/find_pattern.rb#11
RubyNext::Language::Rewriters::FindPattern::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/find_pattern.rb#12
RubyNext::Language::Rewriters::FindPattern::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# Separate pattern matching rewriter for Ruby 2.7 to
# transpile only `in` patterns
#
# source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/in_pattern.rb#10
class RubyNext::Language::Rewriters::InPattern < ::RubyNext::Language::Rewriters::PatternMatching
  # Make case-match no-op
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/in_pattern.rb#16
  def on_case_match(node); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/in_pattern.rb#13
RubyNext::Language::Rewriters::InPattern::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/in_pattern.rb#11
RubyNext::Language::Rewriters::InPattern::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.0/in_pattern.rb#12
RubyNext::Language::Rewriters::InPattern::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.4/it_param.rb#6
class RubyNext::Language::Rewriters::ItParam < ::RubyNext::Language::Rewriters::Base
  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.4/it_param.rb#13
  def on_block(node); end

  private

  # It's important to check if the current block refers to `it` variable somewhere
  # (and not within a nested block), so we don't declare numbered params
  #
  # @return [Boolean]
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.4/it_param.rb#39
  def block_has_it?(node); end

  # @return [Boolean]
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.4/it_param.rb#52
  def it?(node); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.4/it_param.rb#11
RubyNext::Language::Rewriters::ItParam::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.4/it_param.rb#9
RubyNext::Language::Rewriters::ItParam::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.4/it_param.rb#10
RubyNext::Language::Rewriters::ItParam::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/numbered_params.rb#6
class RubyNext::Language::Rewriters::NumberedParams < ::RubyNext::Language::Rewriters::Base
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/numbered_params.rb#13
  def on_numblock(node); end

  private

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/numbered_params.rb#40
  def proc_args(n); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/numbered_params.rb#36
  def proc_args_str(n); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/numbered_params.rb#11
RubyNext::Language::Rewriters::NumberedParams::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/numbered_params.rb#9
RubyNext::Language::Rewriters::NumberedParams::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/numbered_params.rb#10
RubyNext::Language::Rewriters::NumberedParams::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.1/numeric_literals.rb#6
class RubyNext::Language::Rewriters::NumericLiterals < ::RubyNext::Language::Rewriters::Base
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.1/numeric_literals.rb#27
  def on_complex(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.1/numeric_literals.rb#13
  def on_rational(node); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.1/numeric_literals.rb#11
RubyNext::Language::Rewriters::NumericLiterals::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.1/numeric_literals.rb#9
RubyNext::Language::Rewriters::NumericLiterals::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.1/numeric_literals.rb#10
RubyNext::Language::Rewriters::NumericLiterals::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# Allow omitting parentheses around patterns in `=>` and `in`
#
# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/oneline_pattern_parensless.rb#9
class RubyNext::Language::Rewriters::OnelinePatternParensless < ::RubyNext::Language::Rewriters::Base
  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/oneline_pattern_parensless.rb#14
  def on_match_pattern(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/oneline_pattern_parensless.rb#14
  def on_match_pattern_p(node); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/oneline_pattern_parensless.rb#12
RubyNext::Language::Rewriters::OnelinePatternParensless::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/oneline_pattern_parensless.rb#10
RubyNext::Language::Rewriters::OnelinePatternParensless::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/oneline_pattern_parensless.rb#11
RubyNext::Language::Rewriters::OnelinePatternParensless::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#228
class RubyNext::Language::Rewriters::PatternMatching < ::RubyNext::Language::Rewriters::Base
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#240
  def on_case_match(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#270
  def on_in_match(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#270
  def on_match_pattern(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#312
  def on_match_pattern_p(node); end

  private

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#705
  def arr_item_at(index, arr = T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#709
  def arr_slice(lindex, rindex, arr = T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#535
  def array_element(index, head, *tail); end

  # [*a, 1, 2, *] -> arr.find.with_index { |_, i| (a = arr.take(i)) && arr[i] == 1 && arr[i + 1] == 2 }
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#549
  def array_find(head, *nodes, tail); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#610
  def array_match_rest(index, node, *tail); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#642
  def array_pattern_array_element(node, index); end

  # =========== ARRAY PATTERN (START) ===============
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#474
  def array_pattern_clause(node, matchee = T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#845
  def array_pattern_hash_element(node, key); end

  # =========== ARRAY PATTERN (START) ===============
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#474
  def array_pattern_with_tail_clause(node, matchee = T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#631
  def array_rest_element(head, *tail, index); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#380
  def build_case_when(nodes); end

  # Value could be omitted for mass assignment
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#1082
  def build_var_assignment(var, value = T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#401
  def build_when_clause(clause); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#701
  def case_eq_array_element(node, index); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#466
  def case_eq_clause(node, right = T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#951
  def case_eq_hash_element(node, key); end

  # Raise SyntaxError if match-var is used within alternation
  # https://github.com/ruby/ruby/blob/672213ef1ca2b71312084057e27580b340438796/compile.c#L5900
  #
  # @raise [::SyntaxError]
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#1057
  def check_match_var_alternation!(name); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#666
  def const_pattern_array_element(node, index); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#419
  def const_pattern_clause(node, right = T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#863
  def const_pattern_hash_element(node, key); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#785
  def deconstruct_keys_node(keys, matchee = T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#510
  def deconstruct_node(matchee); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#1069
  def deconstructed_key(key); end

  # Returns the value of attribute deconstructed_keys.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#1053
  def deconstructed_keys; end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#650
  def find_pattern_array_element(node, index); end

  # =========== ARRAY PATTERN (START) ===============
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#474
  def find_pattern_clause(node, matchee = T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#854
  def find_pattern_hash_element(node, key); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#872
  def hash_element(head, *tail); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#969
  def hash_has_key(key, hash = T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#658
  def hash_pattern_array_element(node, index); end

  # =========== HASH PATTERN (START) ===============
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#721
  def hash_pattern_clause(node, matchee = T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#763
  def hash_pattern_destruction_keys(children); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#836
  def hash_pattern_hash_element(node, key); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#754
  def hash_pattern_keys(children); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#955
  def hash_value_at(key, hash = T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#975
  def having_hash_keys(keys, hash = T.unsafe(nil)); end

  # Unparser generates `do .. end` or `{ ... }` multiline blocks, we want to
  # have single-line blocks with `{ ... }`.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#1077
  def inline_blocks(source); end

  # Returns the value of attribute lvars.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#1053
  def lvars; end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#674
  def match_alt_array_element(node, index); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#432
  def match_alt_clause(node, matchee = T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#892
  def match_alt_hash_element(node, key); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#689
  def match_as_array_element(node, index); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#442
  def match_as_clause(node, right = T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#911
  def match_as_hash_element(node, key); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#930
  def match_nil_pattern_hash_element(node, _key = T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#936
  def match_rest_hash_element(node, _key = T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#681
  def match_var_array_element(node, index); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#449
  def match_var_clause(node, left = T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#920
  def match_var_hash_element(node, key = T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#779
  def match_var_hash_key(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#1043
  def method_missing(mid, *args, &block); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#1019
  def no_matching_pattern; end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#887
  def pair_hash_element(node, _key = T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#775
  def pair_hash_key(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#697
  def pin_array_element(node, index); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#461
  def pin_clause(node, right = T.unsafe(nil)); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#947
  def pin_hash_element(node, index); end

  # Returns the value of attribute predicates.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#1053
  def predicates; end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#1027
  def raise_error(type, msg = T.unsafe(nil)); end

  # Add respond_to? check
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#1034
  def respond_to_check(node, mid); end

  # @return [Boolean]
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#1038
  def respond_to_missing?(mid, *_arg1); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#349
  def rewrite_case_in!(node, matchee, new_node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#1001
  def with_declared_locals; end

  # =========== HASH PATTERN (END) ===============
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#989
  def with_guard(node, guard); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#237
RubyNext::Language::Rewriters::PatternMatching::ALTERNATION_MARKER = T.let(T.unsafe(nil), Symbol)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#238
RubyNext::Language::Rewriters::PatternMatching::CURRENT_HASH_KEY = T.let(T.unsafe(nil), Symbol)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#233
RubyNext::Language::Rewriters::PatternMatching::MATCHEE = T.let(T.unsafe(nil), Symbol)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#234
RubyNext::Language::Rewriters::PatternMatching::MATCHEE_ARR = T.let(T.unsafe(nil), Symbol)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#235
RubyNext::Language::Rewriters::PatternMatching::MATCHEE_HASH = T.let(T.unsafe(nil), Symbol)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#231
RubyNext::Language::Rewriters::PatternMatching::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#229
RubyNext::Language::Rewriters::PatternMatching::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#230
RubyNext::Language::Rewriters::PatternMatching::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# Separate pattern matching rewriter for Ruby 2.7 and 3.0 to
# transpile only ^(ivar|cvar|gvar)
#
# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/pin_vars_pattern.rb#10
class RubyNext::Language::Rewriters::PinVarsPattern < ::RubyNext::Language::Rewriters::PatternMatching
  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/pin_vars_pattern.rb#15
  def on_case_match(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/pin_vars_pattern.rb#23
  def on_match_pattern(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/pin_vars_pattern.rb#31
  def on_match_pattern_p(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/pin_vars_pattern.rb#39
  def on_pin(node); end

  private

  # Returns the value of attribute has_pin_vars.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/pin_vars_pattern.rb#46
  def has_pin_vars; end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/pin_vars_pattern.rb#13
RubyNext::Language::Rewriters::PinVarsPattern::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/pin_vars_pattern.rb#11
RubyNext::Language::Rewriters::PinVarsPattern::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/pin_vars_pattern.rb#12
RubyNext::Language::Rewriters::PinVarsPattern::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# We can memoize structural predicates to avoid double calculation.
#
# For example, consider the following case and the corresponding predicate chains:
#
#    case val
#    in [:ok, 200] #=> [:respond_to_deconstruct, :deconstruct_type, :arr_size_is_2]
#    in [:created, 201] #=> [:respond_to_deconstruct, :deconstruct_type, :arr_size_is_2]
#    in [401 | 403] #=> [:respond_to_deconstruct, :deconstruct_type, :arr_size_is_1]
#    end
#
# We can minimize the number of predicate calls by storing the intermediate values (prefixed with `p_`) and using them
# in the subsequent calls:
#
#    case val
#    in [:ok, 200] #=> [:respond_to_deconstruct, :deconstruct_type, :arr_size_is_2]
#    in [:created, 201] #=> [:p_deconstructed, :p_arr_size_2]
#    in [401 | 403] #=> [:p_deconstructed, :arr_size_is_1]
#    end
#
# This way we mimic a naive decision tree algorithim.
#
# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#64
module RubyNext::Language::Rewriters::Predicates; end

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#111
class RubyNext::Language::Rewriters::Predicates::Base
  # @return [Base] a new instance of Base
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#115
  def initialize; end

  # Returns the value of attribute count.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#112
  def count; end

  # Returns the value of attribute current_path.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#112
  def current_path; end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#135
  def pop; end

  # @return [Boolean]
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#151
  def pred?(name); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#143
  def predicate_clause(name, node); end

  # Returns the value of attribute predicates_by_path.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#112
  def predicates_by_path; end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#174
  def process(ast); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#131
  def push(path); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#155
  def read_pred(name); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#126
  def reset!; end

  # Returns the value of attribute store.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#112
  def store; end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#139
  def terminate!; end

  # Returns the value of attribute terminated.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#112
  def terminated; end

  # Returns the value of attribute terminated.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#112
  def terminated?; end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#162
  def write_pred(name, node); end

  private

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#180
  def s(type, *children); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#195
class RubyNext::Language::Rewriters::Predicates::CaseIn < ::RubyNext::Language::Rewriters::Predicates::Base
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#208
  def array_deconstructed(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#204
  def array_size(node, size); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#196
  def const(node, const); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#212
  def hash_deconstructed(node, keys); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#220
  def hash_keys(node, keys); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#200
  def respond_to_deconstruct(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#216
  def respond_to_deconstruct_keys(node); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#186
class RubyNext::Language::Rewriters::Predicates::Noop < ::RubyNext::Language::Rewriters::Predicates::Base
  # Return node itself, no memoization
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#188
  def method_missing(mid, node, *_arg2); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#65
class RubyNext::Language::Rewriters::Predicates::Processor < ::Parser::TreeRewriter
  # @return [Processor] a new instance of Processor
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#68
  def initialize(predicates); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#82
  def on_and(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#73
  def on_lvasgn(node); end

  # Returns the value of attribute predicates.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#66
  def predicates; end

  private

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.7/pattern_matching.rb#102
  def truthy(node); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/refinement_import_methods.rb#7
class RubyNext::Language::Rewriters::RefinementImportMethods < ::RubyNext::Language::Rewriters::Base
  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/refinement_import_methods.rb#12
  def on_block(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/refinement_import_methods.rb#34
  def on_send(node); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/refinement_import_methods.rb#10
RubyNext::Language::Rewriters::RefinementImportMethods::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/refinement_import_methods.rb#8
RubyNext::Language::Rewriters::RefinementImportMethods::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/refinement_import_methods.rb#9
RubyNext::Language::Rewriters::RefinementImportMethods::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.1/required_kwargs.rb#6
class RubyNext::Language::Rewriters::RequiredKwargs < ::RubyNext::Language::Rewriters::Base
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.1/required_kwargs.rb#13
  def on_kwarg(node); end

  private

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.1/required_kwargs.rb#30
  def raise_missing_keyword(name); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.1/required_kwargs.rb#11
RubyNext::Language::Rewriters::RequiredKwargs::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.1/required_kwargs.rb#9
RubyNext::Language::Rewriters::RequiredKwargs::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.1/required_kwargs.rb#10
RubyNext::Language::Rewriters::RequiredKwargs::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.5/rescue_within_block.rb#6
class RubyNext::Language::Rewriters::RescueWithinBlock < ::RubyNext::Language::Rewriters::Base
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.5/rescue_within_block.rb#16
  def on_block(block_node); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.5/rescue_within_block.rb#14
RubyNext::Language::Rewriters::RescueWithinBlock::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.5/rescue_within_block.rb#7
RubyNext::Language::Rewriters::RescueWithinBlock::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.5/rescue_within_block.rb#8
RubyNext::Language::Rewriters::RescueWithinBlock::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.3/safe_navigation.rb#6
class RubyNext::Language::Rewriters::SafeNavigation < ::RubyNext::Language::Rewriters::Base
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.3/safe_navigation.rb#34
  def on_block(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.3/safe_navigation.rb#13
  def on_csend(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.3/safe_navigation.rb#42
  def on_numblock(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.3/safe_navigation.rb#50
  def on_op_asgn(node); end

  private

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.3/safe_navigation.rb#60
  def decsendize(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.3/safe_navigation.rb#98
  def safe_lvar; end

  # Transform: x&.y -> ((_tmp_ = x) || true) && (!_tmp_.nil? || nil) && _tmp_.y
  # This allows us to handle `false&.to_s == "false"`
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.3/safe_navigation.rb#83
  def safe_navigation(node); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.3/safe_navigation.rb#9
RubyNext::Language::Rewriters::SafeNavigation::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.3/safe_navigation.rb#7
RubyNext::Language::Rewriters::SafeNavigation::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.3/safe_navigation.rb#11
RubyNext::Language::Rewriters::SafeNavigation::SAFE_LVAR = T.let(T.unsafe(nil), Symbol)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.3/safe_navigation.rb#8
RubyNext::Language::Rewriters::SafeNavigation::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/shorthand_hash.rb#6
class RubyNext::Language::Rewriters::ShorthandHash < ::RubyNext::Language::Rewriters::Base
  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/shorthand_hash.rb#11
  def on_pair(node); end

  private

  # source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/shorthand_hash.rb#37
  def key_from_ident(node); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/shorthand_hash.rb#9
RubyNext::Language::Rewriters::ShorthandHash::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/shorthand_hash.rb#7
RubyNext::Language::Rewriters::ShorthandHash::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/3.1/shorthand_hash.rb#8
RubyNext::Language::Rewriters::ShorthandHash::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.3/squiggly_heredoc.rb#6
class RubyNext::Language::Rewriters::SquigglyHeredoc < ::RubyNext::Language::Rewriters::Base
  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.3/squiggly_heredoc.rb#11
  def on_dstr(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.3/squiggly_heredoc.rb#11
  def on_str(node); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/2.3/squiggly_heredoc.rb#11
  def on_xstr(node); end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.3/squiggly_heredoc.rb#9
RubyNext::Language::Rewriters::SquigglyHeredoc::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.3/squiggly_heredoc.rb#7
RubyNext::Language::Rewriters::SquigglyHeredoc::NAME = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/2.3/squiggly_heredoc.rb#8
RubyNext::Language::Rewriters::SquigglyHeredoc::SYNTAX_PROBE = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#8
class RubyNext::Language::Rewriters::Text < ::RubyNext::Language::Rewriters::Abstract
  # Rewrite source code by ignoring string literals and comments
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#110
  def rewrite(source); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#118
  def safe_rewrite(source); end

  private

  # source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#124
  def parse(source); end

  class << self
    # source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#98
    def paco_parser; end

    # source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#94
    def parser(&block); end

    # @return [Boolean]
    #
    # source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#104
    def text?; end
  end
end

# source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#11
class RubyNext::Language::Rewriters::Text::Normalizer < ::RubyNext::Language::PacoParsers::Base
  # @return [Normalizer] a new instance of Normalizer
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#14
  def initialize; end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#18
  def normalizing(source); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#70
  def parse_comments; end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#74
  def parse_strings; end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#64
  def restore(source); end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#60
  def ruby_code; end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#39
  def ruby_comment; end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#46
  def ruby_string; end

  # Returns the value of attribute store.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#12
  def store; end
end

# Base class for rewriting parsers which adds the #track! method
#
# source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#80
class RubyNext::Language::Rewriters::Text::PacoParser < ::RubyNext::Language::PacoParsers::Base
  # @return [PacoParser] a new instance of PacoParser
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#83
  def initialize(rewriter, context); end

  # Returns the value of attribute context.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#81
  def context; end

  # Returns the value of attribute rewriter.
  #
  # source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#81
  def rewriter; end

  # source://ruby-next-core//lib/ruby-next/language/rewriters/text.rb#88
  def track!; end
end

# Module responsible for runtime transformations
#
# source://ruby-next-core//lib/ruby-next/language/runtime.rb#14
module RubyNext::Language::Runtime
  class << self
    # source://ruby-next-core//lib/ruby-next/language/runtime.rb#18
    def load(path, contents); end

    # source://ruby-next-core//lib/ruby-next/language/runtime.rb#27
    def transform(contents, **options); end
  end
end

# source://ruby-next-core//lib/ruby-next/language.rb#31
class RubyNext::Language::TransformContext
  # @return [TransformContext] a new instance of TransformContext
  #
  # source://ruby-next-core//lib/ruby-next/language.rb#34
  def initialize(path: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://ruby-next-core//lib/ruby-next/language.rb#55
  def dirty?; end

  # source://ruby-next-core//lib/ruby-next/language.rb#59
  def min_version; end

  # Returns the value of attribute path.
  #
  # source://ruby-next-core//lib/ruby-next/language.rb#32
  def path; end

  # source://ruby-next-core//lib/ruby-next/language.rb#63
  def sorted_versions; end

  # Called by rewriter when it performs transfomrations
  #
  # source://ruby-next-core//lib/ruby-next/language.rb#44
  def track!(rewriter); end

  # Returns the value of attribute use_ruby_next.
  #
  # source://ruby-next-core//lib/ruby-next/language.rb#32
  def use_ruby_next; end

  # source://ruby-next-core//lib/ruby-next/language.rb#49
  def use_ruby_next!; end

  # Returns the value of attribute use_ruby_next.
  #
  # source://ruby-next-core//lib/ruby-next/language.rb#32
  def use_ruby_next?; end

  # Returns the value of attribute versions.
  #
  # source://ruby-next-core//lib/ruby-next/language.rb#32
  def versions; end
end

# Mininum Ruby version supported by RubyNext
#
# source://ruby-next-core//lib/ruby-next/config.rb#5
RubyNext::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# A virtual version number used for proposed features
#
# source://ruby-next-core//lib/ruby-next/config.rb#19
RubyNext::NEXT_VERSION = T.let(T.unsafe(nil), String)

# Where to store transpiled files (relative from the project LOAD_PATH, usually `lib/`)
#
# source://ruby-next-core//lib/ruby-next/config.rb#8
RubyNext::RUBY_NEXT_DIR = T.let(T.unsafe(nil), String)

# source://ruby-next-core//lib/ruby-next/utils.rb#4
module RubyNext::Utils
  private

  # Returns true if modules refinement is supported in current version
  #
  # source://ruby-next-core//lib/ruby-next/utils.rb#16
  def refine_modules?; end

  # source://ruby-next-core//lib/ruby-next/utils.rb#7
  def source_with_lines(source, path); end

  class << self
    # Returns true if modules refinement is supported in current version
    #
    # @return [Boolean]
    #
    # source://ruby-next-core//lib/ruby-next/utils.rb#16
    def refine_modules?; end

    # source://ruby-next-core//lib/ruby-next/utils.rb#7
    def source_with_lines(source, path); end
  end
end

# source://ruby-next-core//lib/ruby-next/version.rb#4
RubyNext::VERSION = T.let(T.unsafe(nil), String)
