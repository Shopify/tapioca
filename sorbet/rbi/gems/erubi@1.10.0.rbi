# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `erubi` gem.
# Please instead update this file by running `bin/tapioca gem erubi`.

# source://erubi-1.10.0/lib/erubi.rb:3
module Erubi
  class << self
    # source://erubi-1.10.0/lib/erubi.rb:29
    def h(value); end
  end
end

# source://erubi-1.10.0/lib/erubi.rb:47
class Erubi::Engine
  # Initialize a new Erubi::Engine.  Options:
  # +:bufval+ :: The value to use for the buffer variable, as a string (default <tt>'::String.new'</tt>).
  # +:bufvar+ :: The variable name to use for the buffer variable, as a string.
  # +:ensure+ :: Wrap the template in a begin/ensure block restoring the previous value of bufvar.
  # +:escapefunc+ :: The function to use for escaping, as a string (default: <tt>'::Erubi.h'</tt>).
  # +:escape+ :: Whether to make <tt><%=</tt> escape by default, and <tt><%==</tt> not escape by default.
  # +:escape_html+ :: Same as +:escape+, with lower priority.
  # +:filename+ :: The filename for the template.
  # +:freeze+ :: Whether to enable frozen string literals in the resulting source code.
  # +:literal_prefix+ :: The prefix to output when using escaped tag delimiters (default <tt>'<%'</tt>).
  # +:literal_postfix+ :: The postfix to output when using escaped tag delimiters (default <tt>'%>'</tt>).
  # +:outvar+ :: Same as +:bufvar+, with lower priority.
  # +:postamble+ :: The postamble for the template, by default returns the resulting source code.
  # +:preamble+ :: The preamble for the template, by default initializes the buffer variable.
  # +:regexp+ :: The regexp to use for scanning.
  # +:src+ :: The initial value to use for the source code, an empty string by default.
  # +:trim+ :: Whether to trim leading and trailing whitespace, true by default.
  #
  # @return [Engine] a new instance of Engine
  #
  # source://erubi-1.10.0/lib/erubi.rb:74
  def initialize(input, properties = T.unsafe(nil)); end

  # The variable name used for the buffer variable.
  #
  # source://erubi-1.10.0/lib/erubi.rb:55
  def bufvar; end

  # The filename of the template, if one was given.
  #
  # source://erubi-1.10.0/lib/erubi.rb:52
  def filename; end

  # The frozen ruby source code generated from the template, which can be evaled.
  #
  # source://erubi-1.10.0/lib/erubi.rb:49
  def src; end

  private

  # Add ruby code to the template
  #
  # source://erubi-1.10.0/lib/erubi.rb:191
  def add_code(code); end

  # Add the given ruby expression result to the template,
  # escaping it based on the indicator given and escape flag.
  #
  # source://erubi-1.10.0/lib/erubi.rb:198
  def add_expression(indicator, code); end

  # Add the result of Ruby expression to the template
  #
  # source://erubi-1.10.0/lib/erubi.rb:207
  def add_expression_result(code); end

  # Add the escaped result of Ruby expression to the template
  #
  # source://erubi-1.10.0/lib/erubi.rb:212
  def add_expression_result_escaped(code); end

  # Add the given postamble to the src.  Can be overridden in subclasses
  # to make additional changes to src that depend on the current state.
  #
  # source://erubi-1.10.0/lib/erubi.rb:218
  def add_postamble(postamble); end

  # Add raw text to the template.  Modifies argument if argument is mutable as a memory optimization.
  # Must be called with a string, cannot be called with nil (Rails's subclass depends on it).
  #
  # source://erubi-1.10.0/lib/erubi.rb:179
  def add_text(text); end

  # Raise an exception, as the base engine class does not support handling other indicators.
  #
  # @raise [ArgumentError]
  #
  # source://erubi-1.10.0/lib/erubi.rb:223
  def handle(indicator, code, tailch, rspace, lspace); end
end

# source://erubi-1.10.0/lib/erubi.rb:17
Erubi::MATCH_METHOD = T.let(T.unsafe(nil), Symbol)

# source://erubi-1.10.0/lib/erubi.rb:5
Erubi::RANGE_ALL = T.let(T.unsafe(nil), Range)

# source://erubi-1.10.0/lib/erubi.rb:9
Erubi::RANGE_FIRST = T.let(T.unsafe(nil), Integer)

# source://erubi-1.10.0/lib/erubi.rb:10
Erubi::RANGE_LAST = T.let(T.unsafe(nil), Integer)

# source://erubi-1.10.0/lib/erubi.rb:16
Erubi::TEXT_END = T.let(T.unsafe(nil), String)

# source://erubi-1.10.0/lib/erubi.rb:4
Erubi::VERSION = T.let(T.unsafe(nil), String)
