# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   tapioca sync

# typed: true

module Minitest
  def self.__run(reporter, options); end
  def self.after_run(&block); end
  def self.autorun; end
  def self.backtrace_filter; end
  def self.backtrace_filter=(_); end
  def self.clock_time; end
  def self.extensions; end
  def self.extensions=(_); end
  def self.filter_backtrace(bt); end
  def self.info_signal; end
  def self.info_signal=(_); end
  def self.init_plugins(options); end
  def self.load_plugins; end
  def self.parallel_executor; end
  def self.parallel_executor=(_); end
  def self.process_args(args = _); end
  def self.reporter; end
  def self.reporter=(_); end
  def self.run(args = _); end
  def self.run_one_method(klass, method_name); end
end

Minitest::ENCS = T.let(T.unsafe(nil), TrueClass)

class Minitest::Expectation < ::Struct
  def ctx; end
  def ctx=(_); end
  def must_be(*args); end
  def must_be_close_to(*args); end
  def must_be_empty(*args); end
  def must_be_instance_of(*args); end
  def must_be_kind_of(*args); end
  def must_be_nil(*args); end
  def must_be_same_as(*args); end
  def must_be_silent(*args); end
  def must_be_within_delta(*args); end
  def must_be_within_epsilon(*args); end
  def must_equal(*args); end
  def must_include(*args); end
  def must_match(*args); end
  def must_output(*args); end
  def must_raise(*args); end
  def must_respond_to(*args); end
  def must_throw(*args); end
  def path_must_exist(*args); end
  def path_wont_exist(*args); end
  def target; end
  def target=(_); end
  def wont_be(*args); end
  def wont_be_close_to(*args); end
  def wont_be_empty(*args); end
  def wont_be_instance_of(*args); end
  def wont_be_kind_of(*args); end
  def wont_be_nil(*args); end
  def wont_be_same_as(*args); end
  def wont_be_within_delta(*args); end
  def wont_be_within_epsilon(*args); end
  def wont_equal(*args); end
  def wont_include(*args); end
  def wont_match(*args); end
  def wont_respond_to(*args); end

  def self.[](*_); end
  def self.inspect; end
  def self.members; end
  def self.new(*_); end
end

class Minitest::ForkExecutor
  def shutdown; end
  def start; end
end

Minitest::VERSION = T.let(T.unsafe(nil), String)
