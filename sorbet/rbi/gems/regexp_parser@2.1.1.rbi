# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `regexp_parser` gem.
# Please instead update this file by running `bin/tapioca gem regexp_parser`.

# typed: true

module Regexp::Expression; end

class Regexp::Expression::Alternation < ::Regexp::Expression::SequenceOperation
  def alternatives; end
  def match_length; end
end

Regexp::Expression::Alternation::OPERAND = Regexp::Expression::Alternative

# A sequence of expressions, used by Alternation as one of its alternative.
class Regexp::Expression::Alternative < ::Regexp::Expression::Sequence; end

module Regexp::Expression::Anchor; end
Regexp::Expression::Anchor::BOL = Regexp::Expression::Anchor::BeginningOfLine
Regexp::Expression::Anchor::BOS = Regexp::Expression::Anchor::BeginningOfString

class Regexp::Expression::Anchor::Base < ::Regexp::Expression::Base
  def match_length; end
end

class Regexp::Expression::Anchor::BeginningOfLine < ::Regexp::Expression::Anchor::Base; end
class Regexp::Expression::Anchor::BeginningOfString < ::Regexp::Expression::Anchor::Base; end
Regexp::Expression::Anchor::EOL = Regexp::Expression::Anchor::EndOfLine
Regexp::Expression::Anchor::EOS = Regexp::Expression::Anchor::EndOfString
Regexp::Expression::Anchor::EOSobEOL = Regexp::Expression::Anchor::EndOfStringOrBeforeEndOfLine
class Regexp::Expression::Anchor::EndOfLine < ::Regexp::Expression::Anchor::Base; end
class Regexp::Expression::Anchor::EndOfString < ::Regexp::Expression::Anchor::Base; end
class Regexp::Expression::Anchor::EndOfStringOrBeforeEndOfLine < ::Regexp::Expression::Anchor::Base; end
class Regexp::Expression::Anchor::MatchStart < ::Regexp::Expression::Anchor::Base; end
class Regexp::Expression::Anchor::NonWordBoundary < ::Regexp::Expression::Anchor::Base; end
class Regexp::Expression::Anchor::WordBoundary < ::Regexp::Expression::Anchor::Base; end
module Regexp::Expression::Assertion; end

class Regexp::Expression::Assertion::Base < ::Regexp::Expression::Group::Base
  def match_length; end
end

class Regexp::Expression::Assertion::Lookahead < ::Regexp::Expression::Assertion::Base; end
class Regexp::Expression::Assertion::Lookbehind < ::Regexp::Expression::Assertion::Base; end
class Regexp::Expression::Assertion::NegativeLookahead < ::Regexp::Expression::Assertion::Base; end
class Regexp::Expression::Assertion::NegativeLookbehind < ::Regexp::Expression::Assertion::Base; end
module Regexp::Expression::Backreference; end

class Regexp::Expression::Backreference::Base < ::Regexp::Expression::Base
  def match_length; end

  # Returns the value of attribute referenced_expression.
  def referenced_expression; end

  # Sets the attribute referenced_expression
  def referenced_expression=(_arg0); end

  private

  def initialize_copy(orig); end
end

class Regexp::Expression::Backreference::Name < ::Regexp::Expression::Backreference::Base
  def initialize(token, options = T.unsafe(nil)); end

  # Returns the value of attribute name.
  def name; end

  # Returns the value of attribute name.
  def reference; end
end

class Regexp::Expression::Backreference::NameCall < ::Regexp::Expression::Backreference::Name; end

class Regexp::Expression::Backreference::NameRecursionLevel < ::Regexp::Expression::Backreference::Name
  def initialize(token, options = T.unsafe(nil)); end

  # Returns the value of attribute recursion_level.
  def recursion_level; end
end

class Regexp::Expression::Backreference::Number < ::Regexp::Expression::Backreference::Base
  def initialize(token, options = T.unsafe(nil)); end

  # Returns the value of attribute number.
  def number; end

  # Returns the value of attribute number.
  def reference; end
end

class Regexp::Expression::Backreference::NumberCall < ::Regexp::Expression::Backreference::Number; end
class Regexp::Expression::Backreference::NumberCallRelative < ::Regexp::Expression::Backreference::NumberRelative; end

class Regexp::Expression::Backreference::NumberRecursionLevel < ::Regexp::Expression::Backreference::Number
  def initialize(token, options = T.unsafe(nil)); end

  # Returns the value of attribute recursion_level.
  def recursion_level; end
end

class Regexp::Expression::Backreference::NumberRelative < ::Regexp::Expression::Backreference::Number
  # Returns the value of attribute effective_number.
  def effective_number; end

  # Sets the attribute effective_number
  def effective_number=(_arg0); end

  # Returns the value of attribute effective_number.
  def reference; end
end

class Regexp::Expression::Base
  include ::RuboCop::Ext::RegexpParser::Expression::Base

  def initialize(token, options = T.unsafe(nil)); end

  def =~(string, offset = T.unsafe(nil)); end
  def a?; end
  def ascii_classes?; end
  def attributes; end
  def base_length; end
  def case_insensitive?; end
  def coded_offset; end

  # Returns the value of attribute conditional_level.
  def conditional_level; end

  # Sets the attribute conditional_level
  def conditional_level=(_arg0); end

  def d?; end
  def default_classes?; end
  def extended?; end
  def free_spacing?; end
  def full_length; end
  def greedy?; end
  def i?; end
  def ignore_case?; end

  # Test if this expression has the given test_token, and optionally a given
  # test_type.
  #
  # # Any expressions
  # exp.is? :*  # always returns true
  #
  # # is it a :capture
  # exp.is? :capture
  #
  # # is it a :character and a :set
  # exp.is? :character, :set
  #
  # # is it a :meta :dot
  # exp.is? :dot, :meta
  #
  # # is it a :meta or :escape :dot
  # exp.is? :dot, [:meta, :escape]
  def is?(test_token, test_type = T.unsafe(nil)); end

  def lazy?; end

  # Returns the value of attribute level.
  def level; end

  # Sets the attribute level
  def level=(_arg0); end

  def m?; end
  def match(string, offset = T.unsafe(nil)); end
  def match?(string); end
  def matches?(string); end
  def multiline?; end

  # Returns the value of attribute nesting_level.
  def nesting_level; end

  # Sets the attribute nesting_level
  def nesting_level=(_arg0); end

  def offset; end

  # Test if this expression matches an entry in the given scope spec.
  #
  # A scope spec can be one of:
  #
  # . An array: Interpreted as a set of tokens, tested for inclusion
  # of the expression's token.
  #
  # . A hash:   Where the key is interpreted as the expression type
  # and the value is either a symbol or an array. In this
  # case, when the scope is a hash, one_of? calls itself to
  # evaluate the key's value.
  #
  # . A symbol: matches the expression's token or type, depending on
  # the level of the call. If one_of? is called directly with
  # a symbol then it will always be checked against the
  # type of the expression. If it's being called for a value
  # from a hash, it will be checked against the token of the
  # expression.
  #
  # # any expression
  # exp.one_of?(:*) # always true
  #
  # # like exp.type?(:group)
  # exp.one_of?(:group)
  #
  # # any expression of type meta
  # exp.one_of?(:meta => :*)
  #
  # # meta dots and alternations
  # exp.one_of?(:meta => [:dot, :alternation])
  #
  # # meta dots and any set tokens
  # exp.one_of?({meta: [:dot], set: :*})
  def one_of?(scope, top = T.unsafe(nil)); end

  # Returns the value of attribute options.
  def options; end

  # Sets the attribute options
  def options=(_arg0); end

  def possessive?; end
  def quantified?; end

  # Returns the value of attribute quantifier.
  def quantifier; end

  # Sets the attribute quantifier
  def quantifier=(_arg0); end

  def quantifier_affix(expression_format); end
  def quantify(token, text, min = T.unsafe(nil), max = T.unsafe(nil), mode = T.unsafe(nil)); end

  # Deprecated. Prefer `#repetitions` which has a more uniform interface.
  def quantity; end

  def reluctant?; end
  def repetitions; end

  # Returns the value of attribute set_level.
  def set_level; end

  # Sets the attribute set_level
  def set_level=(_arg0); end

  # Returns the value of attribute ts.
  def starts_at; end

  # %l  Level (depth) of the expression. Returns 'root' for the root
  # expression, returns zero or higher for all others.
  #
  # %>  Indentation at expression's level.
  #
  # %x  Index of the expression at its depth. Available when using
  # the sprintf_tree method only.
  #
  # %s  Start offset within the whole expression.
  # %e  End offset within the whole expression.
  # %S  Length of expression.
  #
  # %o  Coded offset and length, same as '@%s+%S'
  #
  # %y  Type of expression.
  # %k  Token of expression.
  # %i  ID, same as '%y:%k'
  # %c  Class name
  #
  # %q  Quantifier info, as {m[,M]}
  # %Q  Quantifier text
  #
  # %z  Quantifier min
  # %Z  Quantifier max
  #
  # %t  Base text of the expression (excludes quantifier, if any)
  # %~t Full text if the expression is terminal, otherwise %i
  # %T  Full text of the expression (includes quantifier, if any)
  #
  # %b  Basic info, same as '%o %i'
  # %m  Most info, same as '%b %q'
  # %a  All info, same as '%m %t'
  def strfre(format = T.unsafe(nil), indent_offset = T.unsafe(nil), index = T.unsafe(nil)); end

  # %l  Level (depth) of the expression. Returns 'root' for the root
  # expression, returns zero or higher for all others.
  #
  # %>  Indentation at expression's level.
  #
  # %x  Index of the expression at its depth. Available when using
  # the sprintf_tree method only.
  #
  # %s  Start offset within the whole expression.
  # %e  End offset within the whole expression.
  # %S  Length of expression.
  #
  # %o  Coded offset and length, same as '@%s+%S'
  #
  # %y  Type of expression.
  # %k  Token of expression.
  # %i  ID, same as '%y:%k'
  # %c  Class name
  #
  # %q  Quantifier info, as {m[,M]}
  # %Q  Quantifier text
  #
  # %z  Quantifier min
  # %Z  Quantifier max
  #
  # %t  Base text of the expression (excludes quantifier, if any)
  # %~t Full text if the expression is terminal, otherwise %i
  # %T  Full text of the expression (includes quantifier, if any)
  #
  # %b  Basic info, same as '%o %i'
  # %m  Most info, same as '%b %q'
  # %a  All info, same as '%m %t'
  def strfregexp(format = T.unsafe(nil), indent_offset = T.unsafe(nil), index = T.unsafe(nil)); end

  def terminal?; end

  # Returns the value of attribute text.
  def text; end

  # Sets the attribute text
  def text=(_arg0); end

  def to_h; end
  def to_re(format = T.unsafe(nil)); end
  def to_s(format = T.unsafe(nil)); end

  # Returns the value of attribute token.
  def token; end

  # Sets the attribute token
  def token=(_arg0); end

  # Returns the value of attribute ts.
  def ts; end

  # Sets the attribute ts
  def ts=(_arg0); end

  # Returns the value of attribute type.
  def type; end

  # Sets the attribute type
  def type=(_arg0); end

  # Test if this expression has the given test_type, which can be either
  # a symbol or an array of symbols to check against the expression's type.
  #
  # # is it a :group expression
  # exp.type? :group
  #
  # # is it a :set, or :meta
  # exp.type? [:set, :meta]
  def type?(test_type); end

  def u?; end
  def unicode_classes?; end
  def unquantified_clone; end
  def x?; end

  private

  def initialize_copy(orig); end
end

class Regexp::Expression::CharacterSet < ::Regexp::Expression::Subexpression
  include ::RuboCop::Ext::RegexpParser::Expression::CharacterSet

  def initialize(token, options = T.unsafe(nil)); end

  def close; end

  # Returns the value of attribute closed.
  def closed; end

  # Sets the attribute closed
  def closed=(_arg0); end

  # Returns the value of attribute closed.
  def closed?; end

  def match_length; end
  def negate; end

  # Returns the value of attribute negative.
  def negated?; end

  # Returns the value of attribute negative.
  def negative; end

  # Sets the attribute negative
  def negative=(_arg0); end

  # Returns the value of attribute negative.
  def negative?; end

  def to_s(format = T.unsafe(nil)); end
end

class Regexp::Expression::CharacterSet::IntersectedSequence < ::Regexp::Expression::Sequence
  def match_length; end
end

class Regexp::Expression::CharacterSet::Intersection < ::Regexp::Expression::SequenceOperation
  def match_length; end
end

Regexp::Expression::CharacterSet::Intersection::OPERAND = Regexp::Expression::CharacterSet::IntersectedSequence

class Regexp::Expression::CharacterSet::Range < ::Regexp::Expression::Subexpression
  def <<(exp); end
  def complete?; end
  def match_length; end
  def starts_at; end
  def to_s(_format = T.unsafe(nil)); end
  def ts; end
end

module Regexp::Expression::CharacterType; end
class Regexp::Expression::CharacterType::Any < ::Regexp::Expression::CharacterType::Base; end

class Regexp::Expression::CharacterType::Base < ::Regexp::Expression::Base
  def match_length; end
end

class Regexp::Expression::CharacterType::Digit < ::Regexp::Expression::CharacterType::Base; end
class Regexp::Expression::CharacterType::ExtendedGrapheme < ::Regexp::Expression::CharacterType::Base; end
class Regexp::Expression::CharacterType::Hex < ::Regexp::Expression::CharacterType::Base; end
class Regexp::Expression::CharacterType::Linebreak < ::Regexp::Expression::CharacterType::Base; end
class Regexp::Expression::CharacterType::NonDigit < ::Regexp::Expression::CharacterType::Base; end
class Regexp::Expression::CharacterType::NonHex < ::Regexp::Expression::CharacterType::Base; end
class Regexp::Expression::CharacterType::NonSpace < ::Regexp::Expression::CharacterType::Base; end
class Regexp::Expression::CharacterType::NonWord < ::Regexp::Expression::CharacterType::Base; end
class Regexp::Expression::CharacterType::Space < ::Regexp::Expression::CharacterType::Base; end
class Regexp::Expression::CharacterType::Word < ::Regexp::Expression::CharacterType::Base; end
class Regexp::Expression::Comment < ::Regexp::Expression::FreeSpace; end
module Regexp::Expression::Conditional; end
class Regexp::Expression::Conditional::Branch < ::Regexp::Expression::Sequence; end

class Regexp::Expression::Conditional::Condition < ::Regexp::Expression::Base
  def match_length; end

  # Name or number of the referenced capturing group that determines state.
  # Returns a String if reference is by name, Integer if by number.
  def reference; end

  # Returns the value of attribute referenced_expression.
  def referenced_expression; end

  # Sets the attribute referenced_expression
  def referenced_expression=(_arg0); end

  private

  def initialize_copy(orig); end
end

class Regexp::Expression::Conditional::Expression < ::Regexp::Expression::Subexpression
  def <<(exp); end
  def add_sequence(active_opts = T.unsafe(nil)); end
  def branch(active_opts = T.unsafe(nil)); end
  def branches; end
  def condition; end
  def condition=(exp); end
  def match_length; end
  def reference; end

  # Returns the value of attribute referenced_expression.
  def referenced_expression; end

  # Sets the attribute referenced_expression
  def referenced_expression=(_arg0); end

  def to_s(format = T.unsafe(nil)); end

  private

  def initialize_copy(orig); end
end

class Regexp::Expression::Conditional::TooManyBranches < ::Regexp::Parser::Error
  def initialize; end
end

module Regexp::Expression::EscapeSequence; end

class Regexp::Expression::EscapeSequence::AbstractMetaControlSequence < ::Regexp::Expression::EscapeSequence::Base
  def char; end

  private

  def control_sequence_to_s(control_sequence); end
  def meta_char_to_codepoint(meta_char); end
end

class Regexp::Expression::EscapeSequence::AsciiEscape < ::Regexp::Expression::EscapeSequence::Base; end
class Regexp::Expression::EscapeSequence::Backspace < ::Regexp::Expression::EscapeSequence::Base; end

class Regexp::Expression::EscapeSequence::Base < ::Regexp::Expression::Base
  def char; end
  def codepoint; end
  def match_length; end
end

class Regexp::Expression::EscapeSequence::Bell < ::Regexp::Expression::EscapeSequence::Base; end
class Regexp::Expression::EscapeSequence::Codepoint < ::Regexp::Expression::EscapeSequence::Base; end

class Regexp::Expression::EscapeSequence::CodepointList < ::Regexp::Expression::EscapeSequence::Base
  def char; end
  def chars; end
  def codepoint; end
  def codepoints; end
  def match_length; end
end

class Regexp::Expression::EscapeSequence::Control < ::Regexp::Expression::EscapeSequence::AbstractMetaControlSequence
  def codepoint; end
end

class Regexp::Expression::EscapeSequence::FormFeed < ::Regexp::Expression::EscapeSequence::Base; end
class Regexp::Expression::EscapeSequence::Hex < ::Regexp::Expression::EscapeSequence::Base; end

class Regexp::Expression::EscapeSequence::Literal < ::Regexp::Expression::EscapeSequence::Base
  def char; end
end

class Regexp::Expression::EscapeSequence::Meta < ::Regexp::Expression::EscapeSequence::AbstractMetaControlSequence
  def codepoint; end
end

class Regexp::Expression::EscapeSequence::MetaControl < ::Regexp::Expression::EscapeSequence::AbstractMetaControlSequence
  def codepoint; end
end

class Regexp::Expression::EscapeSequence::Newline < ::Regexp::Expression::EscapeSequence::Base; end

class Regexp::Expression::EscapeSequence::Octal < ::Regexp::Expression::EscapeSequence::Base
  def char; end
end

class Regexp::Expression::EscapeSequence::Return < ::Regexp::Expression::EscapeSequence::Base; end
class Regexp::Expression::EscapeSequence::Tab < ::Regexp::Expression::EscapeSequence::Base; end
class Regexp::Expression::EscapeSequence::VerticalTab < ::Regexp::Expression::EscapeSequence::Base; end

class Regexp::Expression::FreeSpace < ::Regexp::Expression::Base
  def match_length; end
  def quantify(_token, _text, _min = T.unsafe(nil), _max = T.unsafe(nil), _mode = T.unsafe(nil)); end
end

module Regexp::Expression::Group; end

# Special case. Absence group can match 0.. chars, irrespective of content.
# TODO: in theory, they *can* exclude match lengths with `.`: `(?~.{3})`
class Regexp::Expression::Group::Absence < ::Regexp::Expression::Group::Base
  def match_length; end
end

class Regexp::Expression::Group::Atomic < ::Regexp::Expression::Group::Base; end

class Regexp::Expression::Group::Base < ::Regexp::Expression::Subexpression
  def capturing?; end
  def comment?; end
  def to_s(format = T.unsafe(nil)); end
end

class Regexp::Expression::Group::Capture < ::Regexp::Expression::Group::Base
  def capturing?; end

  # Returns the value of attribute number.
  def identifier; end

  # Returns the value of attribute number.
  def number; end

  # Sets the attribute number
  def number=(_arg0); end

  # Returns the value of attribute number_at_level.
  def number_at_level; end

  # Sets the attribute number_at_level
  def number_at_level=(_arg0); end
end

class Regexp::Expression::Group::Comment < ::Regexp::Expression::Group::Base
  def comment?; end
  def to_s(_format = T.unsafe(nil)); end
end

class Regexp::Expression::Group::Named < ::Regexp::Expression::Group::Capture
  def initialize(token, options = T.unsafe(nil)); end

  # Returns the value of attribute name.
  def identifier; end

  # Returns the value of attribute name.
  def name; end

  private

  def initialize_copy(orig); end
end

class Regexp::Expression::Group::Options < ::Regexp::Expression::Group::Base
  # Returns the value of attribute option_changes.
  def option_changes; end

  # Sets the attribute option_changes
  def option_changes=(_arg0); end

  private

  def initialize_copy(orig); end
end

class Regexp::Expression::Group::Passive < ::Regexp::Expression::Group::Base
  def initialize(*_arg0); end

  # Sets the attribute implicit
  def implicit=(_arg0); end

  def implicit?; end
  def to_s(format = T.unsafe(nil)); end
end

module Regexp::Expression::Keep; end

class Regexp::Expression::Keep::Mark < ::Regexp::Expression::Base
  def match_length; end
end

class Regexp::Expression::Literal < ::Regexp::Expression::Base
  def match_length; end
end

Regexp::Expression::MatchLength = Regexp::MatchLength

class Regexp::Expression::PosixClass < ::Regexp::Expression::Base
  def match_length; end
  def name; end
  def negative?; end
end

class Regexp::Expression::Quantifier
  def initialize(token, text, min, max, mode); end

  def ==(other); end
  def eq(other); end
  def greedy?; end
  def lazy?; end

  # Returns the value of attribute max.
  def max; end

  # Returns the value of attribute min.
  def min; end

  # Returns the value of attribute mode.
  def mode; end

  def possessive?; end
  def reluctant?; end

  # Returns the value of attribute text.
  def text; end

  def to_h; end
  def to_s; end
  def to_str; end

  # Returns the value of attribute token.
  def token; end

  private

  def initialize_copy(orig); end
end

Regexp::Expression::Quantifier::MODES = T.let(T.unsafe(nil), Array)

class Regexp::Expression::Root < ::Regexp::Expression::Subexpression
  class << self
    def build(options = T.unsafe(nil)); end
    def build_token; end
  end
end

# A sequence of expressions. Differs from a Subexpressions by how it handles
# quantifiers, as it applies them to its last element instead of itself as
# a whole subexpression.
#
# Used as the base class for the Alternation alternatives, Conditional
# branches, and CharacterSet::Intersection intersected sequences.
class Regexp::Expression::Sequence < ::Regexp::Expression::Subexpression
  def quantify(token, text, min = T.unsafe(nil), max = T.unsafe(nil), mode = T.unsafe(nil)); end
  def starts_at; end
  def ts; end

  class << self
    def add_to(subexpression, params = T.unsafe(nil), active_opts = T.unsafe(nil)); end
    def at_levels(level, set_level, conditional_level); end
  end
end

# abstract class
class Regexp::Expression::SequenceOperation < ::Regexp::Expression::Subexpression
  def <<(exp); end
  def add_sequence(active_opts = T.unsafe(nil)); end
  def operands; end
  def operator; end
  def sequences; end
  def starts_at; end
  def to_s(format = T.unsafe(nil)); end
  def ts; end
end

class Regexp::Expression::Subexpression < ::Regexp::Expression::Base
  include ::Enumerable

  def initialize(token, options = T.unsafe(nil)); end

  def <<(exp); end
  def [](*args, &block); end
  def at(*args, &block); end
  def dig(*indices); end
  def each(*args, &block); end

  # Iterates over the expressions of this expression as an array, passing
  # the expression and its index within its parent to the given block.
  def each_expression(include_self = T.unsafe(nil)); end

  def empty?(*args, &block); end

  # Returns the value of attribute expressions.
  def expressions; end

  # Sets the attribute expressions
  def expressions=(_arg0); end

  def fetch(*args, &block); end

  # Returns a new array with the results of calling the given block once
  # for every expression. If a block is not given, returns an array with
  # each expression and its level index as an array.
  def flat_map(include_self = T.unsafe(nil)); end

  def index(*args, &block); end
  def inner_match_length; end
  def join(*args, &block); end
  def last(*args, &block); end
  def length(*args, &block); end
  def match_length; end
  def strfre_tree(format = T.unsafe(nil), include_self = T.unsafe(nil), separator = T.unsafe(nil)); end
  def strfregexp_tree(format = T.unsafe(nil), include_self = T.unsafe(nil), separator = T.unsafe(nil)); end
  def te; end
  def to_h; end
  def to_s(format = T.unsafe(nil)); end

  # Traverses the subexpression (depth-first, pre-order) and calls the given
  # block for each expression with three arguments; the traversal event,
  # the expression, and the index of the expression within its parent.
  #
  # The event argument is passed as follows:
  #
  # - For subexpressions, :enter upon entering the subexpression, and
  # :exit upon exiting it.
  #
  # - For terminal expressions, :visit is called once.
  #
  # Returns self.
  def traverse(include_self = T.unsafe(nil), &block); end

  def values_at(*args, &block); end

  # Traverses the subexpression (depth-first, pre-order) and calls the given
  # block for each expression with three arguments; the traversal event,
  # the expression, and the index of the expression within its parent.
  #
  # The event argument is passed as follows:
  #
  # - For subexpressions, :enter upon entering the subexpression, and
  # :exit upon exiting it.
  #
  # - For terminal expressions, :visit is called once.
  #
  # Returns self.
  def walk(include_self = T.unsafe(nil), &block); end

  private

  # Override base method to clone the expressions as well.
  def initialize_copy(orig); end
end

module Regexp::Expression::UnicodeProperty; end
class Regexp::Expression::UnicodeProperty::Age < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::Alnum < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::Alpha < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::Any < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::Ascii < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::Assigned < ::Regexp::Expression::UnicodeProperty::Base; end

class Regexp::Expression::UnicodeProperty::Base < ::Regexp::Expression::Base
  def match_length; end
  def name; end
  def negative?; end
  def shortcut; end
end

class Regexp::Expression::UnicodeProperty::Blank < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::Block < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::Cntrl < ::Regexp::Expression::UnicodeProperty::Base; end
module Regexp::Expression::UnicodeProperty::Codepoint; end
class Regexp::Expression::UnicodeProperty::Codepoint::Any < ::Regexp::Expression::UnicodeProperty::Codepoint::Base; end
class Regexp::Expression::UnicodeProperty::Codepoint::Base < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::Codepoint::Control < ::Regexp::Expression::UnicodeProperty::Codepoint::Base; end
class Regexp::Expression::UnicodeProperty::Codepoint::Format < ::Regexp::Expression::UnicodeProperty::Codepoint::Base; end
class Regexp::Expression::UnicodeProperty::Codepoint::PrivateUse < ::Regexp::Expression::UnicodeProperty::Codepoint::Base; end
class Regexp::Expression::UnicodeProperty::Codepoint::Surrogate < ::Regexp::Expression::UnicodeProperty::Codepoint::Base; end
class Regexp::Expression::UnicodeProperty::Codepoint::Unassigned < ::Regexp::Expression::UnicodeProperty::Codepoint::Base; end
class Regexp::Expression::UnicodeProperty::Derived < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::Digit < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::Emoji < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::Graph < ::Regexp::Expression::UnicodeProperty::Base; end
module Regexp::Expression::UnicodeProperty::Letter; end
class Regexp::Expression::UnicodeProperty::Letter::Any < ::Regexp::Expression::UnicodeProperty::Letter::Base; end
class Regexp::Expression::UnicodeProperty::Letter::Base < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::Letter::Cased < ::Regexp::Expression::UnicodeProperty::Letter::Base; end
class Regexp::Expression::UnicodeProperty::Letter::Lowercase < ::Regexp::Expression::UnicodeProperty::Letter::Base; end
class Regexp::Expression::UnicodeProperty::Letter::Modifier < ::Regexp::Expression::UnicodeProperty::Letter::Base; end
class Regexp::Expression::UnicodeProperty::Letter::Other < ::Regexp::Expression::UnicodeProperty::Letter::Base; end
class Regexp::Expression::UnicodeProperty::Letter::Titlecase < ::Regexp::Expression::UnicodeProperty::Letter::Base; end
class Regexp::Expression::UnicodeProperty::Letter::Uppercase < ::Regexp::Expression::UnicodeProperty::Letter::Base; end
class Regexp::Expression::UnicodeProperty::Lower < ::Regexp::Expression::UnicodeProperty::Base; end
module Regexp::Expression::UnicodeProperty::Mark; end
class Regexp::Expression::UnicodeProperty::Mark::Any < ::Regexp::Expression::UnicodeProperty::Mark::Base; end
class Regexp::Expression::UnicodeProperty::Mark::Base < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::Mark::Combining < ::Regexp::Expression::UnicodeProperty::Mark::Base; end
class Regexp::Expression::UnicodeProperty::Mark::Enclosing < ::Regexp::Expression::UnicodeProperty::Mark::Base; end
class Regexp::Expression::UnicodeProperty::Mark::Nonspacing < ::Regexp::Expression::UnicodeProperty::Mark::Base; end
class Regexp::Expression::UnicodeProperty::Mark::Spacing < ::Regexp::Expression::UnicodeProperty::Mark::Base; end
class Regexp::Expression::UnicodeProperty::Newline < ::Regexp::Expression::UnicodeProperty::Base; end
module Regexp::Expression::UnicodeProperty::Number; end
class Regexp::Expression::UnicodeProperty::Number::Any < ::Regexp::Expression::UnicodeProperty::Number::Base; end
class Regexp::Expression::UnicodeProperty::Number::Base < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::Number::Decimal < ::Regexp::Expression::UnicodeProperty::Number::Base; end
class Regexp::Expression::UnicodeProperty::Number::Letter < ::Regexp::Expression::UnicodeProperty::Number::Base; end
class Regexp::Expression::UnicodeProperty::Number::Other < ::Regexp::Expression::UnicodeProperty::Number::Base; end
class Regexp::Expression::UnicodeProperty::Print < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::Punct < ::Regexp::Expression::UnicodeProperty::Base; end
module Regexp::Expression::UnicodeProperty::Punctuation; end
class Regexp::Expression::UnicodeProperty::Punctuation::Any < ::Regexp::Expression::UnicodeProperty::Punctuation::Base; end
class Regexp::Expression::UnicodeProperty::Punctuation::Base < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::Punctuation::Close < ::Regexp::Expression::UnicodeProperty::Punctuation::Base; end
class Regexp::Expression::UnicodeProperty::Punctuation::Connector < ::Regexp::Expression::UnicodeProperty::Punctuation::Base; end
class Regexp::Expression::UnicodeProperty::Punctuation::Dash < ::Regexp::Expression::UnicodeProperty::Punctuation::Base; end
class Regexp::Expression::UnicodeProperty::Punctuation::Final < ::Regexp::Expression::UnicodeProperty::Punctuation::Base; end
class Regexp::Expression::UnicodeProperty::Punctuation::Initial < ::Regexp::Expression::UnicodeProperty::Punctuation::Base; end
class Regexp::Expression::UnicodeProperty::Punctuation::Open < ::Regexp::Expression::UnicodeProperty::Punctuation::Base; end
class Regexp::Expression::UnicodeProperty::Punctuation::Other < ::Regexp::Expression::UnicodeProperty::Punctuation::Base; end
class Regexp::Expression::UnicodeProperty::Script < ::Regexp::Expression::UnicodeProperty::Base; end
module Regexp::Expression::UnicodeProperty::Separator; end
class Regexp::Expression::UnicodeProperty::Separator::Any < ::Regexp::Expression::UnicodeProperty::Separator::Base; end
class Regexp::Expression::UnicodeProperty::Separator::Base < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::Separator::Line < ::Regexp::Expression::UnicodeProperty::Separator::Base; end
class Regexp::Expression::UnicodeProperty::Separator::Paragraph < ::Regexp::Expression::UnicodeProperty::Separator::Base; end
class Regexp::Expression::UnicodeProperty::Separator::Space < ::Regexp::Expression::UnicodeProperty::Separator::Base; end
class Regexp::Expression::UnicodeProperty::Space < ::Regexp::Expression::UnicodeProperty::Base; end
module Regexp::Expression::UnicodeProperty::Symbol; end
class Regexp::Expression::UnicodeProperty::Symbol::Any < ::Regexp::Expression::UnicodeProperty::Symbol::Base; end
class Regexp::Expression::UnicodeProperty::Symbol::Base < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::Symbol::Currency < ::Regexp::Expression::UnicodeProperty::Symbol::Base; end
class Regexp::Expression::UnicodeProperty::Symbol::Math < ::Regexp::Expression::UnicodeProperty::Symbol::Base; end
class Regexp::Expression::UnicodeProperty::Symbol::Modifier < ::Regexp::Expression::UnicodeProperty::Symbol::Base; end
class Regexp::Expression::UnicodeProperty::Symbol::Other < ::Regexp::Expression::UnicodeProperty::Symbol::Base; end
class Regexp::Expression::UnicodeProperty::Upper < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::Word < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::XPosixPunct < ::Regexp::Expression::UnicodeProperty::Base; end
class Regexp::Expression::UnicodeProperty::Xdigit < ::Regexp::Expression::UnicodeProperty::Base; end

class Regexp::Expression::WhiteSpace < ::Regexp::Expression::FreeSpace
  def merge(exp); end
end

# A very thin wrapper around the scanner that breaks quantified literal runs,
# collects emitted tokens into an array, calculates their nesting depth, and
# normalizes tokens for the parser, and checks if they are implemented by the
# given syntax flavor.
class Regexp::Lexer
  def lex(input, syntax = T.unsafe(nil), options: T.unsafe(nil), &block); end

  private

  def ascend(type, token); end
  def break_codepoint_list(token); end

  # called by scan to break a literal run that is longer than one character
  # into two separate tokens when it is followed by a quantifier
  def break_literal(token); end

  # Returns the value of attribute conditional_nesting.
  def conditional_nesting; end

  # Sets the attribute conditional_nesting
  def conditional_nesting=(_arg0); end

  def descend(type, token); end
  def merge_condition(current); end

  # Returns the value of attribute nesting.
  def nesting; end

  # Sets the attribute nesting
  def nesting=(_arg0); end

  # Returns the value of attribute set_nesting.
  def set_nesting; end

  # Sets the attribute set_nesting
  def set_nesting=(_arg0); end

  # Returns the value of attribute shift.
  def shift; end

  # Sets the attribute shift
  def shift=(_arg0); end

  # Returns the value of attribute tokens.
  def tokens; end

  # Sets the attribute tokens
  def tokens=(_arg0); end

  class << self
    def lex(input, syntax = T.unsafe(nil), options: T.unsafe(nil), &block); end
    def scan(input, syntax = T.unsafe(nil), options: T.unsafe(nil), &block); end
  end
end

Regexp::Lexer::CLOSING_TOKENS = T.let(T.unsafe(nil), Array)
Regexp::Lexer::OPENING_TOKENS = T.let(T.unsafe(nil), Array)

class Regexp::MatchLength
  include ::Enumerable

  def initialize(exp, opts = T.unsafe(nil)); end

  def each(opts = T.unsafe(nil)); end
  def endless_each; end
  def fixed?; end
  def include?(length); end
  def inspect; end
  def max; end
  def min; end
  def minmax; end
  def to_re; end

  private

  # Returns the value of attribute base_max.
  def base_max; end

  # Sets the attribute base_max
  def base_max=(_arg0); end

  # Returns the value of attribute base_min.
  def base_min; end

  # Sets the attribute base_min
  def base_min=(_arg0); end

  # Returns the value of attribute exp_class.
  def exp_class; end

  # Sets the attribute exp_class
  def exp_class=(_arg0); end

  # Returns the value of attribute max_rep.
  def max_rep; end

  # Sets the attribute max_rep
  def max_rep=(_arg0); end

  # Returns the value of attribute min_rep.
  def min_rep; end

  # Sets the attribute min_rep
  def min_rep=(_arg0); end

  # Returns the value of attribute reify.
  def reify; end

  # Sets the attribute reify
  def reify=(_arg0); end

  def test_regexp; end

  class << self
    def of(obj); end
  end
end

class Regexp::Parser
  include ::Regexp::Expression
  include ::Regexp::Expression::UnicodeProperty

  def parse(input, syntax = T.unsafe(nil), options: T.unsafe(nil), &block); end

  private

  def active_opts; end
  def anchor(token); end
  def assign_effective_number(exp); end

  # Assigns referenced expressions to refering expressions, e.g. if there is
  # an instance of Backreference::Number, its #referenced_expression is set to
  # the instance of Group::Capture that it refers to via its number.
  def assign_referenced_expressions; end

  def backref(token); end
  def captured_group_count_at_level; end

  # Returns the value of attribute captured_group_counts.
  def captured_group_counts; end

  # Sets the attribute captured_group_counts
  def captured_group_counts=(_arg0); end

  def close_completed_character_set_range; end
  def close_group; end
  def close_set; end
  def conditional(token); end

  # Returns the value of attribute conditional_nesting.
  def conditional_nesting; end

  # Sets the attribute conditional_nesting
  def conditional_nesting=(_arg0); end

  def count_captured_group; end
  def decrease_nesting; end
  def escape(token); end
  def extract_options(input, options); end
  def free_space(token); end
  def group(token); end
  def increase_level(exp); end
  def intersection(token); end
  def interval(target_node, token); end
  def keep(token); end
  def literal(token); end
  def meta(token); end
  def negate_set; end
  def nest(exp); end
  def nest_conditional(exp); end

  # Returns the value of attribute nesting.
  def nesting; end

  # Sets the attribute nesting
  def nesting=(_arg0); end

  # Returns the value of attribute node.
  def node; end

  # Sets the attribute node
  def node=(_arg0); end

  def open_group(token); end
  def open_set(token); end
  def options_group(token); end

  # Returns the value of attribute options_stack.
  def options_stack; end

  # Sets the attribute options_stack
  def options_stack=(_arg0); end

  def parse_token(token); end
  def posixclass(token); end
  def property(token); end
  def quantifier(token); end
  def range(token); end

  # Returns the value of attribute root.
  def root; end

  # Sets the attribute root
  def root=(_arg0); end

  def sequence_operation(klass, token); end
  def set(token); end

  # Returns the value of attribute switching_options.
  def switching_options; end

  # Sets the attribute switching_options
  def switching_options=(_arg0); end

  def total_captured_group_count; end
  def type(token); end

  # subtrees are transplanted to build Alternations, Intersections, Ranges
  def update_transplanted_subtree(exp, new_parent); end

  class << self
    def parse(input, syntax = T.unsafe(nil), options: T.unsafe(nil), &block); end
  end
end

Regexp::Parser::ENC_FLAGS = T.let(T.unsafe(nil), Array)

# base class for all gem-specific errors (inherited but never raised itself)
class Regexp::Parser::Error < ::StandardError; end

Regexp::Parser::MOD_FLAGS = T.let(T.unsafe(nil), Array)
class Regexp::Parser::ParserError < ::Regexp::Parser::Error; end
Regexp::Parser::UPTokens = Regexp::Syntax::Token::UnicodeProperty

class Regexp::Parser::UnknownTokenError < ::Regexp::Parser::ParserError
  def initialize(type, token); end
end

class Regexp::Parser::UnknownTokenTypeError < ::Regexp::Parser::ParserError
  def initialize(type, token); end
end

Regexp::Parser::VERSION = T.let(T.unsafe(nil), String)

class Regexp::Scanner
  # Emits an array with the details of the scanned pattern
  def emit(type, token, text); end

  def scan(input_object, options: T.unsafe(nil), &block); end

  private

  # Appends one or more characters to the literal buffer, to be emitted later
  # by a call to emit_literal.
  def append_literal(data, ts, te); end

  # Returns the value of attribute block.
  def block; end

  # Sets the attribute block
  def block=(_arg0); end

  # Returns the value of attribute char_pos.
  def char_pos; end

  # Sets the attribute char_pos
  def char_pos=(_arg0); end

  # Returns the value of attribute conditional_stack.
  def conditional_stack; end

  # Sets the attribute conditional_stack
  def conditional_stack=(_arg0); end

  # Copy from ts to te from data as text
  def copy(data, ts, te); end

  # Emits the literal run collected by calls to the append_literal method.
  def emit_literal; end

  def emit_meta_control_sequence(data, ts, te, token); end
  def emit_options(text); end

  # Returns the value of attribute free_spacing.
  def free_spacing; end

  # Sets the attribute free_spacing
  def free_spacing=(_arg0); end

  def free_spacing?(input_object, options); end

  # Returns the value of attribute group_depth.
  def group_depth; end

  # Sets the attribute group_depth
  def group_depth=(_arg0); end

  def in_group?; end
  def in_set?; end

  # Returns the value of attribute literal.
  def literal; end

  # Sets the attribute literal
  def literal=(_arg0); end

  # Returns the value of attribute set_depth.
  def set_depth; end

  # Sets the attribute set_depth
  def set_depth=(_arg0); end

  # Returns the value of attribute spacing_stack.
  def spacing_stack; end

  # Sets the attribute spacing_stack
  def spacing_stack=(_arg0); end

  # Returns the value of attribute tokens.
  def tokens; end

  # Sets the attribute tokens
  def tokens=(_arg0); end

  # Centralizes and unifies the handling of validation related
  # errors.
  def validation_error(type, what, reason); end

  class << self
    def long_prop_map; end

    # Scans the given regular expression text, or Regexp object and collects the
    # emitted token into an array that gets returned at the end. If a block is
    # given, it gets called for each emitted token.
    #
    # This method may raise errors if a syntax error is encountered.
    # --------------------------------------------------------------------------
    def scan(input_object, options: T.unsafe(nil), &block); end

    def short_prop_map; end
  end
end

# Invalid back reference. Used for name a number refs/calls.
class Regexp::Scanner::InvalidBackrefError < ::Regexp::Scanner::ValidationError
  def initialize(what, reason); end
end

# Invalid group. Used for named groups.
class Regexp::Scanner::InvalidGroupError < ::Regexp::Scanner::ValidationError
  def initialize(what, reason); end
end

# Invalid groupOption. Used for inline options.
class Regexp::Scanner::InvalidGroupOption < ::Regexp::Scanner::ValidationError
  def initialize(option, text); end
end

# Invalid sequence format. Used for escape sequences, mainly.
class Regexp::Scanner::InvalidSequenceError < ::Regexp::Scanner::ValidationError
  def initialize(what = T.unsafe(nil), where = T.unsafe(nil)); end
end

# Unexpected end of pattern
class Regexp::Scanner::PrematureEndError < ::Regexp::Scanner::ScannerError
  def initialize(where = T.unsafe(nil)); end
end

# General scanner error (catch all)
class Regexp::Scanner::ScannerError < ::Regexp::Parser::Error; end

# The property name was not recognized by the scanner.
class Regexp::Scanner::UnknownUnicodePropertyError < ::Regexp::Scanner::ValidationError
  def initialize(name); end
end

# Base for all scanner validation errors
class Regexp::Scanner::ValidationError < ::Regexp::Parser::Error
  def initialize(reason); end
end

# After loading all the tokens the map is full. Extract all tokens and types
# into the All and Types constants.
module Regexp::Syntax
  private

  def comparable_version(name); end
  def const_missing(const_name); end
  def fallback_version_class(version); end
  def inherit_from_version(parent_version, new_version); end

  # Loads and instantiates an instance of the syntax specification class for
  # the given syntax version name. The special names 'any' and '*' return an
  # instance of Syntax::Any.
  def new(name); end

  def specified_versions; end
  def supported?(name); end
  def version_class(version); end
  def version_const_name(version_string); end
  def warn_if_future_version(const_name); end

  class << self
    def comparable_version(name); end
    def const_missing(const_name); end
    def fallback_version_class(version); end
    def inherit_from_version(parent_version, new_version); end

    # Loads and instantiates an instance of the syntax specification class for
    # the given syntax version name. The special names 'any' and '*' return an
    # instance of Syntax::Any.
    def new(name); end

    def specified_versions; end
    def supported?(name); end
    def version_class(version); end
    def version_const_name(version_string); end
    def warn_if_future_version(const_name); end
  end
end

# A syntax that always returns true, passing all tokens as implemented. This
# is useful during development, testing, and should be useful for some types
# of transformations as well.
class Regexp::Syntax::Any < ::Regexp::Syntax::Base
  def initialize; end

  def implements!(_type, _token); end
  def implements?(_type, _token); end
end

# A lookup map of supported types and tokens in a given syntax
class Regexp::Syntax::Base
  include ::Regexp::Syntax::Token

  def initialize; end

  def check!(type, token); end
  def check?(type, token); end
  def excludes(type, tokens); end
  def features; end
  def implementations(type); end
  def implements(type, tokens); end
  def implements!(type, token); end
  def implements?(type, token); end
  def normalize(type, token); end
  def normalize_backref(type, token); end
  def normalize_group(type, token); end

  class << self
    def inspect; end
  end
end

class Regexp::Syntax::InvalidVersionNameError < ::Regexp::Syntax::SyntaxError
  def initialize(name); end
end

class Regexp::Syntax::NotImplementedError < ::Regexp::Syntax::SyntaxError
  def initialize(syntax, type, token); end
end

class Regexp::Syntax::SyntaxError < ::Regexp::Parser::Error; end
module Regexp::Syntax::Token; end
Regexp::Syntax::Token::All = T.let(T.unsafe(nil), Array)
module Regexp::Syntax::Token::Anchor; end
Regexp::Syntax::Token::Anchor::All = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Anchor::Basic = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Anchor::Extended = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Anchor::MatchStart = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Anchor::String = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Anchor::Type = T.let(T.unsafe(nil), Symbol)
module Regexp::Syntax::Token::Assertion; end
Regexp::Syntax::Token::Assertion::All = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Assertion::Lookahead = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Assertion::Lookbehind = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Assertion::Type = T.let(T.unsafe(nil), Symbol)
module Regexp::Syntax::Token::Backreference; end
Regexp::Syntax::Token::Backreference::All = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Backreference::Name = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Backreference::Number = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Backreference::RecursionLevel = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Backreference::Type = T.let(T.unsafe(nil), Symbol)
module Regexp::Syntax::Token::CharacterSet; end
Regexp::Syntax::Token::CharacterSet::All = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::CharacterSet::Basic = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::CharacterSet::Extended = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::CharacterSet::Type = T.let(T.unsafe(nil), Symbol)
module Regexp::Syntax::Token::CharacterType; end
Regexp::Syntax::Token::CharacterType::All = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::CharacterType::Basic = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::CharacterType::Clustered = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::CharacterType::Extended = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::CharacterType::Hex = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::CharacterType::Type = T.let(T.unsafe(nil), Symbol)
module Regexp::Syntax::Token::Conditional; end
Regexp::Syntax::Token::Conditional::All = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Conditional::Condition = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Conditional::Delimiters = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Conditional::Separator = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Conditional::Type = T.let(T.unsafe(nil), Symbol)
module Regexp::Syntax::Token::Escape; end
Regexp::Syntax::Token::Escape::ASCII = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Escape::All = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Escape::Basic = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Escape::Control = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Escape::Hex = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Escape::Meta = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Escape::Octal = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Escape::Type = T.let(T.unsafe(nil), Symbol)
Regexp::Syntax::Token::Escape::Unicode = T.let(T.unsafe(nil), Array)
module Regexp::Syntax::Token::FreeSpace; end
Regexp::Syntax::Token::FreeSpace::All = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::FreeSpace::Type = T.let(T.unsafe(nil), Symbol)
module Regexp::Syntax::Token::Group; end
Regexp::Syntax::Token::Group::All = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Group::Atomic = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Group::Basic = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Group::Comment = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Group::Extended = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Group::Named = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Group::Passive = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Group::Type = T.let(T.unsafe(nil), Symbol)
Regexp::Syntax::Token::Group::V1_8_6 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Group::V2_4_1 = T.let(T.unsafe(nil), Array)
module Regexp::Syntax::Token::Keep; end
Regexp::Syntax::Token::Keep::All = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Keep::Mark = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Keep::Type = T.let(T.unsafe(nil), Symbol)
module Regexp::Syntax::Token::Literal; end
Regexp::Syntax::Token::Literal::All = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Literal::Type = T.let(T.unsafe(nil), Symbol)
Regexp::Syntax::Token::Map = T.let(T.unsafe(nil), Hash)
module Regexp::Syntax::Token::Meta; end
Regexp::Syntax::Token::Meta::All = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Meta::Basic = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Meta::Extended = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Meta::Type = T.let(T.unsafe(nil), Symbol)
module Regexp::Syntax::Token::PosixClass; end
Regexp::Syntax::Token::PosixClass::All = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::PosixClass::Extensions = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::PosixClass::NonType = T.let(T.unsafe(nil), Symbol)
Regexp::Syntax::Token::PosixClass::Standard = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::PosixClass::Type = T.let(T.unsafe(nil), Symbol)
module Regexp::Syntax::Token::Quantifier; end
Regexp::Syntax::Token::Quantifier::All = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Quantifier::Greedy = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Quantifier::Interval = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Quantifier::IntervalAll = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Quantifier::IntervalPossessive = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Quantifier::IntervalReluctant = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Quantifier::Possessive = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Quantifier::Reluctant = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Quantifier::Type = T.let(T.unsafe(nil), Symbol)

# Type is the same as Backreference so keeping it here, for now.
module Regexp::Syntax::Token::SubexpressionCall; end

Regexp::Syntax::Token::SubexpressionCall::All = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::SubexpressionCall::Name = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::SubexpressionCall::Number = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::Types = T.let(T.unsafe(nil), Array)
module Regexp::Syntax::Token::UnicodeProperty; end
Regexp::Syntax::Token::UnicodeProperty::Age = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Age_V1_9_3 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Age_V2_0_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Age_V2_2_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Age_V2_3_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Age_V2_4_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Age_V2_5_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Age_V2_6_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Age_V2_6_2 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Age_V2_6_3 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::All = T.let(T.unsafe(nil), Array)
module Regexp::Syntax::Token::UnicodeProperty::Category; end
Regexp::Syntax::Token::UnicodeProperty::Category::All = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Category::Codepoint = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Category::Letter = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Category::Mark = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Category::Number = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Category::Punctuation = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Category::Separator = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Category::Symbol = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::CharType_V1_9_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::CharType_V2_5_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Derived = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Derived_V1_9_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Derived_V2_0_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Derived_V2_4_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Derived_V2_5_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Emoji = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Emoji_V2_5_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::NonType = T.let(T.unsafe(nil), Symbol)
Regexp::Syntax::Token::UnicodeProperty::POSIX = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Script = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Script_V1_9_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Script_V1_9_3 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Script_V2_0_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Script_V2_2_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Script_V2_3_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Script_V2_4_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Script_V2_5_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Script_V2_6_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Script_V2_6_2 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::Type = T.let(T.unsafe(nil), Symbol)
Regexp::Syntax::Token::UnicodeProperty::UnicodeBlock = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::UnicodeBlock_V1_9_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::UnicodeBlock_V2_0_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::UnicodeBlock_V2_2_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::UnicodeBlock_V2_3_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::UnicodeBlock_V2_4_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::UnicodeBlock_V2_5_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::UnicodeBlock_V2_6_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::UnicodeBlock_V2_6_2 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::V1_9_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::V1_9_3 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::V2_0_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::V2_2_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::V2_3_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::V2_4_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::V2_5_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::V2_6_0 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::V2_6_2 = T.let(T.unsafe(nil), Array)
Regexp::Syntax::Token::UnicodeProperty::V2_6_3 = T.let(T.unsafe(nil), Array)

class Regexp::Syntax::UnknownSyntaxNameError < ::Regexp::Syntax::SyntaxError
  def initialize(name); end
end

class Regexp::Syntax::V1_8_6 < ::Regexp::Syntax::Base
  def initialize; end
end

class Regexp::Syntax::V1_9 < ::Regexp::Syntax::V1_9_3; end

class Regexp::Syntax::V1_9_1 < ::Regexp::Syntax::V1_8_6
  def initialize; end
end

class Regexp::Syntax::V1_9_3 < ::Regexp::Syntax::V1_9_1
  def initialize; end
end

# use the last 1.9 release as the base
class Regexp::Syntax::V2_0_0 < ::Regexp::Syntax::V1_9
  def initialize; end
end

class Regexp::Syntax::V2_1 < ::Regexp::Syntax::V2_0_0; end
class Regexp::Syntax::V2_2 < ::Regexp::Syntax::V2_2_0; end

class Regexp::Syntax::V2_2_0 < ::Regexp::Syntax::V2_1
  def initialize; end
end

class Regexp::Syntax::V2_3 < ::Regexp::Syntax::V2_3_0; end

class Regexp::Syntax::V2_3_0 < ::Regexp::Syntax::V2_2
  def initialize; end
end

class Regexp::Syntax::V2_4 < ::Regexp::Syntax::V2_4_1; end

class Regexp::Syntax::V2_4_0 < ::Regexp::Syntax::V2_3
  def initialize; end
end

class Regexp::Syntax::V2_4_1 < ::Regexp::Syntax::V2_4_0
  def initialize; end
end

class Regexp::Syntax::V2_5 < ::Regexp::Syntax::V2_5_0; end

class Regexp::Syntax::V2_5_0 < ::Regexp::Syntax::V2_4
  def initialize; end
end

class Regexp::Syntax::V2_6_0 < ::Regexp::Syntax::V2_5
  def initialize; end
end

class Regexp::Syntax::V2_6_2 < ::Regexp::Syntax::V2_6_0
  def initialize; end
end

class Regexp::Syntax::V2_6_3 < ::Regexp::Syntax::V2_6_2
  def initialize; end
end

Regexp::Syntax::VERSION_CONST_REGEXP = T.let(T.unsafe(nil), Regexp)
Regexp::Syntax::VERSION_FORMAT = T.let(T.unsafe(nil), String)
Regexp::Syntax::VERSION_REGEXP = T.let(T.unsafe(nil), Regexp)
Regexp::TOKEN_KEYS = T.let(T.unsafe(nil), Array)

class Regexp::Token < ::Struct
  def conditional_level; end
  def conditional_level=(_); end
  def length; end
  def level; end
  def level=(_); end

  # Returns the value of attribute next.
  def next; end

  # Sets the attribute next
  def next=(_arg0); end

  def offset; end

  # Returns the value of attribute previous.
  def previous; end

  # Sets the attribute previous
  def previous=(_arg0); end

  def set_level; end
  def set_level=(_); end
  def te; end
  def te=(_); end
  def text; end
  def text=(_); end
  def token; end
  def token=(_); end
  def ts; end
  def ts=(_); end
  def type; end
  def type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end
