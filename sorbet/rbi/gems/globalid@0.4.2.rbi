# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   tapioca sync

# typed: true

class GlobalID
  extend(::ActiveSupport::Autoload)

  def initialize(gid, options = _); end

  def ==(other); end
  def app(*args, &block); end
  def eql?(other); end
  def find(options = _); end
  def hash; end
  def model_class; end
  def model_id(*args, &block); end
  def model_name(*args, &block); end
  def params(*args, &block); end
  def to_param; end
  def to_s(*args, &block); end
  def uri; end

  def self.app; end
  def self.app=(app); end
  def self.create(model, options = _); end
  def self.eager_load!; end
  def self.find(gid, options = _); end
  def self.parse(gid, options = _); end
end

module GlobalID::Identification
  extend(::ActiveSupport::Concern)

  def to_gid(options = _); end
  def to_gid_param(options = _); end
  def to_global_id(options = _); end
  def to_sgid(options = _); end
  def to_sgid_param(options = _); end
  def to_signed_global_id(options = _); end
end

module GlobalID::Locator
  def self.locate(gid, options = _); end
  def self.locate_many(gids, options = _); end
  def self.locate_many_signed(sgids, options = _); end
  def self.locate_signed(sgid, options = _); end
  def self.use(app, locator = _, &locator_block); end
end

class GlobalID::Locator::BaseLocator
  def locate(gid); end
  def locate_many(gids, options = _); end

  private

  def find_records(model_class, ids, options); end
end

class GlobalID::Locator::BlockLocator
  def initialize(block); end

  def locate(gid); end
  def locate_many(gids, options = _); end
end

GlobalID::Locator::DEFAULT_LOCATOR = T.let(T.unsafe(nil), GlobalID::Locator::UnscopedLocator)

class GlobalID::Locator::UnscopedLocator < ::GlobalID::Locator::BaseLocator
  def locate(gid); end

  private

  def find_records(model_class, ids, options); end
  def unscoped(model_class); end
end

class GlobalID::Railtie < ::Rails::Railtie
end

class GlobalID::Verifier < ::ActiveSupport::MessageVerifier

  private

  def decode(data); end
  def encode(data); end
end

class SignedGlobalID < ::GlobalID
  def initialize(gid, options = _); end

  def ==(other); end
  def expires_at; end
  def purpose; end
  def to_h; end
  def to_param; end
  def to_s; end
  def verifier; end

  private

  def encoded_expiration; end
  def pick_expiration(options); end

  def self.expires_in; end
  def self.expires_in=(_); end
  def self.parse(sgid, options = _); end
  def self.pick_purpose(options); end
  def self.pick_verifier(options); end
  def self.verifier; end
  def self.verifier=(_); end
end

class SignedGlobalID::ExpiredMessage < ::StandardError
end

class URI::GID < ::URI::Generic
  def app; end
  def model_id; end
  def model_name; end
  def params; end
  def to_s; end

  protected

  def query=(query); end
  def set_params(params); end
  def set_path(path); end
  def set_query(query); end

  private

  def check_host(host); end
  def check_path(path); end
  def check_scheme(scheme); end
  def parse_query_params(query); end
  def set_model_components(path, validate = _); end
  def validate_component(component); end
  def validate_model_id(model_id, model_name); end

  def self.build(args); end
  def self.create(app, model, params = _); end
  def self.parse(uri); end
  def self.validate_app(app); end
end

URI::GID::COMPONENT = T.let(T.unsafe(nil), Array)

class URI::GID::MissingModelIdError < ::URI::InvalidComponentError
end

URI::GID::PATH_REGEXP = T.let(T.unsafe(nil), Regexp)
