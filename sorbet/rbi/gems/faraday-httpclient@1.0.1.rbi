# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `faraday-httpclient` gem.
# Please instead update this file by running `bin/tapioca gem faraday-httpclient`.

# source://faraday-httpclient//lib/faraday/adapter/httpclient.rb#3
module Faraday
  class << self
    # source://faraday/1.10.3/lib/faraday.rb#81
    def default_adapter; end

    # source://faraday/1.10.3/lib/faraday.rb#137
    def default_adapter=(adapter); end

    # source://faraday/1.10.3/lib/faraday.rb#155
    def default_connection; end

    # source://faraday/1.10.3/lib/faraday.rb#84
    def default_connection=(_arg0); end

    # source://faraday/1.10.3/lib/faraday.rb#162
    def default_connection_options; end

    # source://faraday/1.10.3/lib/faraday.rb#169
    def default_connection_options=(options); end

    # source://faraday/1.10.3/lib/faraday.rb#89
    def ignore_env_proxy; end

    # source://faraday/1.10.3/lib/faraday.rb#89
    def ignore_env_proxy=(_arg0); end

    # source://faraday/1.10.3/lib/faraday.rb#72
    def lib_path; end

    # source://faraday/1.10.3/lib/faraday.rb#72
    def lib_path=(_arg0); end

    # source://faraday/1.10.3/lib/faraday.rb#118
    def new(url = T.unsafe(nil), options = T.unsafe(nil), &block); end

    # source://faraday/1.10.3/lib/faraday.rb#128
    def require_lib(*libs); end

    # source://faraday/1.10.3/lib/faraday.rb#128
    def require_libs(*libs); end

    # source://faraday/1.10.3/lib/faraday.rb#142
    def respond_to_missing?(symbol, include_private = T.unsafe(nil)); end

    # source://faraday/1.10.3/lib/faraday.rb#68
    def root_path; end

    # source://faraday/1.10.3/lib/faraday.rb#68
    def root_path=(_arg0); end

    private

    # source://faraday/1.10.3/lib/faraday.rb#178
    def method_missing(name, *args, &block); end
  end
end

# source://faraday-httpclient//lib/faraday/adapter/httpclient.rb#4
class Faraday::Adapter
  # source://faraday/1.10.3/lib/faraday/adapter.rb#33
  def initialize(_app = T.unsafe(nil), opts = T.unsafe(nil), &block); end

  # source://faraday/1.10.3/lib/faraday/adapter.rb#60
  def call(env); end

  # source://faraday/1.10.3/lib/faraday/adapter.rb#55
  def close; end

  # source://faraday/1.10.3/lib/faraday/adapter.rb#46
  def connection(env); end

  private

  # source://faraday/1.10.3/lib/faraday/adapter.rb#91
  def request_timeout(type, options); end

  # source://faraday/1.10.3/lib/faraday/adapter.rb#67
  def save_response(env, status, body, headers = T.unsafe(nil), reason_phrase = T.unsafe(nil)); end
end

# This class provides the main implementation for your adapter.
# There are some key responsibilities that your adapter should satisfy:
# * Initialize and store internally the client you chose (e.g. Net::HTTP)
# * Process requests and save the response (see `#call`)
#
# source://faraday-httpclient//lib/faraday/adapter/httpclient.rb#9
class Faraday::Adapter::HTTPClient < ::Faraday::Adapter
  # source://faraday-httpclient//lib/faraday/adapter/httpclient.rb#12
  def build_connection(env); end

  # source://faraday-httpclient//lib/faraday/adapter/httpclient.rb#39
  def call(env); end

  # source://faraday-httpclient//lib/faraday/adapter/httpclient.rb#124
  def configure_client(client); end

  # Configure proxy URI and any user credentials.
  #
  # @param proxy [Hash]
  #
  # source://faraday-httpclient//lib/faraday/adapter/httpclient.rb#89
  def configure_proxy(client, proxy); end

  # @param bind [Hash]
  #
  # source://faraday-httpclient//lib/faraday/adapter/httpclient.rb#81
  def configure_socket(client, bind); end

  # @param ssl [Hash]
  #
  # source://faraday-httpclient//lib/faraday/adapter/httpclient.rb#97
  def configure_ssl(client, ssl); end

  # @param req [Hash]
  #
  # source://faraday-httpclient//lib/faraday/adapter/httpclient.rb#110
  def configure_timeouts(client, req); end

  # @param ssl [Hash]
  # @return [OpenSSL::X509::Store]
  #
  # source://faraday-httpclient//lib/faraday/adapter/httpclient.rb#130
  def ssl_cert_store(ssl); end

  # @param ssl [Hash]
  #
  # source://faraday-httpclient//lib/faraday/adapter/httpclient.rb#142
  def ssl_verify_mode(ssl); end
end

# Main Faraday::HTTPClient module
#
# source://faraday-httpclient//lib/faraday/httpclient/version.rb#4
module Faraday::HTTPClient; end

# source://faraday-httpclient//lib/faraday/httpclient/version.rb#5
Faraday::HTTPClient::VERSION = T.let(T.unsafe(nil), String)
