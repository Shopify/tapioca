# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `redis-client` gem.
# Please instead update this file by running `bin/tapioca gem redis-client`.


module Process
  extend ::SQLite3::ForkSafety::CoreExt
  extend ::ConnectionPool::ForkTracker
  extend ::RedisClient::PIDCache::CoreExt
  extend ::ActiveSupport::ForkTracker::CoreExt
end

# source://redis-client//lib/redis_client/version.rb#3
class RedisClient
  include ::RedisClient::Common

  # @return [RedisClient] a new instance of RedisClient
  #
  # source://redis-client//lib/redis_client.rb#247
  def initialize(config, **_arg1); end

  # source://redis-client//lib/redis_client.rb#395
  def blocking_call(timeout, *command, **kwargs); end

  # source://redis-client//lib/redis_client.rb#415
  def blocking_call_v(timeout, command); end

  # source://redis-client//lib/redis_client.rb#335
  def call(*command, **kwargs); end

  # source://redis-client//lib/redis_client.rb#365
  def call_once(*command, **kwargs); end

  # source://redis-client//lib/redis_client.rb#380
  def call_once_v(command); end

  # source://redis-client//lib/redis_client.rb#350
  def call_v(command); end

  # source://redis-client//lib/redis_client.rb#475
  def close; end

  # @return [Boolean]
  #
  # source://redis-client//lib/redis_client.rb#471
  def connected?; end

  # source://redis-client//lib/redis_client.rb#272
  def db; end

  # source://redis-client//lib/redis_client.rb#480
  def disable_reconnection(&block); end

  # source://redis-client//lib/redis_client.rb#276
  def host; end

  # source://redis-client//lib/redis_client.rb#453
  def hscan(key, *args, **kwargs, &block); end

  # source://redis-client//lib/redis_client.rb#264
  def id; end

  # source://redis-client//lib/redis_client.rb#255
  def inspect; end

  # source://redis-client//lib/redis_client.rb#327
  def measure_round_trip_delay; end

  # source://redis-client//lib/redis_client.rb#502
  def multi(watch: T.unsafe(nil), &block); end

  # source://redis-client//lib/redis_client.rb#292
  def password; end

  # source://redis-client//lib/redis_client.rb#284
  def path; end

  # @yield [pipeline]
  #
  # source://redis-client//lib/redis_client.rb#484
  def pipelined(exception: T.unsafe(nil)); end

  # source://redis-client//lib/redis_client.rb#280
  def port; end

  # source://redis-client//lib/redis_client.rb#321
  def pubsub; end

  # source://redis-client//lib/redis_client.rb#311
  def read_timeout=(timeout); end

  # source://redis-client//lib/redis_client.rb#435
  def scan(*args, **kwargs, &block); end

  # source://redis-client//lib/redis_client.rb#260
  def server_url; end

  # source://redis-client//lib/redis_client.rb#296
  def size; end

  # source://redis-client//lib/redis_client.rb#444
  def sscan(key, *args, **kwargs, &block); end

  # @yield [_self]
  # @yieldparam _self [RedisClient] the object that the method was called on
  #
  # source://redis-client//lib/redis_client.rb#303
  def then(_options = T.unsafe(nil)); end

  # source://redis-client//lib/redis_client.rb#268
  def timeout; end

  # source://redis-client//lib/redis_client.rb#305
  def timeout=(timeout); end

  # source://redis-client//lib/redis_client.rb#288
  def username; end

  # @yield [_self]
  # @yieldparam _self [RedisClient] the object that the method was called on
  #
  # source://redis-client//lib/redis_client.rb#300
  def with(_options = T.unsafe(nil)); end

  # source://redis-client//lib/redis_client.rb#316
  def write_timeout=(timeout); end

  # source://redis-client//lib/redis_client.rb#462
  def zscan(key, *args, **kwargs, &block); end

  private

  # @yield [transaction]
  #
  # source://redis-client//lib/redis_client.rb#709
  def build_transaction; end

  # source://redis-client//lib/redis_client.rb#806
  def connect; end

  # source://redis-client//lib/redis_client.rb#743
  def ensure_connected(retryable: T.unsafe(nil)); end

  # source://redis-client//lib/redis_client.rb#798
  def raw_connection; end

  # source://redis-client//lib/redis_client.rb#717
  def scan_list(cursor_index, command, &block); end

  # source://redis-client//lib/redis_client.rb#727
  def scan_pairs(cursor_index, command); end

  class << self
    # source://redis-client//lib/redis_client.rb#224
    def config(**kwargs); end

    # source://redis-client//lib/redis_client.rb#33
    def default_driver; end

    # source://redis-client//lib/redis_client.rb#45
    def default_driver=(name); end

    # source://redis-client//lib/redis_client.rb#22
    def driver(name); end

    # source://redis-client//lib/redis_client.rb#232
    def new(arg = T.unsafe(nil), **kwargs); end

    # source://redis-client//lib/redis_client.rb#49
    def now; end

    # source://redis-client//lib/redis_client.rb#53
    def now_ms; end

    # source://redis-client//lib/redis_client.rb#240
    def register(middleware); end

    # source://redis-client//lib/redis_client.rb#18
    def register_driver(name, &block); end

    # source://redis-client//lib/redis_client.rb#228
    def sentinel(**kwargs); end
  end
end

# source://redis-client//lib/redis_client.rb#199
class RedisClient::AuthenticationError < ::RedisClient::CommandError; end

# source://redis-client//lib/redis_client/middlewares.rb#4
class RedisClient::BasicMiddleware
  # @return [BasicMiddleware] a new instance of BasicMiddleware
  #
  # source://redis-client//lib/redis_client/middlewares.rb#7
  def initialize(client); end

  # @yield [command]
  #
  # source://redis-client//lib/redis_client/middlewares.rb#15
  def call(command, _config); end

  # @yield [command]
  #
  # source://redis-client//lib/redis_client/middlewares.rb#18
  def call_pipelined(command, _config); end

  # Returns the value of attribute client.
  #
  # source://redis-client//lib/redis_client/middlewares.rb#5
  def client; end

  # source://redis-client//lib/redis_client/middlewares.rb#11
  def connect(_config); end
end

# source://redis-client//lib/redis_client.rb#152
class RedisClient::CannotConnectError < ::RedisClient::ConnectionError; end

# source://redis-client//lib/redis_client.rb#159
class RedisClient::CheckoutTimeoutError < ::RedisClient::TimeoutError; end

# source://redis-client//lib/redis_client/circuit_breaker.rb#4
class RedisClient::CircuitBreaker
  # @return [CircuitBreaker] a new instance of CircuitBreaker
  #
  # source://redis-client//lib/redis_client/circuit_breaker.rb#23
  def initialize(error_threshold:, error_timeout:, error_threshold_timeout: T.unsafe(nil), success_threshold: T.unsafe(nil)); end

  # Returns the value of attribute error_threshold.
  #
  # source://redis-client//lib/redis_client/circuit_breaker.rb#21
  def error_threshold; end

  # Returns the value of attribute error_threshold_timeout.
  #
  # source://redis-client//lib/redis_client/circuit_breaker.rb#21
  def error_threshold_timeout; end

  # Returns the value of attribute error_timeout.
  #
  # source://redis-client//lib/redis_client/circuit_breaker.rb#21
  def error_timeout; end

  # source://redis-client//lib/redis_client/circuit_breaker.rb#34
  def protect; end

  # Returns the value of attribute success_threshold.
  #
  # source://redis-client//lib/redis_client/circuit_breaker.rb#21
  def success_threshold; end

  private

  # source://redis-client//lib/redis_client/circuit_breaker.rb#80
  def record_error; end

  # source://redis-client//lib/redis_client/circuit_breaker.rb#95
  def record_success; end

  # source://redis-client//lib/redis_client/circuit_breaker.rb#65
  def refresh_state; end
end

# source://redis-client//lib/redis_client/circuit_breaker.rb#5
module RedisClient::CircuitBreaker::Middleware
  # source://redis-client//lib/redis_client/circuit_breaker.rb#10
  def call(_command, config); end

  # source://redis-client//lib/redis_client/circuit_breaker.rb#14
  def call_pipelined(_commands, config); end

  # source://redis-client//lib/redis_client/circuit_breaker.rb#6
  def connect(config); end
end

# source://redis-client//lib/redis_client/circuit_breaker.rb#19
class RedisClient::CircuitBreaker::OpenCircuitError < ::RedisClient::CannotConnectError; end

# source://redis-client//lib/redis_client/command_builder.rb#4
module RedisClient::CommandBuilder
  extend ::RedisClient::CommandBuilder

  # source://redis-client//lib/redis_client/command_builder.rb#8
  def generate(args, kwargs = T.unsafe(nil)); end
end

# source://redis-client//lib/redis_client.rb#178
class RedisClient::CommandError < ::RedisClient::Error
  include ::RedisClient::HasCommand
  include ::RedisClient::HasCode
  include ::RedisClient::Final

  class << self
    # source://redis-client//lib/redis_client.rb#184
    def parse(error_message); end
  end
end

# source://redis-client//lib/redis_client.rb#213
RedisClient::CommandError::ERRORS = T.let(T.unsafe(nil), Hash)

# source://redis-client//lib/redis_client.rb#63
module RedisClient::Common
  # source://redis-client//lib/redis_client.rb#67
  def initialize(config, id: T.unsafe(nil), connect_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil), write_timeout: T.unsafe(nil)); end

  # Returns the value of attribute config.
  #
  # source://redis-client//lib/redis_client.rb#64
  def config; end

  # Returns the value of attribute connect_timeout.
  #
  # source://redis-client//lib/redis_client.rb#65
  def connect_timeout; end

  # Sets the attribute connect_timeout
  #
  # @param value the value to set the attribute connect_timeout to.
  #
  # source://redis-client//lib/redis_client.rb#65
  def connect_timeout=(_arg0); end

  # Returns the value of attribute id.
  #
  # source://redis-client//lib/redis_client.rb#64
  def id; end

  # Returns the value of attribute read_timeout.
  #
  # source://redis-client//lib/redis_client.rb#65
  def read_timeout; end

  # Sets the attribute read_timeout
  #
  # @param value the value to set the attribute read_timeout to.
  #
  # source://redis-client//lib/redis_client.rb#65
  def read_timeout=(_arg0); end

  # source://redis-client//lib/redis_client.rb#83
  def timeout=(timeout); end

  # Returns the value of attribute write_timeout.
  #
  # source://redis-client//lib/redis_client.rb#65
  def write_timeout; end

  # Sets the attribute write_timeout
  #
  # @param value the value to set the attribute write_timeout to.
  #
  # source://redis-client//lib/redis_client.rb#65
  def write_timeout=(_arg0); end
end

# source://redis-client//lib/redis_client/config.rb#7
class RedisClient::Config
  include ::RedisClient::Config::Common

  # @return [Config] a new instance of Config
  #
  # source://redis-client//lib/redis_client/config.rb#191
  def initialize(url: T.unsafe(nil), host: T.unsafe(nil), port: T.unsafe(nil), path: T.unsafe(nil), username: T.unsafe(nil), password: T.unsafe(nil), db: T.unsafe(nil), **kwargs); end

  # Returns the value of attribute host.
  #
  # source://redis-client//lib/redis_client/config.rb#189
  def host; end

  # Returns the value of attribute path.
  #
  # source://redis-client//lib/redis_client/config.rb#189
  def path; end

  # Returns the value of attribute port.
  #
  # source://redis-client//lib/redis_client/config.rb#189
  def port; end

  # Returns the value of attribute server_key.
  #
  # source://redis-client//lib/redis_client/config.rb#189
  def server_key; end
end

# source://redis-client//lib/redis_client/config.rb#14
module RedisClient::Config::Common
  # source://redis-client//lib/redis_client/config.rb#21
  def initialize(username: T.unsafe(nil), password: T.unsafe(nil), db: T.unsafe(nil), id: T.unsafe(nil), timeout: T.unsafe(nil), read_timeout: T.unsafe(nil), write_timeout: T.unsafe(nil), connect_timeout: T.unsafe(nil), ssl: T.unsafe(nil), custom: T.unsafe(nil), ssl_params: T.unsafe(nil), driver: T.unsafe(nil), protocol: T.unsafe(nil), client_implementation: T.unsafe(nil), command_builder: T.unsafe(nil), inherit_socket: T.unsafe(nil), reconnect_attempts: T.unsafe(nil), middlewares: T.unsafe(nil), circuit_breaker: T.unsafe(nil)); end

  # Returns the value of attribute circuit_breaker.
  #
  # source://redis-client//lib/redis_client/config.rb#15
  def circuit_breaker; end

  # Returns the value of attribute command_builder.
  #
  # source://redis-client//lib/redis_client/config.rb#15
  def command_builder; end

  # Returns the value of attribute connect_timeout.
  #
  # source://redis-client//lib/redis_client/config.rb#15
  def connect_timeout; end

  # source://redis-client//lib/redis_client/config.rb#89
  def connection_prelude; end

  # Returns the value of attribute custom.
  #
  # source://redis-client//lib/redis_client/config.rb#15
  def custom; end

  # Returns the value of attribute db.
  #
  # source://redis-client//lib/redis_client/config.rb#15
  def db; end

  # Returns the value of attribute driver.
  #
  # source://redis-client//lib/redis_client/config.rb#15
  def driver; end

  # Returns the value of attribute id.
  #
  # source://redis-client//lib/redis_client/config.rb#15
  def id; end

  # Returns the value of attribute inherit_socket.
  #
  # source://redis-client//lib/redis_client/config.rb#15
  def inherit_socket; end

  # Returns the value of attribute middlewares_stack.
  #
  # source://redis-client//lib/redis_client/config.rb#15
  def middlewares_stack; end

  # source://redis-client//lib/redis_client/config.rb#139
  def new_client(**kwargs); end

  # source://redis-client//lib/redis_client/config.rb#134
  def new_pool(**kwargs); end

  # source://redis-client//lib/redis_client/config.rb#118
  def password; end

  # Returns the value of attribute protocol.
  #
  # source://redis-client//lib/redis_client/config.rb#15
  def protocol; end

  # Returns the value of attribute read_timeout.
  #
  # source://redis-client//lib/redis_client/config.rb#15
  def read_timeout; end

  # @return [Boolean]
  #
  # source://redis-client//lib/redis_client/config.rb#126
  def resolved?; end

  # @return [Boolean]
  #
  # source://redis-client//lib/redis_client/config.rb#143
  def retriable?(attempt); end

  # @return [Boolean]
  #
  # source://redis-client//lib/redis_client/config.rb#147
  def retry_connecting?(attempt, _error); end

  # @return [Boolean]
  #
  # source://redis-client//lib/redis_client/config.rb#130
  def sentinel?; end

  # source://redis-client//lib/redis_client/config.rb#165
  def server_url; end

  # Returns the value of attribute ssl.
  #
  # source://redis-client//lib/redis_client/config.rb#15
  def ssl; end

  # Returns the value of attribute ssl.
  #
  # source://redis-client//lib/redis_client/config.rb#19
  def ssl?; end

  # source://redis-client//lib/redis_client/config.rb#159
  def ssl_context; end

  # Returns the value of attribute ssl_params.
  #
  # source://redis-client//lib/redis_client/config.rb#15
  def ssl_params; end

  # source://redis-client//lib/redis_client/config.rb#122
  def username; end

  # Returns the value of attribute write_timeout.
  #
  # source://redis-client//lib/redis_client/config.rb#15
  def write_timeout; end
end

# source://redis-client//lib/redis_client/config.rb#12
RedisClient::Config::DEFAULT_DB = T.let(T.unsafe(nil), Integer)

# source://redis-client//lib/redis_client/config.rb#9
RedisClient::Config::DEFAULT_HOST = T.let(T.unsafe(nil), String)

# source://redis-client//lib/redis_client/config.rb#10
RedisClient::Config::DEFAULT_PORT = T.let(T.unsafe(nil), Integer)

# source://redis-client//lib/redis_client/config.rb#8
RedisClient::Config::DEFAULT_TIMEOUT = T.let(T.unsafe(nil), Float)

# source://redis-client//lib/redis_client/config.rb#11
RedisClient::Config::DEFAULT_USERNAME = T.let(T.unsafe(nil), String)

# source://redis-client//lib/redis_client.rb#151
class RedisClient::ConnectionError < ::RedisClient::Error; end

# source://redis-client//lib/redis_client/connection_mixin.rb#4
module RedisClient::ConnectionMixin
  # source://redis-client//lib/redis_client/connection_mixin.rb#8
  def initialize(config); end

  # source://redis-client//lib/redis_client/connection_mixin.rb#34
  def call(command, timeout); end

  # source://redis-client//lib/redis_client/connection_mixin.rb#49
  def call_pipelined(commands, timeouts, exception: T.unsafe(nil)); end

  # source://redis-client//lib/redis_client/connection_mixin.rb#20
  def close; end

  # Returns the value of attribute config.
  #
  # source://redis-client//lib/redis_client/connection_mixin.rb#6
  def config; end

  # source://redis-client//lib/redis_client/connection_mixin.rb#100
  def connection_error(message); end

  # source://redis-client//lib/redis_client/connection_mixin.rb#85
  def connection_timeout(timeout); end

  # source://redis-client//lib/redis_client/connection_mixin.rb#94
  def protocol_error(message); end

  # source://redis-client//lib/redis_client/connection_mixin.rb#15
  def reconnect; end

  # Returns the value of attribute retry_attempt.
  #
  # source://redis-client//lib/redis_client/connection_mixin.rb#5
  def retry_attempt; end

  # Sets the attribute retry_attempt
  #
  # @param value the value to set the attribute retry_attempt to.
  #
  # source://redis-client//lib/redis_client/connection_mixin.rb#5
  def retry_attempt=(_arg0); end

  # source://redis-client//lib/redis_client/connection_mixin.rb#25
  def revalidate; end
end

# source://redis-client//lib/redis_client/decorator.rb#4
module RedisClient::Decorator
  class << self
    # source://redis-client//lib/redis_client/decorator.rb#6
    def create(commands_mixin); end
  end
end

# source://redis-client//lib/redis_client/decorator.rb#37
class RedisClient::Decorator::Client
  include ::RedisClient::Decorator::CommandsMixin

  # @return [Client] a new instance of Client
  #
  # source://redis-client//lib/redis_client/decorator.rb#40
  def initialize(_client); end

  # source://redis-client//lib/redis_client/decorator.rb#59
  def close(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/decorator.rb#68
  def config; end

  # source://redis-client//lib/redis_client/decorator.rb#68
  def connect_timeout; end

  # source://redis-client//lib/redis_client/decorator.rb#76
  def connect_timeout=(value); end

  # source://redis-client//lib/redis_client/decorator.rb#59
  def hscan(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/decorator.rb#68
  def id; end

  # source://redis-client//lib/redis_client/decorator.rb#54
  def multi(**kwargs); end

  # source://redis-client//lib/redis_client/decorator.rb#50
  def pipelined(exception: T.unsafe(nil)); end

  # source://redis-client//lib/redis_client/decorator.rb#68
  def pubsub; end

  # source://redis-client//lib/redis_client/decorator.rb#68
  def read_timeout; end

  # source://redis-client//lib/redis_client/decorator.rb#76
  def read_timeout=(value); end

  # source://redis-client//lib/redis_client/decorator.rb#59
  def scan(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/decorator.rb#68
  def size; end

  # source://redis-client//lib/redis_client/decorator.rb#59
  def sscan(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/decorator.rb#76
  def timeout=(value); end

  # source://redis-client//lib/redis_client/decorator.rb#45
  def with(*args, **_arg1); end

  # source://redis-client//lib/redis_client/decorator.rb#68
  def write_timeout; end

  # source://redis-client//lib/redis_client/decorator.rb#76
  def write_timeout=(value); end

  # source://redis-client//lib/redis_client/decorator.rb#59
  def zscan(*args, **_arg1, &block); end
end

# source://redis-client//lib/redis_client/decorator.rb#18
module RedisClient::Decorator::CommandsMixin
  # source://redis-client//lib/redis_client/decorator.rb#19
  def initialize(client); end

  # source://redis-client//lib/redis_client/decorator.rb#24
  def blocking_call(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/decorator.rb#24
  def blocking_call_v(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/decorator.rb#24
  def call(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/decorator.rb#24
  def call_once(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/decorator.rb#24
  def call_once_v(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/decorator.rb#24
  def call_v(*args, **_arg1, &block); end
end

# source://redis-client//lib/redis_client/decorator.rb#33
class RedisClient::Decorator::Pipeline
  include ::RedisClient::Decorator::CommandsMixin
end

# source://redis-client//lib/redis_client.rb#137
class RedisClient::Error < ::StandardError
  include ::RedisClient::HasConfig
  include ::RedisClient::Retriable

  class << self
    # source://redis-client//lib/redis_client.rb#141
    def with_config(message, config = T.unsafe(nil)); end
  end
end

# source://redis-client//lib/redis_client.rb#154
class RedisClient::FailoverError < ::RedisClient::ConnectionError; end

# source://redis-client//lib/redis_client.rb#120
module RedisClient::Final
  # source://redis-client//lib/redis_client.rb#121
  def _set_retry_attempt(_retry_attempt); end

  # @return [Boolean]
  #
  # source://redis-client//lib/redis_client.rb#132
  def final?; end

  # @return [Boolean]
  #
  # source://redis-client//lib/redis_client.rb#128
  def retriable?; end

  # source://redis-client//lib/redis_client.rb#124
  def retry_attempt; end
end

# source://redis-client//lib/redis_client.rb#169
module RedisClient::HasCode
  # source://redis-client//lib/redis_client.rb#172
  def initialize(message = T.unsafe(nil), code = T.unsafe(nil)); end

  # Returns the value of attribute code.
  #
  # source://redis-client//lib/redis_client.rb#170
  def code; end
end

# source://redis-client//lib/redis_client.rb#161
module RedisClient::HasCommand
  # source://redis-client//lib/redis_client.rb#164
  def _set_command(command); end

  # Returns the value of attribute command.
  #
  # source://redis-client//lib/redis_client.rb#162
  def command; end
end

# source://redis-client//lib/redis_client.rb#88
module RedisClient::HasConfig
  # source://redis-client//lib/redis_client.rb#91
  def _set_config(config); end

  # Returns the value of attribute config.
  #
  # source://redis-client//lib/redis_client.rb#89
  def config; end

  # source://redis-client//lib/redis_client.rb#95
  def message; end
end

# source://redis-client//lib/redis_client.rb#209
class RedisClient::MasterDownError < ::RedisClient::ConnectionError
  include ::RedisClient::HasCommand
  include ::RedisClient::HasCode
end

# source://redis-client//lib/redis_client/middlewares.rb#21
class RedisClient::Middlewares < ::RedisClient::BasicMiddleware; end

# source://redis-client//lib/redis_client.rb#583
class RedisClient::Multi
  # @return [Multi] a new instance of Multi
  #
  # source://redis-client//lib/redis_client.rb#584
  def initialize(command_builder); end

  # source://redis-client//lib/redis_client.rb#626
  def _blocks; end

  # source://redis-client//lib/redis_client.rb#646
  def _coerce!(results); end

  # source://redis-client//lib/redis_client.rb#622
  def _commands; end

  # @return [Boolean]
  #
  # source://redis-client//lib/redis_client.rb#634
  def _empty?; end

  # @return [Boolean]
  #
  # source://redis-client//lib/redis_client.rb#642
  def _retryable?; end

  # source://redis-client//lib/redis_client.rb#630
  def _size; end

  # source://redis-client//lib/redis_client.rb#638
  def _timeouts; end

  # source://redis-client//lib/redis_client.rb#592
  def call(*command, **kwargs, &block); end

  # source://redis-client//lib/redis_client.rb#606
  def call_once(*command, **kwargs, &block); end

  # source://redis-client//lib/redis_client.rb#614
  def call_once_v(command, &block); end

  # source://redis-client//lib/redis_client.rb#599
  def call_v(command, &block); end
end

# source://redis-client//lib/redis_client.rb#203
class RedisClient::NoScriptError < ::RedisClient::CommandError; end

# source://redis-client//lib/redis_client.rb#202
class RedisClient::OutOfMemoryError < ::RedisClient::CommandError; end

# source://redis-client//lib/redis_client/pid_cache.rb#4
module RedisClient::PIDCache
  class << self
    # Returns the value of attribute pid.
    #
    # source://redis-client//lib/redis_client/pid_cache.rb#10
    def pid; end

    # source://redis-client//lib/redis_client/pid_cache.rb#12
    def update!; end
  end
end

# source://redis-client//lib/redis_client/pid_cache.rb#18
module RedisClient::PIDCache::CoreExt
  # source://redis-client//lib/redis_client/pid_cache.rb#19
  def _fork; end
end

# source://redis-client//lib/redis_client.rb#200
class RedisClient::PermissionError < ::RedisClient::CommandError; end

# source://redis-client//lib/redis_client.rb#662
class RedisClient::Pipeline < ::RedisClient::Multi
  # @return [Pipeline] a new instance of Pipeline
  #
  # source://redis-client//lib/redis_client.rb#663
  def initialize(_command_builder); end

  # source://redis-client//lib/redis_client.rb#694
  def _coerce!(results); end

  # @return [Boolean]
  #
  # source://redis-client//lib/redis_client.rb#690
  def _empty?; end

  # source://redis-client//lib/redis_client.rb#686
  def _timeouts; end

  # source://redis-client//lib/redis_client.rb#668
  def blocking_call(timeout, *command, **kwargs, &block); end

  # source://redis-client//lib/redis_client.rb#677
  def blocking_call_v(timeout, command, &block); end
end

# source://redis-client//lib/redis_client/pooled.rb#6
class RedisClient::Pooled
  include ::RedisClient::Common

  # @return [Pooled] a new instance of Pooled
  #
  # source://redis-client//lib/redis_client/pooled.rb#11
  def initialize(config, id: T.unsafe(nil), connect_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil), write_timeout: T.unsafe(nil), **kwargs); end

  # source://redis-client//lib/redis_client/pooled.rb#55
  def blocking_call(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/pooled.rb#55
  def blocking_call_v(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/pooled.rb#55
  def call(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/pooled.rb#55
  def call_once(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/pooled.rb#55
  def call_once_v(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/pooled.rb#55
  def call_v(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/pooled.rb#37
  def close; end

  # source://redis-client//lib/redis_client/pooled.rb#64
  def hscan(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/pooled.rb#55
  def multi(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/pooled.rb#55
  def pipelined(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/pooled.rb#55
  def pubsub(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/pooled.rb#64
  def scan(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/pooled.rb#48
  def size; end

  # source://redis-client//lib/redis_client/pooled.rb#64
  def sscan(*args, **_arg1, &block); end

  # source://redis-client//lib/redis_client/pooled.rb#35
  def then(options = T.unsafe(nil)); end

  # source://redis-client//lib/redis_client/pooled.rb#25
  def with(options = T.unsafe(nil)); end

  # source://redis-client//lib/redis_client/pooled.rb#64
  def zscan(*args, **_arg1, &block); end

  private

  # source://redis-client//lib/redis_client/pooled.rb#82
  def new_pool; end

  # source://redis-client//lib/redis_client/pooled.rb#78
  def pool; end
end

# source://redis-client//lib/redis_client/pooled.rb#7
RedisClient::Pooled::EMPTY_HASH = T.let(T.unsafe(nil), Hash)

# source://redis-client//lib/redis_client.rb#148
class RedisClient::ProtocolError < ::RedisClient::Error; end

# source://redis-client//lib/redis_client.rb#546
class RedisClient::PubSub
  # @return [PubSub] a new instance of PubSub
  #
  # source://redis-client//lib/redis_client.rb#547
  def initialize(raw_connection, command_builder); end

  # source://redis-client//lib/redis_client.rb#552
  def call(*command, **kwargs); end

  # source://redis-client//lib/redis_client.rb#557
  def call_v(command); end

  # source://redis-client//lib/redis_client.rb#562
  def close; end

  # source://redis-client//lib/redis_client.rb#568
  def next_event(timeout = T.unsafe(nil)); end

  private

  # Returns the value of attribute raw_connection.
  #
  # source://redis-client//lib/redis_client.rb#580
  def raw_connection; end
end

# source://redis-client//lib/redis_client/ruby_connection/resp3.rb#4
module RedisClient::RESP3
  private

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#36
  def dump(command, buffer = T.unsafe(nil)); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#57
  def dump_any(object, buffer); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#68
  def dump_array(array, buffer); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#84
  def dump_hash(hash, buffer); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#93
  def dump_numeric(numeric, buffer); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#76
  def dump_set(set, buffer); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#97
  def dump_string(string, buffer); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#103
  def dump_symbol(symbol, buffer); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#49
  def load(io); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#53
  def new_buffer; end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#112
  def parse(io); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#166
  def parse_array(io); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#218
  def parse_blob(io); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#155
  def parse_boolean(io); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#200
  def parse_double(io); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#151
  def parse_error(io); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#196
  def parse_integer(io); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#174
  def parse_map(io); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#213
  def parse_null(io); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#182
  def parse_push(io); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#186
  def parse_sequence(io, size); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#170
  def parse_set(io); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#145
  def parse_string(io); end

  # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#227
  def parse_verbatim_string(io); end

  class << self
    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#36
    def dump(command, buffer = T.unsafe(nil)); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#57
    def dump_any(object, buffer); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#68
    def dump_array(array, buffer); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#84
    def dump_hash(hash, buffer); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#93
    def dump_numeric(numeric, buffer); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#76
    def dump_set(set, buffer); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#97
    def dump_string(string, buffer); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#103
    def dump_symbol(symbol, buffer); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#49
    def load(io); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#53
    def new_buffer; end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#112
    def parse(io); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#166
    def parse_array(io); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#218
    def parse_blob(io); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#155
    def parse_boolean(io); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#200
    def parse_double(io); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#151
    def parse_error(io); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#196
    def parse_integer(io); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#174
    def parse_map(io); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#213
    def parse_null(io); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#182
    def parse_push(io); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#186
    def parse_sequence(io, size); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#170
    def parse_set(io); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#145
    def parse_string(io); end

    # source://redis-client//lib/redis_client/ruby_connection/resp3.rb#227
    def parse_verbatim_string(io); end
  end
end

# source://redis-client//lib/redis_client/ruby_connection/resp3.rb#13
RedisClient::RESP3::DUMP_TYPES = T.let(T.unsafe(nil), Hash)

# source://redis-client//lib/redis_client/ruby_connection/resp3.rb#11
RedisClient::RESP3::EOL = T.let(T.unsafe(nil), String)

# source://redis-client//lib/redis_client/ruby_connection/resp3.rb#12
RedisClient::RESP3::EOL_SIZE = T.let(T.unsafe(nil), Integer)

# source://redis-client//lib/redis_client/ruby_connection/resp3.rb#7
class RedisClient::RESP3::Error < ::RedisClient::Error; end

# source://redis-client//lib/redis_client/ruby_connection/resp3.rb#34
RedisClient::RESP3::INTEGER_RANGE = T.let(T.unsafe(nil), Range)

# source://redis-client//lib/redis_client/ruby_connection/resp3.rb#19
RedisClient::RESP3::PARSER_TYPES = T.let(T.unsafe(nil), Hash)

# source://redis-client//lib/redis_client/ruby_connection/resp3.rb#9
class RedisClient::RESP3::SyntaxError < ::RedisClient::RESP3::Error; end

# source://redis-client//lib/redis_client/ruby_connection/resp3.rb#8
class RedisClient::RESP3::UnknownType < ::RedisClient::RESP3::Error; end

# source://redis-client//lib/redis_client.rb#205
class RedisClient::ReadOnlyError < ::RedisClient::ConnectionError
  include ::RedisClient::HasCommand
  include ::RedisClient::HasCode
end

# source://redis-client//lib/redis_client.rb#157
class RedisClient::ReadTimeoutError < ::RedisClient::TimeoutError; end

# source://redis-client//lib/redis_client.rb#102
module RedisClient::Retriable
  # source://redis-client//lib/redis_client.rb#103
  def _set_retry_attempt(retry_attempt); end

  # @return [Boolean]
  #
  # source://redis-client//lib/redis_client.rb#115
  def final?; end

  # @return [Boolean]
  #
  # source://redis-client//lib/redis_client.rb#111
  def retriable?; end

  # source://redis-client//lib/redis_client.rb#107
  def retry_attempt; end
end

# source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#6
class RedisClient::RubyConnection
  include ::RedisClient::ConnectionMixin

  # @return [RubyConnection] a new instance of RubyConnection
  #
  # source://redis-client//lib/redis_client/ruby_connection.rb#43
  def initialize(config, connect_timeout:, read_timeout:, write_timeout:); end

  # source://redis-client//lib/redis_client/ruby_connection.rb#55
  def close; end

  # @return [Boolean]
  #
  # source://redis-client//lib/redis_client/ruby_connection.rb#51
  def connected?; end

  # source://redis-client//lib/redis_client/ruby_connection.rb#107
  def measure_round_trip_delay; end

  # source://redis-client//lib/redis_client/ruby_connection.rb#95
  def read(timeout = T.unsafe(nil)); end

  # source://redis-client//lib/redis_client/ruby_connection.rb#60
  def read_timeout=(timeout); end

  # source://redis-client//lib/redis_client/ruby_connection.rb#70
  def write(command); end

  # source://redis-client//lib/redis_client/ruby_connection.rb#83
  def write_multi(commands); end

  # source://redis-client//lib/redis_client/ruby_connection.rb#65
  def write_timeout=(timeout); end

  private

  # source://redis-client//lib/redis_client/ruby_connection.rb#115
  def connect; end

  # unknown
  #
  # source://redis-client//lib/redis_client/ruby_connection.rb#179
  def enable_socket_keep_alive(socket); end

  class << self
    # source://redis-client//lib/redis_client/ruby_connection.rb#14
    def ssl_context(ssl_params); end
  end
end

# source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#7
class RedisClient::RubyConnection::BufferedIO
  # @return [BufferedIO] a new instance of BufferedIO
  #
  # source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#16
  def initialize(io, read_timeout:, write_timeout:, chunk_size: T.unsafe(nil)); end

  # source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#89
  def close; end

  # @return [Boolean]
  #
  # source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#93
  def closed?; end

  # @return [Boolean]
  #
  # source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#97
  def eof?; end

  # source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#150
  def getbyte; end

  # source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#26
  def gets_chomp; end

  # source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#159
  def gets_integer; end

  # source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#37
  def read_chomp(bytes); end

  # Returns the value of attribute read_timeout.
  #
  # source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#11
  def read_timeout; end

  # Sets the attribute read_timeout
  #
  # @param value the value to set the attribute read_timeout to.
  #
  # source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#11
  def read_timeout=(_arg0); end

  # source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#121
  def skip(offset); end

  # source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#101
  def with_timeout(new_timeout); end

  # source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#127
  def write(string); end

  # Returns the value of attribute write_timeout.
  #
  # source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#11
  def write_timeout; end

  # Sets the attribute write_timeout
  #
  # @param value the value to set the attribute write_timeout to.
  #
  # source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#11
  def write_timeout=(_arg0); end

  private

  # source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#44
  def ensure_line; end

  # source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#184
  def ensure_remaining(bytes); end

  # source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#191
  def fill_buffer(strict, size = T.unsafe(nil)); end
end

# source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#14
RedisClient::RubyConnection::BufferedIO::ENCODING = T.let(T.unsafe(nil), Encoding)

# source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#8
RedisClient::RubyConnection::BufferedIO::EOL = T.let(T.unsafe(nil), String)

# source://redis-client//lib/redis_client/ruby_connection/buffered_io.rb#9
RedisClient::RubyConnection::BufferedIO::EOL_SIZE = T.let(T.unsafe(nil), Integer)

# Same as hiredis defaults
#
# source://redis-client//lib/redis_client/ruby_connection.rb#164
RedisClient::RubyConnection::KEEP_ALIVE_INTERVAL = T.let(T.unsafe(nil), Integer)

# source://redis-client//lib/redis_client/ruby_connection.rb#166
RedisClient::RubyConnection::KEEP_ALIVE_PROBES = T.let(T.unsafe(nil), Integer)

# Longer than hiredis defaults
#
# source://redis-client//lib/redis_client/ruby_connection.rb#165
RedisClient::RubyConnection::KEEP_ALIVE_TTL = T.let(T.unsafe(nil), Integer)

# source://redis-client//lib/redis_client/ruby_connection.rb#41
RedisClient::RubyConnection::SUPPORTS_RESOLV_TIMEOUT = T.let(T.unsafe(nil), TrueClass)

# source://redis-client//lib/redis_client/sentinel_config.rb#4
class RedisClient::SentinelConfig
  include ::RedisClient::Config::Common

  # @return [SentinelConfig] a new instance of SentinelConfig
  #
  # source://redis-client//lib/redis_client/sentinel_config.rb#12
  def initialize(sentinels:, sentinel_password: T.unsafe(nil), sentinel_username: T.unsafe(nil), role: T.unsafe(nil), name: T.unsafe(nil), url: T.unsafe(nil), **client_config); end

  # source://redis-client//lib/redis_client/sentinel_config.rb#110
  def check_role!(role); end

  # source://redis-client//lib/redis_client/sentinel_config.rb#89
  def host; end

  # Returns the value of attribute name.
  #
  # source://redis-client//lib/redis_client/sentinel_config.rb#10
  def name; end

  # source://redis-client//lib/redis_client/sentinel_config.rb#97
  def path; end

  # source://redis-client//lib/redis_client/sentinel_config.rb#93
  def port; end

  # source://redis-client//lib/redis_client/sentinel_config.rb#79
  def reset; end

  # @return [Boolean]
  #
  # source://redis-client//lib/redis_client/sentinel_config.rb#124
  def resolved?; end

  # @return [Boolean]
  #
  # source://redis-client//lib/redis_client/sentinel_config.rb#101
  def retry_connecting?(attempt, error); end

  # @return [Boolean]
  #
  # source://redis-client//lib/redis_client/sentinel_config.rb#106
  def sentinel?; end

  # source://redis-client//lib/redis_client/sentinel_config.rb#73
  def sentinels; end

  # source://redis-client//lib/redis_client/sentinel_config.rb#85
  def server_key; end

  private

  # source://redis-client//lib/redis_client/sentinel_config.rb#143
  def config; end

  # source://redis-client//lib/redis_client/sentinel_config.rb#190
  def each_sentinel; end

  # source://redis-client//lib/redis_client/sentinel_config.rb#216
  def refresh_sentinels(sentinel_client); end

  # source://redis-client//lib/redis_client/sentinel_config.rb#153
  def resolve_master; end

  # source://redis-client//lib/redis_client/sentinel_config.rb#172
  def resolve_replica; end

  # source://redis-client//lib/redis_client/sentinel_config.rb#168
  def sentinel_client(sentinel_config); end

  # source://redis-client//lib/redis_client/sentinel_config.rb#132
  def sentinels_to_configs(sentinels); end
end

# source://redis-client//lib/redis_client/sentinel_config.rb#8
RedisClient::SentinelConfig::DEFAULT_RECONNECT_ATTEMPTS = T.let(T.unsafe(nil), Integer)

# source://redis-client//lib/redis_client/sentinel_config.rb#7
RedisClient::SentinelConfig::SENTINEL_DELAY = T.let(T.unsafe(nil), Float)

# source://redis-client//lib/redis_client.rb#156
class RedisClient::TimeoutError < ::RedisClient::ConnectionError; end

# source://redis-client//lib/redis_client/url_config.rb#6
class RedisClient::URLConfig
  # @return [URLConfig] a new instance of URLConfig
  #
  # source://redis-client//lib/redis_client/url_config.rb#9
  def initialize(url); end

  # source://redis-client//lib/redis_client/url_config.rb#30
  def db; end

  # source://redis-client//lib/redis_client/url_config.rb#56
  def host; end

  # source://redis-client//lib/redis_client/url_config.rb#48
  def password; end

  # source://redis-client//lib/redis_client/url_config.rb#62
  def path; end

  # source://redis-client//lib/redis_client/url_config.rb#68
  def port; end

  # @return [Boolean]
  #
  # source://redis-client//lib/redis_client/url_config.rb#26
  def ssl?; end

  # Returns the value of attribute uri.
  #
  # source://redis-client//lib/redis_client/url_config.rb#7
  def uri; end

  # Returns the value of attribute url.
  #
  # source://redis-client//lib/redis_client/url_config.rb#7
  def url; end

  # source://redis-client//lib/redis_client/url_config.rb#44
  def username; end
end

# source://redis-client//lib/redis_client.rb#149
class RedisClient::UnsupportedServer < ::RedisClient::Error; end

# source://redis-client//lib/redis_client/version.rb#4
RedisClient::VERSION = T.let(T.unsafe(nil), String)

# source://redis-client//lib/redis_client.rb#158
class RedisClient::WriteTimeoutError < ::RedisClient::TimeoutError; end

# source://redis-client//lib/redis_client.rb#201
class RedisClient::WrongTypeError < ::RedisClient::CommandError; end
