# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activemodel-serializers-xml` gem.
# Please instead update this file by running `bin/tapioca gem activemodel-serializers-xml`.

# typed: true

module ActiveModel
  extend ::ActiveSupport::Autoload

  class << self
    def eager_load!; end
    def gem_version; end
    def version; end
  end
end

module ActiveModel::Serializers
  extend ::ActiveSupport::Autoload
end

ActiveModel::Serializers::VERSION = T.let(T.unsafe(nil), String)

module ActiveModel::Serializers::Xml
  include ::ActiveModel::Serialization
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveModel::Naming

  # Sets the model +attributes+ from an XML string. Returns +self+.
  #
  # class Person
  # include ActiveModel::Serializers::Xml
  #
  # attr_accessor :name, :age, :awesome
  #
  # def attributes=(hash)
  # hash.each do |key, value|
  # instance_variable_set("@#{key}", value)
  # end
  # end
  #
  # def attributes
  # instance_values
  # end
  # end
  #
  # xml = { name: 'bob', age: 22, awesome:true }.to_xml
  # person = Person.new
  # person.from_xml(xml) # => #<Person:0x007fec5e3b3c40 @age=22, @awesome=true, @name="bob">
  # person.name          # => "bob"
  # person.age           # => 22
  # person.awesome       # => true
  def from_xml(xml); end

  # Returns XML representing the model. Configuration can be
  # passed through +options+.
  #
  # Without any +options+, the returned XML string will include all the
  # model's attributes.
  #
  # user = User.find(1)
  # user.to_xml
  #
  # <?xml version="1.0" encoding="UTF-8"?>
  # <user>
  # <id type="integer">1</id>
  # <name>David</name>
  # <age type="integer">16</age>
  # <created-at type="dateTime">2011-01-30T22:29:23Z</created-at>
  # </user>
  #
  # The <tt>:only</tt> and <tt>:except</tt> options can be used to limit the
  # attributes included, and work similar to the +attributes+ method.
  #
  # To include the result of some method calls on the model use <tt>:methods</tt>.
  #
  # To include associations use <tt>:include</tt>.
  #
  # For further documentation, see <tt>ActiveRecord::Serialization#to_xml</tt>
  def to_xml(options = T.unsafe(nil), &block); end
end

class ActiveModel::Serializers::Xml::Serializer
  def initialize(serializable, options = T.unsafe(nil)); end

  # Returns the value of attribute options.
  def options; end

  def serializable_collection; end
  def serializable_hash; end
  def serialize; end

  private

  # TODO: This can likely be cleaned up to simple use ActiveSupport::XmlMini.to_tag as well.
  def add_associations(association, records, opts); end

  def add_attributes_and_methods; end
  def add_extra_behavior; end
  def add_includes; end
  def add_procs; end
end

class ActiveModel::Serializers::Xml::Serializer::Attribute
  def initialize(name, serializable, value); end

  def decorations; end

  # Returns the value of attribute name.
  def name; end

  # Returns the value of attribute type.
  def type; end

  # Returns the value of attribute value.
  def value; end

  protected

  def compute_type; end
end

class ActiveModel::Serializers::Xml::Serializer::MethodAttribute < ::ActiveModel::Serializers::Xml::Serializer::Attribute; end

module ActiveRecord
  extend ::ActiveSupport::Autoload

  class << self
    def eager_load!; end
    def gem_version; end
    def version; end
  end
end

module ActiveRecord::Serialization
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveModel::Serializers::JSON
  include ::ActiveModel::Serializers::Xml

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Naming

  def serializable_hash(options = T.unsafe(nil)); end

  # Builds an XML document to represent the model. Some configuration is
  # available through +options+. However more complicated cases should
  # override ActiveRecord::Base#to_xml.
  #
  # By default the generated XML document will include the processing
  # instruction and all the object's attributes. For example:
  #
  # <?xml version="1.0" encoding="UTF-8"?>
  # <topic>
  # <title>The First Topic</title>
  # <author-name>David</author-name>
  # <id type="integer">1</id>
  # <approved type="boolean">false</approved>
  # <replies-count type="integer">0</replies-count>
  # <bonus-time type="dateTime">2000-01-01T08:28:00+12:00</bonus-time>
  # <written-on type="dateTime">2003-07-16T09:28:00+1200</written-on>
  # <content>Have a nice day</content>
  # <author-email-address>david@loudthinking.com</author-email-address>
  # <parent-id></parent-id>
  # <last-read type="date">2004-04-15</last-read>
  # </topic>
  #
  # This behavior can be controlled with <tt>:only</tt>, <tt>:except</tt>,
  # <tt>:skip_instruct</tt>, <tt>:skip_types</tt>, <tt>:dasherize</tt> and <tt>:camelize</tt> .
  # The <tt>:only</tt> and <tt>:except</tt> options are the same as for the
  # +attributes+ method. The default is to dasherize all column names, but you
  # can disable this setting <tt>:dasherize</tt> to +false+. Setting <tt>:camelize</tt>
  # to +true+ will camelize all column names - this also overrides <tt>:dasherize</tt>.
  # To not have the column type included in the XML output set <tt>:skip_types</tt> to +true+.
  #
  # For instance:
  #
  # topic.to_xml(skip_instruct: true, except: [ :id, :bonus_time, :written_on, :replies_count ])
  #
  # <topic>
  # <title>The First Topic</title>
  # <author-name>David</author-name>
  # <approved type="boolean">false</approved>
  # <content>Have a nice day</content>
  # <author-email-address>david@loudthinking.com</author-email-address>
  # <parent-id></parent-id>
  # <last-read type="date">2004-04-15</last-read>
  # </topic>
  #
  # To include first level associations use <tt>:include</tt>:
  #
  # firm.to_xml include: [ :account, :clients ]
  #
  # <?xml version="1.0" encoding="UTF-8"?>
  # <firm>
  # <id type="integer">1</id>
  # <rating type="integer">1</rating>
  # <name>37signals</name>
  # <clients type="array">
  # <client>
  # <rating type="integer">1</rating>
  # <name>Summit</name>
  # </client>
  # <client>
  # <rating type="integer">1</rating>
  # <name>Microsoft</name>
  # </client>
  # </clients>
  # <account>
  # <id type="integer">1</id>
  # <credit-limit type="integer">50</credit-limit>
  # </account>
  # </firm>
  #
  # Additionally, the record being serialized will be passed to a Proc's second
  # parameter. This allows for ad hoc additions to the resultant document that
  # incorporate the context of the record being serialized. And by leveraging the
  # closure created by a Proc, to_xml can be used to add elements that normally fall
  # outside of the scope of the model -- for example, generating and appending URLs
  # associated with models.
  #
  # proc = Proc.new { |options, record| options[:builder].tag!('name-reverse', record.name.reverse) }
  # firm.to_xml procs: [ proc ]
  #
  # <firm>
  # # ... normal attributes as shown above ...
  # <name-reverse>slangis73</name-reverse>
  # </firm>
  #
  # To include deeper levels of associations pass a hash like this:
  #
  # firm.to_xml include: {account: {}, clients: {include: :address}}
  # <?xml version="1.0" encoding="UTF-8"?>
  # <firm>
  # <id type="integer">1</id>
  # <rating type="integer">1</rating>
  # <name>37signals</name>
  # <clients type="array">
  # <client>
  # <rating type="integer">1</rating>
  # <name>Summit</name>
  # <address>
  # ...
  # </address>
  # </client>
  # <client>
  # <rating type="integer">1</rating>
  # <name>Microsoft</name>
  # <address>
  # ...
  # </address>
  # </client>
  # </clients>
  # <account>
  # <id type="integer">1</id>
  # <credit-limit type="integer">50</credit-limit>
  # </account>
  # </firm>
  #
  # To include any methods on the model being called use <tt>:methods</tt>:
  #
  # firm.to_xml methods: [ :calculated_earnings, :real_earnings ]
  #
  # <firm>
  # # ... normal attributes as shown above ...
  # <calculated-earnings>100000000000000000</calculated-earnings>
  # <real-earnings>5</real-earnings>
  # </firm>
  #
  # To call any additional Procs use <tt>:procs</tt>. The Procs are passed a
  # modified version of the options hash that was given to +to_xml+:
  #
  # proc = Proc.new { |options| options[:builder].tag!('abc', 'def') }
  # firm.to_xml procs: [ proc ]
  #
  # <firm>
  # # ... normal attributes as shown above ...
  # <abc>def</abc>
  # </firm>
  #
  # Alternatively, you can yield the builder object as part of the +to_xml+ call:
  #
  # firm.to_xml do |xml|
  # xml.creator do
  # xml.first_name "David"
  # xml.last_name "Heinemeier Hansson"
  # end
  # end
  #
  # <firm>
  # # ... normal attributes as shown above ...
  # <creator>
  # <first_name>David</first_name>
  # <last_name>Heinemeier Hansson</last_name>
  # </creator>
  # </firm>
  #
  # As noted above, you may override +to_xml+ in your ActiveRecord::Base
  # subclasses to have complete control about what's generated. The general
  # form of doing this is:
  #
  # class IHaveMyOwnXML < ActiveRecord::Base
  # def to_xml(options = {})
  # require 'builder'
  # options[:indent] ||= 2
  # xml = options[:builder] ||= ::Builder::XmlMarkup.new(indent: options[:indent])
  # xml.instruct! unless options[:skip_instruct]
  # xml.level_one do
  # xml.tag!(:second_level, 'content')
  # end
  # end
  # end
  def to_xml(options = T.unsafe(nil), &block); end

  module GeneratedClassMethods
    def include_root_in_json; end
    def include_root_in_json=(value); end
    def include_root_in_json?; end
  end

  module GeneratedInstanceMethods
    def include_root_in_json; end
    def include_root_in_json?; end
  end
end

ActiveRecord::UnknownAttributeError = ActiveModel::UnknownAttributeError
class ActiveRecord::XmlSerializer < ::ActiveModel::Serializers::Xml::Serializer; end

class ActiveRecord::XmlSerializer::Attribute < ::ActiveModel::Serializers::Xml::Serializer::Attribute
  protected

  def compute_type; end
end
