# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activestorage` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module ActiveStorage
  extend(::ActiveSupport::Autoload)

  def analyzers; end
  def analyzers=(obj); end
  def binary_content_type; end
  def binary_content_type=(obj); end
  def content_types_allowed_inline; end
  def content_types_allowed_inline=(obj); end
  def content_types_to_serve_as_binary; end
  def content_types_to_serve_as_binary=(obj); end
  def logger; end
  def logger=(obj); end
  def paths; end
  def paths=(obj); end
  def previewers; end
  def previewers=(obj); end
  def queue; end
  def queue=(obj); end
  def variable_content_types; end
  def variable_content_types=(obj); end
  def verifier; end
  def verifier=(obj); end

  class << self
    def analyzers; end
    def analyzers=(obj); end
    def binary_content_type; end
    def binary_content_type=(obj); end
    def content_types_allowed_inline; end
    def content_types_allowed_inline=(obj); end
    def content_types_to_serve_as_binary; end
    def content_types_to_serve_as_binary=(obj); end
    def gem_version; end
    def logger; end
    def logger=(obj); end
    def paths; end
    def paths=(obj); end
    def previewers; end
    def previewers=(obj); end
    def queue; end
    def queue=(obj); end
    def railtie_helpers_paths; end
    def railtie_namespace; end
    def railtie_routes_url_helpers(include_path_helpers = _); end
    def table_name_prefix; end
    def use_relative_model_naming?; end
    def variable_content_types; end
    def variable_content_types=(obj); end
    def verifier; end
    def verifier=(obj); end
    def version; end
  end
end

class ActiveStorage::AnalyzeJob < ::ActiveStorage::BaseJob
  def perform(blob); end
end

class ActiveStorage::Analyzer
  include(::ActiveStorage::Downloading)

  def initialize(blob); end

  def blob; end
  def metadata; end

  private

  def logger; end

  class << self
    def accept?(blob); end
  end
end

class ActiveStorage::Analyzer::ImageAnalyzer < ::ActiveStorage::Analyzer
  def metadata; end

  private

  def read_image; end
  def rotated_image?(image); end

  class << self
    def accept?(blob); end
  end
end

class ActiveStorage::Analyzer::NullAnalyzer < ::ActiveStorage::Analyzer
  def metadata; end

  class << self
    def accept?(blob); end
  end
end

class ActiveStorage::Analyzer::VideoAnalyzer < ::ActiveStorage::Analyzer
  def metadata; end

  private

  def angle; end
  def computed_height; end
  def display_aspect_ratio; end
  def display_height_scale; end
  def duration; end
  def encoded_height; end
  def encoded_width; end
  def ffprobe_path; end
  def height; end
  def probe; end
  def probe_from(file); end
  def rotated?; end
  def streams; end
  def tags; end
  def video_stream; end
  def width; end

  class << self
    def accept?(blob); end
  end
end

class ActiveStorage::Attached
  def initialize(name, record, dependent:); end

  def dependent; end
  def name; end
  def record; end

  private

  def create_blob_from(attachable); end
end

module ActiveStorage::Attached::Macros
  def has_many_attached(name, dependent: _); end
  def has_one_attached(name, dependent: _); end
end

class ActiveStorage::Attached::Many < ::ActiveStorage::Attached
  def attach(*attachables); end
  def attached?; end
  def attachments; end
  def detach; end
  def method_missing(method, *args, &block); end

  private

  def respond_to_missing?(name, include_private = _); end
end

class ActiveStorage::Attached::One < ::ActiveStorage::Attached
  def attach(attachable); end
  def attached?; end
  def attachment; end
  def detach; end
  def method_missing(method, *args, &block); end
  def purge; end
  def purge_later; end
  def transaction(*args, &block); end

  private

  def build_attachment(blob:); end
  def respond_to_missing?(name, include_private = _); end
  def write_attachment(attachment); end
end

class ActiveStorage::Attachment < ::ActiveRecord::Base
  def autosave_associated_records_for_blob(*args); end
  def autosave_associated_records_for_record(*args); end
  def belongs_to_counter_cache_after_update(reflection); end
  def method_missing(method, *args, &block); end
  def purge; end
  def purge_later; end

  private

  def analyze_blob_later; end
  def counter_cache_target(reflection, model, foreign_key); end
  def identify_blob; end
  def respond_to_missing?(name, include_private = _); end

  class << self
    def __callbacks; end
    def _reflections; end
    def _validators; end
    def attribute_type_decorations; end
    def defined_enums; end
  end
end

class ActiveStorage::BaseController < ::ActionController::Base

  private

  def _layout(formats); end

  class << self
    def __callbacks; end
    def _helpers; end
    def middleware_stack; end
  end
end

class ActiveStorage::BaseJob < ::ActiveJob::Base
  class << self
    def queue_name; end
  end
end

class ActiveStorage::Blob < ::ActiveRecord::Base
  class << self
    def _validators; end
    def attribute_type_decorations; end
    def defined_enums; end
  end
end

module ActiveStorage::Blob::Analyzable
  def analyze; end
  def analyze_later; end
  def analyzed?; end

  private

  def analyzer; end
  def analyzer_class; end
  def extract_metadata_via_analyzer; end
end

module ActiveStorage::Blob::Identifiable
  def identified?; end
  def identify; end

  private

  def download_identifiable_chunk; end
  def identify_content_type; end
  def update_service_metadata; end
end

module ActiveStorage::Blob::Representable
  extend(::ActiveSupport::Concern)

  def preview(transformations); end
  def previewable?; end
  def representable?; end
  def representation(transformations); end
  def variable?; end
  def variant(transformations); end
end

class ActiveStorage::BlobsController < ::ActiveStorage::BaseController
  include(::ActiveStorage::SetBlob)

  def show; end

  private

  def _layout(formats); end

  class << self
    def __callbacks; end
    def _helpers; end
    def middleware_stack; end
  end
end

class ActiveStorage::Current < ::ActiveSupport::CurrentAttributes
  class << self
    def host; end
    def host=(attribute); end
  end
end

class ActiveStorage::DirectUploadsController < ::ActiveStorage::BaseController
  def create; end

  private

  def _layout(formats); end
  def blob_args; end
  def direct_upload_json(blob); end

  class << self
    def _helpers; end
    def middleware_stack; end
  end
end

class ActiveStorage::DiskController < ::ActiveStorage::BaseController
  def show; end
  def update; end

  private

  def _layout(formats); end
  def acceptable_content?(token); end
  def decode_verified_key; end
  def decode_verified_token; end
  def disk_service; end
  def serve_file(path, content_type:, disposition:); end

  class << self
    def __callbacks; end
    def _helpers; end
    def middleware_stack; end
  end
end

module ActiveStorage::Downloading

  private

  def download_blob_to(file); end
  def download_blob_to_tempfile; end
  def open_tempfile_for_blob; end
  def tempdir; end
end

class ActiveStorage::Engine < ::Rails::Engine
end

class ActiveStorage::Filename
end

class ActiveStorage::Filename::Parameters
  def initialize(filename); end

  def ascii; end
  def combined; end
  def filename; end
  def to_s; end
  def utf8; end

  private

  def percent_escape(string, pattern); end
end

ActiveStorage::Filename::Parameters::RFC_5987_ESCAPED_CHAR = T.let(T.unsafe(nil), Regexp)

ActiveStorage::Filename::Parameters::TRADITIONAL_ESCAPED_CHAR = T.let(T.unsafe(nil), Regexp)

class ActiveStorage::InvariableError < ::StandardError
end

class ActiveStorage::Preview
  def initialize(blob, variation_or_variation_key); end

  def blob; end
  def image; end
  def processed; end
  def service_url(**options); end
  def variation; end

  private

  def previewer; end
  def previewer_class; end
  def process; end
  def processed?; end
  def variant; end
end

class ActiveStorage::Preview::UnprocessedError < ::StandardError
end

class ActiveStorage::Previewer
  include(::ActiveStorage::Downloading)

  def initialize(blob); end

  def blob; end
  def preview; end

  private

  def capture(*argv, to:); end
  def draw(*argv); end
  def logger; end
  def open_tempfile_for_drawing; end

  class << self
    def accept?(blob); end
  end
end

class ActiveStorage::Previewer::MuPDFPreviewer < ::ActiveStorage::Previewer
  def preview; end

  private

  def draw_first_page_from(file, &block); end

  class << self
    def accept?(blob); end
    def mutool_exists?; end
    def mutool_path; end
  end
end

class ActiveStorage::Previewer::PopplerPDFPreviewer < ::ActiveStorage::Previewer
  def preview; end

  private

  def draw_first_page_from(file, &block); end

  class << self
    def accept?(blob); end
    def pdftoppm_exists?; end
    def pdftoppm_path; end
  end
end

class ActiveStorage::Previewer::VideoPreviewer < ::ActiveStorage::Previewer
  def preview; end

  private

  def draw_relevant_frame_from(file, &block); end
  def ffmpeg_path; end

  class << self
    def accept?(blob); end
  end
end

class ActiveStorage::PurgeJob < ::ActiveStorage::BaseJob
  def perform(blob); end

  class << self
    def rescue_handlers; end
  end
end

class ActiveStorage::RepresentationsController < ::ActiveStorage::BaseController
  include(::ActiveStorage::SetBlob)

  def show; end

  private

  def _layout(formats); end

  class << self
    def __callbacks; end
    def _helpers; end
    def middleware_stack; end
  end
end

class ActiveStorage::Service
  extend(::ActiveSupport::Autoload)

  def delete(key); end
  def delete_prefixed(prefix); end
  def download(key); end
  def download_chunk(key, range); end
  def exist?(key); end
  def headers_for_direct_upload(key, filename:, content_type:, content_length:, checksum:); end
  def update_metadata(key, **metadata); end
  def upload(key, io, checksum: _, **options); end
  def url(key, expires_in:, disposition:, filename:, content_type:); end
  def url_expires_in; end
  def url_expires_in=(val); end
  def url_expires_in?; end
  def url_for_direct_upload(key, expires_in:, content_type:, content_length:, checksum:); end

  private

  def content_disposition_with(filename:, type: _); end
  def instrument(operation, payload = _, &block); end
  def service_name; end

  class << self
    def build(configurator:, service: _, **service_config); end
    def configure(service_name, configurations); end
    def url_expires_in; end
    def url_expires_in=(val); end
    def url_expires_in?; end
  end
end

class ActiveStorage::Service::Configurator
  def initialize(configurations); end

  def build(service_name); end
  def configurations; end

  private

  def config_for(name); end
  def resolve(class_name); end

  class << self
    def build(service_name, configurations); end
  end
end

module ActiveStorage::SetBlob
  extend(::ActiveSupport::Concern)


  private

  def set_blob; end
end

class ActiveStorage::UnpreviewableError < ::StandardError
end

class ActiveStorage::UnrepresentableError < ::StandardError
end

module ActiveStorage::VERSION
end

ActiveStorage::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

ActiveStorage::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

ActiveStorage::VERSION::PRE = T.let(T.unsafe(nil), String)

ActiveStorage::VERSION::STRING = T.let(T.unsafe(nil), String)

ActiveStorage::VERSION::TINY = T.let(T.unsafe(nil), Integer)

class ActiveStorage::Variant
  include(::ActiveStorage::Downloading)

  def initialize(blob, variation_or_variation_key); end

  def blob; end
  def image; end
  def key; end
  def processed; end
  def service(*args, &block); end
  def service_url(expires_in: _, disposition: _); end
  def variation; end

  private

  def content_type; end
  def download_image; end
  def filename; end
  def format(image); end
  def open_image(&block); end
  def process; end
  def processed?; end
  def transform(image); end
  def upload(image); end
end

ActiveStorage::Variant::WEB_IMAGE_CONTENT_TYPES = T.let(T.unsafe(nil), Array)

class ActiveStorage::Variation
  def initialize(transformations); end

  def key; end
  def transform(image); end
  def transformations; end

  private

  def eligible_argument?(argument); end
  def pass_transform_argument(command, method, argument); end

  class << self
    def decode(key); end
    def encode(transformations); end
    def wrap(variator); end
  end
end

class ActiveStorage::IntegrityError < ::StandardError
end

class ActiveStorage::LogSubscriber < ::ActiveSupport::LogSubscriber
  def logger; end
  def service_delete(event); end
  def service_delete_prefixed(event); end
  def service_download(event); end
  def service_exist(event); end
  def service_streaming_download(event); end
  def service_upload(event); end
  def service_url(event); end

  private

  def debug(event, colored_message); end
  def info(event, colored_message); end
  def key_in(event); end
  def log_prefix_for_service(event); end
end
