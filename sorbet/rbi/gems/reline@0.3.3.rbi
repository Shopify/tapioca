# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `reline` gem.
# Please instead update this file by running `bin/tapioca gem reline`.

# source://reline//lib/reline/version.rb#1
module Reline
  extend ::Forwardable
  extend ::SingleForwardable

  class << self
    # source://reline//lib/reline.rb#560
    def core; end

    # source://reline//lib/reline.rb#556
    def encoding_system_needs; end

    # source://reline//lib/reline.rb#537
    def insert_text(*args, &block); end

    # source://reline//lib/reline.rb#580
    def line_editor; end

    # source://reline//lib/reline.rb#576
    def ungetc(c); end
  end
end

# source://reline//lib/reline/ansi.rb#6
class Reline::ANSI
  class << self
    # source://reline//lib/reline/ansi.rb#339
    def clear_screen; end

    # source://reline//lib/reline/ansi.rb#251
    def cursor_pos; end

    # source://reline//lib/reline/ansi.rb#354
    def deprep(otio); end

    # @return [Boolean]
    #
    # source://reline//lib/reline/ansi.rb#212
    def empty_buffer?; end

    # source://reline//lib/reline/ansi.rb#27
    def encoding; end

    # source://reline//lib/reline/ansi.rb#330
    def erase_after_cursor; end

    # source://reline//lib/reline/ansi.rb#234
    def get_screen_size; end

    # source://reline//lib/reline/ansi.rb#200
    def getc; end

    # source://reline//lib/reline/ansi.rb#171
    def getc_with_bracketed_paste; end

    # source://reline//lib/reline/ansi.rb#306
    def hide_cursor; end

    # @return [Boolean]
    #
    # source://reline//lib/reline/ansi.rb#208
    def in_pasting?; end

    # source://reline//lib/reline/ansi.rb#153
    def inner_getc; end

    # source://reline//lib/reline/ansi.rb#139
    def input=(val); end

    # source://reline//lib/reline/ansi.rb#286
    def move_cursor_column(x); end

    # source://reline//lib/reline/ansi.rb#298
    def move_cursor_down(x); end

    # source://reline//lib/reline/ansi.rb#290
    def move_cursor_up(x); end

    # source://reline//lib/reline/ansi.rb#144
    def output=(val); end

    # source://reline//lib/reline/ansi.rb#349
    def prep; end

    # source://reline//lib/reline/ansi.rb#223
    def retrieve_keybuffer; end

    # source://reline//lib/reline/ansi.rb#334
    def scroll_down(x); end

    # source://reline//lib/reline/ansi.rb#35
    def set_default_key_bindings(config, allow_terminfo: T.unsafe(nil)); end

    # source://reline//lib/reline/ansi.rb#91
    def set_default_key_bindings_comprehensive_list(config); end

    # source://reline//lib/reline/ansi.rb#67
    def set_default_key_bindings_terminfo(config); end

    # source://reline//lib/reline/ansi.rb#244
    def set_screen_size(rows, columns); end

    # source://reline//lib/reline/ansi.rb#345
    def set_winch_handler(&handler); end

    # source://reline//lib/reline/ansi.rb#318
    def show_cursor; end

    # source://reline//lib/reline/ansi.rb#219
    def ungetc(c); end

    # @return [Boolean]
    #
    # source://reline//lib/reline/ansi.rb#31
    def win?; end

    # source://reline//lib/reline/ansi.rb#148
    def with_raw_input; end
  end
end

# source://reline//lib/reline/ansi.rb#7
Reline::ANSI::CAPNAME_KEY_BINDINGS = T.let(T.unsafe(nil), Hash)

# source://reline//lib/reline/ansi.rb#170
Reline::ANSI::END_BRACKETED_PASTE = T.let(T.unsafe(nil), String)

# source://reline//lib/reline/ansi.rb#169
Reline::ANSI::START_BRACKETED_PASTE = T.let(T.unsafe(nil), String)

# source://reline//lib/reline/config.rb#1
class Reline::Config
  # @return [Config] a new instance of Config
  #
  # source://reline//lib/reline/config.rb#50
  def initialize; end

  # source://reline//lib/reline/config.rb#172
  def add_default_key_binding(keystroke, target); end

  # source://reline//lib/reline/config.rb#168
  def add_default_key_binding_by_keymap(keymap, keystroke, target); end

  # source://reline//lib/reline/config.rb#160
  def add_oneshot_key_binding(keystroke, target); end

  # Returns the value of attribute autocompletion.
  #
  # source://reline//lib/reline/config.rb#48
  def autocompletion; end

  # Sets the attribute autocompletion
  #
  # @param value the value to set the attribute autocompletion to.
  #
  # source://reline//lib/reline/config.rb#48
  def autocompletion=(_arg0); end

  # source://reline//lib/reline/config.rb#342
  def bind_key(key, func_name); end

  # source://reline//lib/reline/config.rb#45
  def bind_tty_special_chars; end

  # source://reline//lib/reline/config.rb#45
  def bind_tty_special_chars=(_arg0); end

  # source://reline//lib/reline/config.rb#259
  def bind_variable(name, value); end

  # source://reline//lib/reline/config.rb#45
  def blink_matching_paren; end

  # source://reline//lib/reline/config.rb#45
  def blink_matching_paren=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def byte_oriented; end

  # source://reline//lib/reline/config.rb#45
  def byte_oriented=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def completion_ignore_case; end

  # source://reline//lib/reline/config.rb#45
  def completion_ignore_case=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def convert_meta; end

  # source://reline//lib/reline/config.rb#45
  def convert_meta=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def disable_completion; end

  # source://reline//lib/reline/config.rb#45
  def disable_completion=(_arg0); end

  # source://reline//lib/reline/config.rb#87
  def editing_mode; end

  # source://reline//lib/reline/config.rb#91
  def editing_mode=(val); end

  # @return [Boolean]
  #
  # source://reline//lib/reline/config.rb#95
  def editing_mode_is?(*val); end

  # source://reline//lib/reline/config.rb#45
  def emacs_mode_string; end

  # source://reline//lib/reline/config.rb#45
  def emacs_mode_string=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def enable_bracketed_paste; end

  # source://reline//lib/reline/config.rb#45
  def enable_bracketed_paste=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def enable_keypad; end

  # source://reline//lib/reline/config.rb#45
  def enable_keypad=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def expand_tilde; end

  # source://reline//lib/reline/config.rb#45
  def expand_tilde=(_arg0); end

  # source://reline//lib/reline/config.rb#229
  def handle_directive(directive, file, no); end

  # source://reline//lib/reline/config.rb#45
  def history_preserve_point; end

  # source://reline//lib/reline/config.rb#45
  def history_preserve_point=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def history_size; end

  # source://reline//lib/reline/config.rb#45
  def history_size=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def horizontal_scroll_mode; end

  # source://reline//lib/reline/config.rb#45
  def horizontal_scroll_mode=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def input_meta; end

  # source://reline//lib/reline/config.rb#45
  def input_meta=(_arg0); end

  # source://reline//lib/reline/config.rb#103
  def inputrc_path; end

  # source://reline//lib/reline/config.rb#45
  def isearch_terminators; end

  # source://reline//lib/reline/config.rb#45
  def isearch_terminators=(_arg0); end

  # source://reline//lib/reline/config.rb#152
  def key_bindings; end

  # source://reline//lib/reline/config.rb#356
  def key_notation_to_code(notation); end

  # source://reline//lib/reline/config.rb#99
  def keymap; end

  # source://reline//lib/reline/config.rb#45
  def keyseq_timeout; end

  # source://reline//lib/reline/config.rb#45
  def keyseq_timeout=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def mark_directories; end

  # source://reline//lib/reline/config.rb#45
  def mark_directories=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def mark_modified_lines; end

  # source://reline//lib/reline/config.rb#45
  def mark_modified_lines=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def mark_symlinked_directories; end

  # source://reline//lib/reline/config.rb#45
  def mark_symlinked_directories=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def match_hidden_files; end

  # source://reline//lib/reline/config.rb#45
  def match_hidden_files=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def meta_flag; end

  # source://reline//lib/reline/config.rb#45
  def meta_flag=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def output_meta; end

  # source://reline//lib/reline/config.rb#45
  def output_meta=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def page_completions; end

  # source://reline//lib/reline/config.rb#45
  def page_completions=(_arg0); end

  # source://reline//lib/reline/config.rb#390
  def parse_keyseq(str); end

  # source://reline//lib/reline/config.rb#45
  def prefer_visible_bell; end

  # source://reline//lib/reline/config.rb#45
  def prefer_visible_bell=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def print_completions_horizontally; end

  # source://reline//lib/reline/config.rb#45
  def print_completions_horizontally=(_arg0); end

  # source://reline//lib/reline/config.rb#133
  def read(file = T.unsafe(nil)); end

  # source://reline//lib/reline/config.rb#182
  def read_lines(lines, file = T.unsafe(nil)); end

  # source://reline//lib/reline/config.rb#76
  def reset; end

  # source://reline//lib/reline/config.rb#176
  def reset_default_key_bindings; end

  # source://reline//lib/reline/config.rb#164
  def reset_oneshot_key_bindings; end

  # source://reline//lib/reline/config.rb#337
  def retrieve_string(str); end

  # source://reline//lib/reline/config.rb#45
  def show_all_if_ambiguous; end

  # source://reline//lib/reline/config.rb#45
  def show_all_if_ambiguous=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def show_all_if_unmodified; end

  # source://reline//lib/reline/config.rb#45
  def show_all_if_unmodified=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def show_mode_in_prompt; end

  # source://reline//lib/reline/config.rb#45
  def show_mode_in_prompt=(_arg0); end

  # Returns the value of attribute test_mode.
  #
  # source://reline//lib/reline/config.rb#2
  def test_mode; end

  # source://reline//lib/reline/config.rb#45
  def vi_cmd_mode_string; end

  # source://reline//lib/reline/config.rb#45
  def vi_cmd_mode_string=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def vi_ins_mode_string; end

  # source://reline//lib/reline/config.rb#45
  def vi_ins_mode_string=(_arg0); end

  # source://reline//lib/reline/config.rb#45
  def visible_stats; end

  # source://reline//lib/reline/config.rb#45
  def visible_stats=(_arg0); end

  private

  # source://reline//lib/reline/config.rb#129
  def default_inputrc_path; end

  # @return [Boolean]
  #
  # source://reline//lib/reline/config.rb#398
  def seven_bit_encoding?(encoding); end
end

# source://reline//lib/reline/config.rb#6
class Reline::Config::InvalidInputrc < ::RuntimeError
  # Returns the value of attribute file.
  #
  # source://reline//lib/reline/config.rb#7
  def file; end

  # Sets the attribute file
  #
  # @param value the value to set the attribute file to.
  #
  # source://reline//lib/reline/config.rb#7
  def file=(_arg0); end

  # Returns the value of attribute lineno.
  #
  # source://reline//lib/reline/config.rb#7
  def lineno; end

  # Sets the attribute lineno
  #
  # @param value the value to set the attribute lineno to.
  #
  # source://reline//lib/reline/config.rb#7
  def lineno=(_arg0); end
end

# source://reline//lib/reline/config.rb#4
Reline::Config::KEYSEQ_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://reline//lib/reline/config.rb#10
Reline::Config::VARIABLE_NAMES = T.let(T.unsafe(nil), Array)

# source://reline//lib/reline/config.rb#43
Reline::Config::VARIABLE_NAME_SYMBOLS = T.let(T.unsafe(nil), Array)

# source://reline//lib/reline.rb#50
class Reline::Core
  extend ::Forwardable

  # @return [Core] a new instance of Core
  # @yield [_self]
  # @yieldparam _self [Reline::Core] the object that the method was called on
  #
  # source://reline//lib/reline.rb#78
  def initialize; end

  # @raise [ArgumentError]
  #
  # source://reline//lib/reline.rb#168
  def add_dialog_proc(name_sym, p, context = T.unsafe(nil)); end

  # source://reline//lib/reline.rb#483
  def ambiguous_width; end

  # source://reline//lib/reline.rb#65
  def auto_indent_proc; end

  # @raise [ArgumentError]
  #
  # source://reline//lib/reline.rb#153
  def auto_indent_proc=(p); end

  # source://reline//lib/reline.rb#65
  def basic_quote_characters; end

  # source://reline//lib/reline.rb#110
  def basic_quote_characters=(v); end

  # source://reline//lib/reline.rb#65
  def basic_word_break_characters; end

  # source://reline//lib/reline.rb#102
  def basic_word_break_characters=(v); end

  # source://reline//lib/reline.rb#65
  def completer_quote_characters; end

  # source://reline//lib/reline.rb#114
  def completer_quote_characters=(v); end

  # source://reline//lib/reline.rb#65
  def completer_word_break_characters; end

  # source://reline//lib/reline.rb#106
  def completer_word_break_characters=(v); end

  # source://reline//lib/reline.rb#65
  def completion_append_character; end

  # source://reline//lib/reline.rb#90
  def completion_append_character=(val); end

  # source://reline//lib/reline.rb#130
  def completion_case_fold; end

  # source://reline//lib/reline.rb#126
  def completion_case_fold=(v); end

  # source://reline//lib/reline.rb#65
  def completion_proc; end

  # @raise [ArgumentError]
  #
  # source://reline//lib/reline.rb#138
  def completion_proc=(p); end

  # source://reline//lib/reline.rb#134
  def completion_quote_character; end

  # Returns the value of attribute config.
  #
  # source://reline//lib/reline.rb#67
  def config; end

  # Sets the attribute config
  #
  # @param value the value to set the attribute config to.
  #
  # source://reline//lib/reline.rb#67
  def config=(_arg0); end

  # source://reline//lib/reline.rb#174
  def dialog_proc(name_sym); end

  # source://reline//lib/reline.rb#65
  def dig_perfect_match_proc; end

  # @raise [ArgumentError]
  #
  # source://reline//lib/reline.rb#162
  def dig_perfect_match_proc=(p); end

  # source://reline//lib/reline.rb#202
  def emacs_editing_mode; end

  # @return [Boolean]
  #
  # source://reline//lib/reline.rb#211
  def emacs_editing_mode?; end

  # source://reline//lib/reline.rb#86
  def encoding; end

  # source://reline//lib/reline.rb#65
  def filename_quote_characters; end

  # source://reline//lib/reline.rb#118
  def filename_quote_characters=(v); end

  # source://reline//lib/reline.rb#215
  def get_screen_size; end

  # @raise [TypeError]
  #
  # source://reline//lib/reline.rb#178
  def input=(val); end

  # Returns the value of attribute key_stroke.
  #
  # source://reline//lib/reline.rb#68
  def key_stroke; end

  # Sets the attribute key_stroke
  #
  # @param value the value to set the attribute key_stroke to.
  #
  # source://reline//lib/reline.rb#68
  def key_stroke=(_arg0); end

  # Returns the value of attribute last_incremental_search.
  #
  # source://reline//lib/reline.rb#70
  def last_incremental_search; end

  # Sets the attribute last_incremental_search
  #
  # @param value the value to set the attribute last_incremental_search to.
  #
  # source://reline//lib/reline.rb#70
  def last_incremental_search=(_arg0); end

  # Returns the value of attribute line_editor.
  #
  # source://reline//lib/reline.rb#69
  def line_editor; end

  # Sets the attribute line_editor
  #
  # @param value the value to set the attribute line_editor to.
  #
  # source://reline//lib/reline.rb#69
  def line_editor=(_arg0); end

  # Returns the value of attribute output.
  #
  # source://reline//lib/reline.rb#71
  def output; end

  # @raise [TypeError]
  #
  # source://reline//lib/reline.rb#189
  def output=(val); end

  # source://reline//lib/reline.rb#65
  def output_modifier_proc; end

  # @raise [ArgumentError]
  #
  # source://reline//lib/reline.rb#143
  def output_modifier_proc=(p); end

  # source://reline//lib/reline.rb#65
  def pre_input_hook; end

  # source://reline//lib/reline.rb#158
  def pre_input_hook=(p); end

  # source://reline//lib/reline.rb#65
  def prompt_proc; end

  # @raise [ArgumentError]
  #
  # source://reline//lib/reline.rb#148
  def prompt_proc=(p); end

  # source://reline//lib/reline.rb#286
  def readline(prompt = T.unsafe(nil), add_hist = T.unsafe(nil)); end

  # source://reline//lib/reline.rb#268
  def readmultiline(prompt = T.unsafe(nil), add_hist = T.unsafe(nil), &confirm_multiline_termination); end

  # source://reline//lib/reline.rb#65
  def special_prefixes; end

  # source://reline//lib/reline.rb#122
  def special_prefixes=(v); end

  # source://reline//lib/reline.rb#197
  def vi_editing_mode; end

  # @return [Boolean]
  #
  # source://reline//lib/reline.rb#207
  def vi_editing_mode?; end

  private

  # source://reline//lib/reline.rb#299
  def inner_readline(prompt, add_hist, multiline, &confirm_multiline_termination); end

  # source://reline//lib/reline.rb#488
  def may_req_ambiguous_char_width; end

  # source://reline//lib/reline.rb#430
  def read_2nd_character_of_key_sequence(keyseq_timeout, buffer, c, block); end

  # source://reline//lib/reline.rb#462
  def read_escaped_key(keyseq_timeout, c, block); end

  # GNU Readline waits for "keyseq-timeout" milliseconds to see if the ESC
  # is followed by a character, and times out and treats it as a standalone
  # ESC if the second character does not arrive. If the second character
  # comes before timed out, it is treated as a modifier key with the
  # meta-property of meta-key, so that it can be distinguished from
  # multibyte characters with the 8th bit turned on.
  #
  # GNU Readline will wait for the 2nd character with "keyseq-timeout"
  # milli-seconds but wait forever after 3rd characters.
  #
  # source://reline//lib/reline.rb#391
  def read_io(keyseq_timeout, &block); end
end

# source://reline//lib/reline.rb#51
Reline::Core::ATTR_READER_NAMES = T.let(T.unsafe(nil), Array)

# source://reline//lib/reline.rb#266
Reline::DEFAULT_DIALOG_CONTEXT = T.let(T.unsafe(nil), Array)

# source://reline//lib/reline.rb#219
Reline::DEFAULT_DIALOG_PROC_AUTOCOMPLETE = T.let(T.unsafe(nil), Proc)

# NOTE: For making compatible with the rb-readline gem
#
# source://reline//lib/reline.rb#15
Reline::FILENAME_COMPLETION_PROC = T.let(T.unsafe(nil), T.untyped)

# source://reline//lib/reline/general_io.rb#4
class Reline::GeneralIO
  class << self
    # source://reline//lib/reline/general_io.rb#85
    def clear_screen; end

    # source://reline//lib/reline/general_io.rb#60
    def cursor_pos; end

    # source://reline//lib/reline/general_io.rb#111
    def deprep(otio); end

    # source://reline//lib/reline/general_io.rb#10
    def encoding; end

    # source://reline//lib/reline/general_io.rb#79
    def erase_after_cursor; end

    # source://reline//lib/reline/general_io.rb#104
    def finish_pasting; end

    # source://reline//lib/reline/general_io.rb#56
    def get_screen_size; end

    # source://reline//lib/reline/general_io.rb#38
    def getc; end

    # source://reline//lib/reline/general_io.rb#64
    def hide_cursor; end

    # @return [Boolean]
    #
    # source://reline//lib/reline/general_io.rb#96
    def in_pasting?; end

    # source://reline//lib/reline/general_io.rb#30
    def input=(val); end

    # source://reline//lib/reline/general_io.rb#70
    def move_cursor_column(val); end

    # source://reline//lib/reline/general_io.rb#76
    def move_cursor_down(val); end

    # source://reline//lib/reline/general_io.rb#73
    def move_cursor_up(val); end

    # source://reline//lib/reline/general_io.rb#108
    def prep; end

    # source://reline//lib/reline/general_io.rb#5
    def reset(encoding: T.unsafe(nil)); end

    # source://reline//lib/reline/general_io.rb#82
    def scroll_down(val); end

    # source://reline//lib/reline/general_io.rb#24
    def set_default_key_bindings(_); end

    # source://reline//lib/reline/general_io.rb#88
    def set_screen_size(rows, columns); end

    # source://reline//lib/reline/general_io.rb#91
    def set_winch_handler(&handler); end

    # source://reline//lib/reline/general_io.rb#67
    def show_cursor; end

    # source://reline//lib/reline/general_io.rb#100
    def start_pasting; end

    # source://reline//lib/reline/general_io.rb#52
    def ungetc(c); end

    # @return [Boolean]
    #
    # source://reline//lib/reline/general_io.rb#20
    def win?; end

    # source://reline//lib/reline/general_io.rb#34
    def with_raw_input; end
  end
end

# source://reline//lib/reline.rb#603
Reline::HISTORY = T.let(T.unsafe(nil), Reline::History)

# source://reline//lib/reline/history.rb#1
class Reline::History < ::Array
  # @return [History] a new instance of History
  #
  # source://reline//lib/reline/history.rb#2
  def initialize(config); end

  # source://reline//lib/reline/history.rb#52
  def <<(val); end

  # source://reline//lib/reline/history.rb#15
  def [](index); end

  # source://reline//lib/reline/history.rb#20
  def []=(index, val); end

  # source://reline//lib/reline/history.rb#25
  def concat(*val); end

  # source://reline//lib/reline/history.rb#10
  def delete_at(index); end

  # source://reline//lib/reline/history.rb#31
  def push(*val); end

  # source://reline//lib/reline/history.rb#6
  def to_s; end

  private

  # @raise [IndexError]
  #
  # source://reline//lib/reline/history.rb#62
  def check_index(index); end
end

# source://reline//lib/reline.rb#596
Reline::IOGate = Reline::ANSI

# source://reline//lib/reline.rb#20
Reline::Key = Struct

# source://reline//lib/reline/key_actor/base.rb#1
class Reline::KeyActor::Base
  # @return [Base] a new instance of Base
  #
  # source://reline//lib/reline/key_actor/base.rb#8
  def initialize; end

  # source://reline//lib/reline/key_actor/base.rb#12
  def default_key_bindings; end

  # source://reline//lib/reline/key_actor/base.rb#4
  def get_method(key); end

  # source://reline//lib/reline/key_actor/base.rb#16
  def reset_default_key_bindings; end
end

# source://reline//lib/reline/key_actor/base.rb#2
Reline::KeyActor::Base::MAPPING = T.let(T.unsafe(nil), Array)

# source://reline//lib/reline/key_actor/emacs.rb#2
Reline::KeyActor::Emacs::MAPPING = T.let(T.unsafe(nil), Array)

# source://reline//lib/reline/key_actor/vi_command.rb#2
Reline::KeyActor::ViCommand::MAPPING = T.let(T.unsafe(nil), Array)

# source://reline//lib/reline/key_actor/vi_insert.rb#2
Reline::KeyActor::ViInsert::MAPPING = T.let(T.unsafe(nil), Array)

# source://reline//lib/reline/key_stroke.rb#1
class Reline::KeyStroke
  # @return [KeyStroke] a new instance of KeyStroke
  #
  # source://reline//lib/reline/key_stroke.rb#2
  def initialize(config); end

  # source://reline//lib/reline/key_stroke.rb#6
  def compress_meta_key(ary); end

  # @return [Boolean]
  #
  # source://reline//lib/reline/key_stroke.rb#42
  def equal?(me, other); end

  # source://reline//lib/reline/key_stroke.rb#83
  def expand(input); end

  # source://reline//lib/reline/key_stroke.rb#67
  def match_status(input); end

  # @return [Boolean]
  #
  # source://reline//lib/reline/key_stroke.rb#18
  def start_with?(me, other); end

  private

  # source://reline//lib/reline/key_stroke.rb#102
  def key_mapping; end
end

# source://reline//lib/reline/kill_ring.rb#1
class Reline::KillRing
  include ::Enumerable

  # @return [KillRing] a new instance of KillRing
  #
  # source://reline//lib/reline/kill_ring.rb#61
  def initialize(max = T.unsafe(nil)); end

  # source://reline//lib/reline/kill_ring.rb#68
  def append(string, before_p = T.unsafe(nil)); end

  # source://reline//lib/reline/kill_ring.rb#116
  def each; end

  # source://reline//lib/reline/kill_ring.rb#83
  def process; end

  # source://reline//lib/reline/kill_ring.rb#96
  def yank; end

  # source://reline//lib/reline/kill_ring.rb#106
  def yank_pop; end
end

# source://reline//lib/reline/kill_ring.rb#21
class Reline::KillRing::RingBuffer
  # @return [RingBuffer] a new instance of RingBuffer
  #
  # source://reline//lib/reline/kill_ring.rb#25
  def initialize(max = T.unsafe(nil)); end

  # source://reline//lib/reline/kill_ring.rb#31
  def <<(point); end

  # @return [Boolean]
  #
  # source://reline//lib/reline/kill_ring.rb#56
  def empty?; end

  # Returns the value of attribute head.
  #
  # source://reline//lib/reline/kill_ring.rb#23
  def head; end

  # Returns the value of attribute size.
  #
  # source://reline//lib/reline/kill_ring.rb#22
  def size; end
end

# source://reline//lib/reline/kill_ring.rb#11
class Reline::KillRing::RingPoint < ::Struct
  # @return [RingPoint] a new instance of RingPoint
  #
  # source://reline//lib/reline/kill_ring.rb#12
  def initialize(str); end

  # source://reline//lib/reline/kill_ring.rb#16
  def ==(other); end
end

# source://reline//lib/reline/kill_ring.rb#6
Reline::KillRing::State::CONTINUED = T.let(T.unsafe(nil), Symbol)

# source://reline//lib/reline/kill_ring.rb#5
Reline::KillRing::State::FRESH = T.let(T.unsafe(nil), Symbol)

# source://reline//lib/reline/kill_ring.rb#7
Reline::KillRing::State::PROCESSED = T.let(T.unsafe(nil), Symbol)

# source://reline//lib/reline/kill_ring.rb#8
Reline::KillRing::State::YANK = T.let(T.unsafe(nil), Symbol)

# source://reline//lib/reline/line_editor.rb#6
class Reline::LineEditor
  # @return [LineEditor] a new instance of LineEditor
  #
  # source://reline//lib/reline/line_editor.rb#57
  def initialize(config, encoding); end

  # source://reline//lib/reline/line_editor.rb#634
  def add_dialog_proc(name, p, context = T.unsafe(nil)); end

  # Returns the value of attribute auto_indent_proc.
  #
  # source://reline//lib/reline/line_editor.rb#16
  def auto_indent_proc; end

  # Sets the attribute auto_indent_proc
  #
  # @param value the value to set the attribute auto_indent_proc to.
  #
  # source://reline//lib/reline/line_editor.rb#16
  def auto_indent_proc=(_arg0); end

  # Returns the value of attribute byte_pointer.
  #
  # source://reline//lib/reline/line_editor.rb#10
  def byte_pointer; end

  # source://reline//lib/reline/line_editor.rb#1893
  def byte_pointer=(val); end

  # source://reline//lib/reline/line_editor.rb#1664
  def call_completion_proc; end

  # source://reline//lib/reline/line_editor.rb#1672
  def call_completion_proc_with_checking_args(pre, target, post); end

  # Returns the value of attribute completion_append_character.
  #
  # source://reline//lib/reline/line_editor.rb#13
  def completion_append_character; end

  # Sets the attribute completion_append_character
  #
  # @param value the value to set the attribute completion_append_character to.
  #
  # source://reline//lib/reline/line_editor.rb#13
  def completion_append_character=(_arg0); end

  # Returns the value of attribute completion_proc.
  #
  # source://reline//lib/reline/line_editor.rb#12
  def completion_proc; end

  # Sets the attribute completion_proc
  #
  # @param value the value to set the attribute completion_proc to.
  #
  # source://reline//lib/reline/line_editor.rb#12
  def completion_proc=(_arg0); end

  # source://reline//lib/reline/line_editor.rb#1811
  def confirm_multiline_termination; end

  # Returns the value of attribute confirm_multiline_termination_proc.
  #
  # source://reline//lib/reline/line_editor.rb#11
  def confirm_multiline_termination_proc; end

  # Sets the attribute confirm_multiline_termination_proc
  #
  # @param value the value to set the attribute confirm_multiline_termination_proc to.
  #
  # source://reline//lib/reline/line_editor.rb#11
  def confirm_multiline_termination_proc=(_arg0); end

  # source://reline//lib/reline/line_editor.rb#1833
  def delete_text(start = T.unsafe(nil), length = T.unsafe(nil)); end

  # Returns the value of attribute dig_perfect_match_proc.
  #
  # source://reline//lib/reline/line_editor.rb#18
  def dig_perfect_match_proc; end

  # Sets the attribute dig_perfect_match_proc
  #
  # @param value the value to set the attribute dig_perfect_match_proc to.
  #
  # source://reline//lib/reline/line_editor.rb#18
  def dig_perfect_match_proc=(_arg0); end

  # source://reline//lib/reline/line_editor.rb#1282
  def editing_mode; end

  # @return [Boolean]
  #
  # source://reline//lib/reline/line_editor.rb#259
  def eof?; end

  # source://reline//lib/reline/line_editor.rb#251
  def finalize; end

  # source://reline//lib/reline/line_editor.rb#1919
  def finish; end

  # @return [Boolean]
  #
  # source://reline//lib/reline/line_editor.rb#1915
  def finished?; end

  # source://reline//lib/reline/line_editor.rb#1589
  def input_key(key); end

  # source://reline//lib/reline/line_editor.rb#1821
  def insert_text(text); end

  # source://reline//lib/reline/line_editor.rb#988
  def just_move_cursor; end

  # TODO: undo
  # TODO: Use "private alias_method" idiom after drop Ruby 2.5.
  #
  # source://reline//lib/reline/line_editor.rb#9
  def line; end

  # source://reline//lib/reline/line_editor.rb#324
  def multiline_off; end

  # source://reline//lib/reline/line_editor.rb#320
  def multiline_on; end

  # Sets the attribute output
  #
  # @param value the value to set the attribute output to.
  #
  # source://reline//lib/reline/line_editor.rb#19
  def output=(_arg0); end

  # Returns the value of attribute output_modifier_proc.
  #
  # source://reline//lib/reline/line_editor.rb#14
  def output_modifier_proc; end

  # Sets the attribute output_modifier_proc
  #
  # @param value the value to set the attribute output_modifier_proc to.
  #
  # source://reline//lib/reline/line_editor.rb#14
  def output_modifier_proc=(_arg0); end

  # Returns the value of attribute pre_input_hook.
  #
  # source://reline//lib/reline/line_editor.rb#17
  def pre_input_hook; end

  # Sets the attribute pre_input_hook
  #
  # @param value the value to set the attribute pre_input_hook to.
  #
  # source://reline//lib/reline/line_editor.rb#17
  def pre_input_hook=(_arg0); end

  # Returns the value of attribute prompt_proc.
  #
  # source://reline//lib/reline/line_editor.rb#15
  def prompt_proc; end

  # Sets the attribute prompt_proc
  #
  # @param value the value to set the attribute prompt_proc to.
  #
  # source://reline//lib/reline/line_editor.rb#15
  def prompt_proc=(_arg0); end

  # source://reline//lib/reline/line_editor.rb#432
  def rerender; end

  # source://reline//lib/reline/line_editor.rb#426
  def rerender_all; end

  # source://reline//lib/reline/line_editor.rb#150
  def reset(prompt = T.unsafe(nil), encoding:); end

  # source://reline//lib/reline/line_editor.rb#302
  def reset_line; end

  # source://reline//lib/reline/line_editor.rb#263
  def reset_variables(prompt = T.unsafe(nil), encoding:); end

  # source://reline//lib/reline/line_editor.rb#181
  def resize; end

  # source://reline//lib/reline/line_editor.rb#1733
  def retrieve_completion_block(set_completion_quote_character = T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#63
  def set_pasting_state(in_pasting); end

  # source://reline//lib/reline/line_editor.rb#221
  def set_signal_handlers; end

  # @return [Boolean]
  #
  # source://reline//lib/reline/line_editor.rb#67
  def simplified_rendering?; end

  # source://reline//lib/reline/line_editor.rb#1907
  def whole_buffer; end

  # source://reline//lib/reline/line_editor.rb#1900
  def whole_lines; end

  # source://reline//lib/reline/line_editor.rb#1474
  def wrap_method_call(method_symbol, method_obj, key, with_operator = T.unsafe(nil)); end

  private

  # @return [Boolean]
  #
  # source://reline//lib/reline/line_editor.rb#1464
  def argumentable?(method_obj); end

  # source://reline//lib/reline/line_editor.rb#2084
  def backward_char(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2574
  def backward_delete_char(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2733
  def backward_word(key); end

  # source://reline//lib/reline/line_editor.rb#2108
  def beginning_of_line(key); end

  # source://reline//lib/reline/line_editor.rb#1931
  def byteinsert(str, byte_pointer, other); end

  # source://reline//lib/reline/line_editor.rb#1925
  def byteslice!(str, byte_pointer, size); end

  # source://reline//lib/reline/line_editor.rb#328
  def calculate_height_by_lines(lines, prompt); end

  # source://reline//lib/reline/line_editor.rb#346
  def calculate_height_by_width(width); end

  # source://reline//lib/reline/line_editor.rb#384
  def calculate_nearest_cursor(line_to_calc = T.unsafe(nil), cursor = T.unsafe(nil), started_from = T.unsafe(nil), byte_pointer = T.unsafe(nil), update = T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#931
  def calculate_scroll_partial_screen(highest_in_all, cursor_y); end

  # source://reline//lib/reline/line_editor.rb#1938
  def calculate_width(str, allow_escape_code = T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2797
  def capitalize_word(key); end

  # source://reline//lib/reline/line_editor.rb#77
  def check_mode_string; end

  # source://reline//lib/reline/line_editor.rb#97
  def check_multiline_prompt(buffer); end

  # source://reline//lib/reline/line_editor.rb#879
  def clear_dialog; end

  # source://reline//lib/reline/line_editor.rb#885
  def clear_dialog_with_content; end

  # source://reline//lib/reline/line_editor.rb#893
  def clear_each_dialog(dialog); end

  # source://reline//lib/reline/line_editor.rb#2719
  def clear_screen(key); end

  # source://reline//lib/reline/line_editor.rb#1261
  def clear_screen_buffer(prompt, prompt_list, prompt_width); end

  # source://reline//lib/reline/line_editor.rb#1336
  def complete(list, just_show_list = T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#1290
  def complete_internal_proc(list, is_menu); end

  # source://reline//lib/reline/line_editor.rb#2853
  def copy_for_vi(text); end

  # source://reline//lib/reline/line_editor.rb#2651
  def delete_char(key); end

  # source://reline//lib/reline/line_editor.rb#2678
  def delete_char_or_list(key); end

  # source://reline//lib/reline/line_editor.rb#2809
  def downcase_word(key); end

  # source://reline//lib/reline/line_editor.rb#3152
  def ed_argument_digit(key); end

  # source://reline//lib/reline/line_editor.rb#2719
  def ed_clear_screen(key); end

  # source://reline//lib/reline/line_editor.rb#3064
  def ed_delete_next_char(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2982
  def ed_delete_prev_char(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2751
  def ed_delete_prev_word(key); end

  # Editline:: +ed-insert+ (vi input: almost all; emacs: printable characters)
  #            In insert mode, insert the input character left of the cursor
  #            position. In replace mode, overwrite the character at the
  #            cursor and move the cursor to the right by one character
  #            position. Accept an argument to do this repeatedly. It is an
  #            error if the input character is the NUL character (+Ctrl-@+).
  #            Failure to enlarge the edit buffer also results in an error.
  # Editline:: +ed-digit+ (emacs: 0 to 9) If in argument input mode, append
  #            the input digit to the argument being read. Otherwise, call
  #            +ed-insert+. It is an error if the input character is not a
  #            digit or if the existing argument is already greater than a
  #            million.
  # GNU Readline:: +self-insert+ (a, b, A, 1, !, …) Insert yourself.
  #
  # source://reline//lib/reline/line_editor.rb#1995
  def ed_digit(key); end

  # Editline:: +ed-insert+ (vi input: almost all; emacs: printable characters)
  #            In insert mode, insert the input character left of the cursor
  #            position. In replace mode, overwrite the character at the
  #            cursor and move the cursor to the right by one character
  #            position. Accept an argument to do this repeatedly. It is an
  #            error if the input character is the NUL character (+Ctrl-@+).
  #            Failure to enlarge the edit buffer also results in an error.
  # Editline:: +ed-digit+ (emacs: 0 to 9) If in argument input mode, append
  #            the input digit to the argument being read. Otherwise, call
  #            +ed-insert+. It is an error if the input character is not a
  #            digit or if the existing argument is already greater than a
  #            million.
  # GNU Readline:: +self-insert+ (a, b, A, 1, !, …) Insert yourself.
  #
  # source://reline//lib/reline/line_editor.rb#1995
  def ed_insert(key); end

  # Editline:: +ed-kill-line+ (vi command: +D+, +Ctrl-K+; emacs: +Ctrl-K+,
  #            +Ctrl-U+) + Kill from the cursor to the end of the line.
  # GNU Readline:: +kill-line+ (+C-k+) Kill the text from point to the end of
  #                the line. With a negative numeric argument, kill backward
  #                from the cursor to the beginning of the current line.
  #
  # source://reline//lib/reline/line_editor.rb#2602
  def ed_kill_line(key); end

  # source://reline//lib/reline/line_editor.rb#2108
  def ed_move_to_beg(key); end

  # source://reline//lib/reline/line_editor.rb#2113
  def ed_move_to_end(key); end

  # source://reline//lib/reline/line_editor.rb#2541
  def ed_newline(key); end

  # source://reline//lib/reline/line_editor.rb#2064
  def ed_next_char(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2493
  def ed_next_history(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2084
  def ed_prev_char(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2442
  def ed_prev_history(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2733
  def ed_prev_word(key); end

  # source://reline//lib/reline/line_editor.rb#2048
  def ed_quoted_insert(str, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2390
  def ed_search_next_history(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2343
  def ed_search_prev_history(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2762
  def ed_transpose_chars(key); end

  # source://reline//lib/reline/line_editor.rb#2782
  def ed_transpose_words(key); end

  # do nothing
  #
  # source://reline//lib/reline/line_editor.rb#1965
  def ed_unassigned(key); end

  # source://reline//lib/reline/line_editor.rb#2797
  def em_capitol_case(key); end

  # source://reline//lib/reline/line_editor.rb#2651
  def em_delete(key); end

  # source://reline//lib/reline/line_editor.rb#2742
  def em_delete_next_word(key); end

  # source://reline//lib/reline/line_editor.rb#2678
  def em_delete_or_list(key); end

  # source://reline//lib/reline/line_editor.rb#2574
  def em_delete_prev_char(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#3336
  def em_exchange_mark(key); end

  # Editline:: +em-kill-line+ (not bound) Delete the entire contents of the
  #            edit buffer and save it to the cut buffer. +vi-kill-line-prev+
  # GNU Readline:: +kill-whole-line+ (not bound) Kill all characters on the
  #                current line, no matter where point is.
  #
  # source://reline//lib/reline/line_editor.rb#2640
  def em_kill_line(key); end

  # source://reline//lib/reline/line_editor.rb#2841
  def em_kill_region(key); end

  # source://reline//lib/reline/line_editor.rb#2809
  def em_lower_case(key); end

  # source://reline//lib/reline/line_editor.rb#2724
  def em_next_word(key); end

  # source://reline//lib/reline/line_editor.rb#3331
  def em_set_mark(key); end

  # source://reline//lib/reline/line_editor.rb#2825
  def em_upper_case(key); end

  # source://reline//lib/reline/line_editor.rb#2690
  def em_yank(key); end

  # source://reline//lib/reline/line_editor.rb#2702
  def em_yank_pop(key); end

  # source://reline//lib/reline/line_editor.rb#2113
  def end_of_line(key); end

  # source://reline//lib/reline/line_editor.rb#3336
  def exchange_point_and_mark(key); end

  # source://reline//lib/reline/line_editor.rb#2064
  def forward_char(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2338
  def forward_search_history(key); end

  # source://reline//lib/reline/line_editor.rb#2724
  def forward_word(key); end

  # source://reline//lib/reline/line_editor.rb#2128
  def generate_searcher; end

  # source://reline//lib/reline/line_editor.rb#2343
  def history_search_backward(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2390
  def history_search_forward(key, arg: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://reline//lib/reline/line_editor.rb#1468
  def inclusive?(method_obj); end

  # source://reline//lib/reline/line_editor.rb#2246
  def incremental_search_history(key); end

  # source://reline//lib/reline/line_editor.rb#338
  def insert_new_line(cursor_line, next_line); end

  # source://reline//lib/reline/line_editor.rb#1942
  def key_delete(key); end

  # source://reline//lib/reline/line_editor.rb#1950
  def key_newline(key); end

  # Editline:: +ed-kill-line+ (vi command: +D+, +Ctrl-K+; emacs: +Ctrl-K+,
  #            +Ctrl-U+) + Kill from the cursor to the end of the line.
  # GNU Readline:: +kill-line+ (+C-k+) Kill the text from point to the end of
  #                the line. With a negative numeric argument, kill backward
  #                from the cursor to the beginning of the current line.
  #
  # source://reline//lib/reline/line_editor.rb#2602
  def kill_line(key); end

  # Editline:: +em-kill-line+ (not bound) Delete the entire contents of the
  #            edit buffer and save it to the cut buffer. +vi-kill-line-prev+
  # GNU Readline:: +kill-whole-line+ (not bound) Kill all characters on the
  #                current line, no matter where point is.
  #
  # source://reline//lib/reline/line_editor.rb#2640
  def kill_whole_line(key); end

  # source://reline//lib/reline/line_editor.rb#1286
  def menu(target, list); end

  # source://reline//lib/reline/line_editor.rb#1238
  def modify_lines(before); end

  # source://reline//lib/reline/line_editor.rb#1380
  def move_completed_list(list, direction); end

  # source://reline//lib/reline/line_editor.rb#374
  def move_cursor_down(val); end

  # source://reline//lib/reline/line_editor.rb#365
  def move_cursor_up(val); end

  # source://reline//lib/reline/line_editor.rb#2493
  def next_history(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#1551
  def normal_char(key); end

  # source://reline//lib/reline/line_editor.rb#650
  def padding_space_with_escape_sequences(str, width); end

  # source://reline//lib/reline/line_editor.rb#2442
  def previous_history(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#1694
  def process_auto_indent; end

  # source://reline//lib/reline/line_editor.rb#1967
  def process_insert(force: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#1494
  def process_key(key, method_symbol); end

  # source://reline//lib/reline/line_editor.rb#2048
  def quoted_insert(str, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#644
  def render_dialog(cursor_column); end

  # source://reline//lib/reline/line_editor.rb#657
  def render_each_dialog(dialog, cursor_column); end

  # source://reline//lib/reline/line_editor.rb#1141
  def render_partial(prompt, prompt_width, line_to_render, this_started_from, with_control: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#1115
  def render_whole_lines(lines, prompt, prompt_width); end

  # source://reline//lib/reline/line_editor.rb#964
  def rerender_added_newline(prompt, prompt_width, prompt_list); end

  # source://reline//lib/reline/line_editor.rb#1060
  def rerender_all_lines; end

  # source://reline//lib/reline/line_editor.rb#1016
  def rerender_changed_current_line; end

  # source://reline//lib/reline/line_editor.rb#783
  def reset_dialog(dialog, old_dialog); end

  # source://reline//lib/reline/line_editor.rb#2333
  def reverse_search_history(key); end

  # source://reline//lib/reline/line_editor.rb#1426
  def run_for_operators(key, method_symbol, &block); end

  # source://reline//lib/reline/line_editor.rb#354
  def scroll_down(val); end

  # source://reline//lib/reline/line_editor.rb#3220
  def search_next_char(key, arg, need_prev_char: T.unsafe(nil), inclusive: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#3277
  def search_prev_char(key, arg, need_next_char = T.unsafe(nil)); end

  # Editline:: +ed-insert+ (vi input: almost all; emacs: printable characters)
  #            In insert mode, insert the input character left of the cursor
  #            position. In replace mode, overwrite the character at the
  #            cursor and move the cursor to the right by one character
  #            position. Accept an argument to do this repeatedly. It is an
  #            error if the input character is the NUL character (+Ctrl-@+).
  #            Failure to enlarge the edit buffer also results in an error.
  # Editline:: +ed-digit+ (emacs: 0 to 9) If in argument input mode, append
  #            the input digit to the argument being read. Otherwise, call
  #            +ed-insert+. It is an error if the input character is not a
  #            digit or if the existing argument is already greater than a
  #            million.
  # GNU Readline:: +self-insert+ (a, b, A, 1, !, …) Insert yourself.
  #
  # source://reline//lib/reline/line_editor.rb#1995
  def self_insert(key); end

  # source://reline//lib/reline/line_editor.rb#3331
  def set_mark(key); end

  # source://reline//lib/reline/line_editor.rb#1248
  def show_menu; end

  # source://reline//lib/reline/line_editor.rb#350
  def split_by_width(str, max_width); end

  # source://reline//lib/reline/line_editor.rb#2762
  def transpose_chars(key); end

  # source://reline//lib/reline/line_editor.rb#2782
  def transpose_words(key); end

  # Editline:: +vi-kill-line-prev+ (vi: +Ctrl-U+) Delete the string from the
  #            beginning  of the edit buffer to the cursor and save it to the
  #            cut buffer.
  # GNU Readline:: +unix-line-discard+ (+C-u+) Kill backward from the cursor
  #                to the beginning of the current line.
  #
  # source://reline//lib/reline/line_editor.rb#2625
  def unix_line_discard(key); end

  # source://reline//lib/reline/line_editor.rb#2841
  def unix_word_rubout(key); end

  # source://reline//lib/reline/line_editor.rb#2825
  def upcase_word(key); end

  # source://reline//lib/reline/line_editor.rb#2863
  def vi_add(key); end

  # source://reline//lib/reline/line_editor.rb#2977
  def vi_add_at_eol(key); end

  # source://reline//lib/reline/line_editor.rb#3003
  def vi_change_meta(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2868
  def vi_command_mode(key); end

  # source://reline//lib/reline/line_editor.rb#3021
  def vi_delete_meta(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2952
  def vi_delete_prev_char(key); end

  # source://reline//lib/reline/line_editor.rb#2933
  def vi_end_big_word(key, arg: T.unsafe(nil), inclusive: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#3048
  def vi_end_of_transmission(key); end

  # source://reline//lib/reline/line_editor.rb#2894
  def vi_end_word(key, arg: T.unsafe(nil), inclusive: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#3048
  def vi_eof_maybe(key); end

  # source://reline//lib/reline/line_editor.rb#2104
  def vi_first_print(key); end

  # source://reline//lib/reline/line_editor.rb#3106
  def vi_histedit(key); end

  # source://reline//lib/reline/line_editor.rb#2859
  def vi_insert(key); end

  # source://reline//lib/reline/line_editor.rb#2972
  def vi_insert_at_bol(key); end

  # source://reline//lib/reline/line_editor.rb#3317
  def vi_join_lines(key, arg: T.unsafe(nil)); end

  # Editline:: +vi-kill-line-prev+ (vi: +Ctrl-U+) Delete the string from the
  #            beginning  of the edit buffer to the cursor and save it to the
  #            cut buffer.
  # GNU Readline:: +unix-line-discard+ (+C-u+) Kill backward from the cursor
  #                to the beginning of the current line.
  #
  # source://reline//lib/reline/line_editor.rb#2625
  def vi_kill_line_prev(key); end

  # source://reline//lib/reline/line_editor.rb#3048
  def vi_list_or_eof(key); end

  # source://reline//lib/reline/line_editor.rb#2868
  def vi_movement_mode(key); end

  # source://reline//lib/reline/line_editor.rb#2913
  def vi_next_big_word(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#3212
  def vi_next_char(key, arg: T.unsafe(nil), inclusive: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2874
  def vi_next_word(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#3140
  def vi_paste_next(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#3128
  def vi_paste_prev(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2923
  def vi_prev_big_word(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#3269
  def vi_prev_char(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2884
  def vi_prev_word(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#3184
  def vi_replace_char(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2338
  def vi_search_next(key); end

  # source://reline//lib/reline/line_editor.rb#2333
  def vi_search_prev(key); end

  # source://reline//lib/reline/line_editor.rb#3169
  def vi_to_column(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#3083
  def vi_to_history_line(key); end

  # source://reline//lib/reline/line_editor.rb#3216
  def vi_to_next_char(key, arg: T.unsafe(nil), inclusive: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#3273
  def vi_to_prev_char(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#3036
  def vi_yank(key, arg: T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#2998
  def vi_zero(key); end

  # source://reline//lib/reline/line_editor.rb#2690
  def yank(key); end

  # source://reline//lib/reline/line_editor.rb#2702
  def yank_pop(key); end
end

# source://reline//lib/reline/line_editor.rb#51
Reline::LineEditor::CompletionJourneyData = Struct

# source://reline//lib/reline/line_editor.rb#44
Reline::LineEditor::CompletionState::COMPLETION = T.let(T.unsafe(nil), Symbol)

# source://reline//lib/reline/line_editor.rb#46
Reline::LineEditor::CompletionState::JOURNEY = T.let(T.unsafe(nil), Symbol)

# source://reline//lib/reline/line_editor.rb#45
Reline::LineEditor::CompletionState::MENU = T.let(T.unsafe(nil), Symbol)

# source://reline//lib/reline/line_editor.rb#47
Reline::LineEditor::CompletionState::MENU_WITH_PERFECT_MATCH = T.let(T.unsafe(nil), Symbol)

# source://reline//lib/reline/line_editor.rb#43
Reline::LineEditor::CompletionState::NORMAL = T.let(T.unsafe(nil), Symbol)

# source://reline//lib/reline/line_editor.rb#48
Reline::LineEditor::CompletionState::PERFECT_MATCH = T.let(T.unsafe(nil), Symbol)

# source://reline//lib/reline/line_editor.rb#643
Reline::LineEditor::DIALOG_DEFAULT_HEIGHT = T.let(T.unsafe(nil), Integer)

# source://reline//lib/reline/line_editor.rb#587
class Reline::LineEditor::Dialog
  # @return [Dialog] a new instance of Dialog
  #
  # source://reline//lib/reline/line_editor.rb#591
  def initialize(name, config, proc_scope); end

  # source://reline//lib/reline/line_editor.rb#615
  def call(key); end

  # Returns the value of attribute column.
  #
  # source://reline//lib/reline/line_editor.rb#589
  def column; end

  # Sets the attribute column
  #
  # @param value the value to set the attribute column to.
  #
  # source://reline//lib/reline/line_editor.rb#589
  def column=(_arg0); end

  # Returns the value of attribute contents.
  #
  # source://reline//lib/reline/line_editor.rb#588
  def contents; end

  # source://reline//lib/reline/line_editor.rb#608
  def contents=(contents); end

  # Returns the value of attribute lines_backup.
  #
  # source://reline//lib/reline/line_editor.rb#589
  def lines_backup; end

  # Sets the attribute lines_backup
  #
  # @param value the value to set the attribute lines_backup to.
  #
  # source://reline//lib/reline/line_editor.rb#589
  def lines_backup=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://reline//lib/reline/line_editor.rb#588
  def name; end

  # Returns the value of attribute pointer.
  #
  # source://reline//lib/reline/line_editor.rb#589
  def pointer; end

  # Sets the attribute pointer
  #
  # @param value the value to set the attribute pointer to.
  #
  # source://reline//lib/reline/line_editor.rb#589
  def pointer=(_arg0); end

  # Returns the value of attribute scroll_top.
  #
  # source://reline//lib/reline/line_editor.rb#589
  def scroll_top; end

  # Sets the attribute scroll_top
  #
  # @param value the value to set the attribute scroll_top to.
  #
  # source://reline//lib/reline/line_editor.rb#589
  def scroll_top=(_arg0); end

  # Returns the value of attribute scrollbar_pos.
  #
  # source://reline//lib/reline/line_editor.rb#589
  def scrollbar_pos; end

  # Sets the attribute scrollbar_pos
  #
  # @param value the value to set the attribute scrollbar_pos to.
  #
  # source://reline//lib/reline/line_editor.rb#589
  def scrollbar_pos=(_arg0); end

  # source://reline//lib/reline/line_editor.rb#600
  def set_cursor_pos(col, row); end

  # Returns the value of attribute trap_key.
  #
  # source://reline//lib/reline/line_editor.rb#589
  def trap_key; end

  # Sets the attribute trap_key
  #
  # @param value the value to set the attribute trap_key to.
  #
  # source://reline//lib/reline/line_editor.rb#589
  def trap_key=(_arg0); end

  # Returns the value of attribute vertical_offset.
  #
  # source://reline//lib/reline/line_editor.rb#589
  def vertical_offset; end

  # Sets the attribute vertical_offset
  #
  # @param value the value to set the attribute vertical_offset to.
  #
  # source://reline//lib/reline/line_editor.rb#589
  def vertical_offset=(_arg0); end

  # Returns the value of attribute width.
  #
  # source://reline//lib/reline/line_editor.rb#588
  def width; end

  # source://reline//lib/reline/line_editor.rb#604
  def width=(v); end
end

# source://reline//lib/reline/line_editor.rb#520
class Reline::LineEditor::DialogProcScope
  # @return [DialogProcScope] a new instance of DialogProcScope
  #
  # source://reline//lib/reline/line_editor.rb#521
  def initialize(line_editor, config, proc_to_exec, context); end

  # source://reline//lib/reline/line_editor.rb#582
  def call; end

  # source://reline//lib/reline/line_editor.rb#537
  def call_completion_proc_with_checking_args(pre, target, post); end

  # source://reline//lib/reline/line_editor.rb#574
  def completion_journey_data; end

  # source://reline//lib/reline/line_editor.rb#578
  def config; end

  # source://reline//lib/reline/line_editor.rb#529
  def context; end

  # source://reline//lib/reline/line_editor.rb#562
  def cursor_pos; end

  # source://reline//lib/reline/line_editor.rb#545
  def dialog; end

  # source://reline//lib/reline/line_editor.rb#566
  def just_cursor_moving; end

  # source://reline//lib/reline/line_editor.rb#558
  def key; end

  # source://reline//lib/reline/line_editor.rb#533
  def retrieve_completion_block(set_completion_quote_character = T.unsafe(nil)); end

  # source://reline//lib/reline/line_editor.rb#570
  def screen_width; end

  # source://reline//lib/reline/line_editor.rb#549
  def set_cursor_pos(col, row); end

  # source://reline//lib/reline/line_editor.rb#541
  def set_dialog(dialog); end

  # source://reline//lib/reline/line_editor.rb#554
  def set_key(key); end
end

# source://reline//lib/reline/line_editor.rb#55
Reline::LineEditor::MINIMUM_SCROLLBAR_HEIGHT = T.let(T.unsafe(nil), Integer)

# source://reline//lib/reline/line_editor.rb#52
Reline::LineEditor::MenuInfo = Struct

# source://reline//lib/reline/line_editor.rb#54
Reline::LineEditor::PROMPT_LIST_CACHE_TIMEOUT = T.let(T.unsafe(nil), Float)

# source://reline//lib/reline/line_editor.rb#21
Reline::LineEditor::VI_MOTIONS = T.let(T.unsafe(nil), Array)

# source://reline//lib/reline/terminfo.rb#12
module Reline::Terminfo
  extend ::Fiddle
  extend ::Fiddle::CParser
  extend ::Fiddle::Importer

  class << self
    # source://reline//lib/reline/terminfo.rb#32
    def curses_dl; end

    # source://reline//lib/reline/terminfo.rb#17
    def curses_dl_files; end

    # @return [Boolean]
    #
    # source://reline//lib/reline/terminfo.rb#171
    def enabled?; end
  end
end

# source://reline//lib/reline.rb#16
Reline::USERNAME_COMPLETION_PROC = T.let(T.unsafe(nil), T.untyped)

# source://reline//lib/reline/unicode.rb#1
class Reline::Unicode
  class << self
    # source://reline//lib/reline/unicode.rb#130
    def calculate_width(str, allow_escape_code = T.unsafe(nil)); end

    # source://reline//lib/reline/unicode.rb#335
    def ed_transpose_words(line, byte_pointer); end

    # source://reline//lib/reline/unicode.rb#295
    def em_backward_word(line, byte_pointer); end

    # source://reline//lib/reline/unicode.rb#315
    def em_big_backward_word(line, byte_pointer); end

    # source://reline//lib/reline/unicode.rb#246
    def em_forward_word(line, byte_pointer); end

    # source://reline//lib/reline/unicode.rb#266
    def em_forward_word_with_capitalization(line, byte_pointer); end

    # source://reline//lib/reline/unicode.rb#69
    def escape_for_print(str); end

    # source://reline//lib/reline/unicode.rb#49
    def get_mbchar_byte_size_by_first_char(c); end

    # source://reline//lib/reline/unicode.rb#110
    def get_mbchar_width(mbchar); end

    # source://reline//lib/reline/unicode.rb#232
    def get_next_mbchar_size(line, byte_pointer); end

    # source://reline//lib/reline/unicode.rb#237
    def get_prev_mbchar_size(line, byte_pointer); end

    # source://reline//lib/reline/unicode.rb#157
    def split_by_width(str, max_width, encoding = T.unsafe(nil)); end

    # Take a chunk of a String cut by width with escape sequences.
    #
    # source://reline//lib/reline/unicode.rb#202
    def take_range(str, start_col, max_width, encoding = T.unsafe(nil)); end

    # source://reline//lib/reline/unicode.rb#624
    def vi_backward_word(line, byte_pointer); end

    # source://reline//lib/reline/unicode.rb#486
    def vi_big_backward_word(line, byte_pointer); end

    # source://reline//lib/reline/unicode.rb#456
    def vi_big_forward_end_word(line, byte_pointer); end

    # source://reline//lib/reline/unicode.rb#436
    def vi_big_forward_word(line, byte_pointer); end

    # source://reline//lib/reline/unicode.rb#656
    def vi_first_print(line); end

    # source://reline//lib/reline/unicode.rb#547
    def vi_forward_end_word(line, byte_pointer); end

    # source://reline//lib/reline/unicode.rb#506
    def vi_forward_word(line, byte_pointer, drop_terminate_spaces = T.unsafe(nil)); end
  end
end

# source://reline//lib/reline/unicode.rb#40
Reline::Unicode::CSI_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://reline//lib/reline/unicode.rb#45
Reline::Unicode::CSI_REGEXP_INDEX = T.let(T.unsafe(nil), Integer)

# Ambiguous
#
# source://reline//lib/reline/unicode/east_asian_width.rb#158
Reline::Unicode::EastAsianWidth::TYPE_A = T.let(T.unsafe(nil), Regexp)

# Fullwidth
#
# source://reline//lib/reline/unicode/east_asian_width.rb#6
Reline::Unicode::EastAsianWidth::TYPE_F = T.let(T.unsafe(nil), Regexp)

# Halfwidth
#
# source://reline//lib/reline/unicode/east_asian_width.rb#13
Reline::Unicode::EastAsianWidth::TYPE_H = T.let(T.unsafe(nil), Regexp)

# Neutral
#
# source://reline//lib/reline/unicode/east_asian_width.rb#341
Reline::Unicode::EastAsianWidth::TYPE_N = T.let(T.unsafe(nil), Regexp)

# Narrow
#
# source://reline//lib/reline/unicode/east_asian_width.rb#147
Reline::Unicode::EastAsianWidth::TYPE_NA = T.let(T.unsafe(nil), Regexp)

# Wide
#
# source://reline//lib/reline/unicode/east_asian_width.rb#24
Reline::Unicode::EastAsianWidth::TYPE_W = T.let(T.unsafe(nil), Regexp)

# C-? C-8
#
# source://reline//lib/reline/unicode.rb#36
Reline::Unicode::EscapedChars = T.let(T.unsafe(nil), Array)

# source://reline//lib/reline/unicode.rb#2
Reline::Unicode::EscapedPairs = T.let(T.unsafe(nil), Hash)

# source://reline//lib/reline/unicode.rb#47
Reline::Unicode::GRAPHEME_CLUSTER_INDEX = T.let(T.unsafe(nil), Integer)

# source://reline//lib/reline/unicode.rb#82
Reline::Unicode::HalfwidthDakutenHandakuten = T.let(T.unsafe(nil), Regexp)

# source://reline//lib/reline/unicode.rb#84
Reline::Unicode::MBCharWidthRE = T.let(T.unsafe(nil), Regexp)

# source://reline//lib/reline/unicode.rb#39
Reline::Unicode::NON_PRINTING_END = T.let(T.unsafe(nil), String)

# source://reline//lib/reline/unicode.rb#44
Reline::Unicode::NON_PRINTING_END_INDEX = T.let(T.unsafe(nil), Integer)

# source://reline//lib/reline/unicode.rb#38
Reline::Unicode::NON_PRINTING_START = T.let(T.unsafe(nil), String)

# source://reline//lib/reline/unicode.rb#43
Reline::Unicode::NON_PRINTING_START_INDEX = T.let(T.unsafe(nil), Integer)

# source://reline//lib/reline/unicode.rb#41
Reline::Unicode::OSC_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://reline//lib/reline/unicode.rb#46
Reline::Unicode::OSC_REGEXP_INDEX = T.let(T.unsafe(nil), Integer)

# source://reline//lib/reline/unicode.rb#42
Reline::Unicode::WIDTH_SCANNER = T.let(T.unsafe(nil), Regexp)

# source://reline//lib/reline/version.rb#2
Reline::VERSION = T.let(T.unsafe(nil), String)
