# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `nio4r` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module NIO
  class << self
    def engine; end
  end
end

class NIO::ByteBuffer
  include(::Enumerable)

  def initialize(_); end

  def <<(_); end
  def [](_); end
  def capacity; end
  def clear; end
  def compact; end
  def each; end
  def flip; end
  def full?; end
  def get(*_); end
  def inspect; end
  def limit; end
  def limit=(_); end
  def mark; end
  def position; end
  def position=(_); end
  def read_from(_); end
  def remaining; end
  def reset; end
  def rewind; end
  def size; end
  def write_to(_); end
end

class NIO::ByteBuffer::MarkUnsetError < ::IOError
end

class NIO::ByteBuffer::OverflowError < ::IOError
end

class NIO::ByteBuffer::UnderflowError < ::IOError
end

NIO::ENGINE = T.let(T.unsafe(nil), String)

class NIO::Monitor
  def initialize(_, _, _); end

  def add_interest(_); end
  def close(*_); end
  def closed?; end
  def interests; end
  def interests=(_); end
  def io; end
  def readable?; end
  def readiness; end
  def remove_interest(_); end
  def selector; end
  def value; end
  def value=(_); end
  def writable?; end
  def writeable?; end
end

class NIO::Selector
  def initialize(*_); end

  def backend; end
  def close; end
  def closed?; end
  def deregister(_); end
  def empty?; end
  def register(_, _); end
  def registered?(_); end
  def select(*_); end
  def wakeup; end

  class << self
    def backends; end
  end
end

NIO::VERSION = T.let(T.unsafe(nil), String)
