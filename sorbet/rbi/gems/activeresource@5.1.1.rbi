# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   tapioca sync

# typed: true

module ActiveResource
  extend(::ActiveSupport::Autoload)
end

class ActiveResource::BadRequest < ::ActiveResource::ClientError
end

class ActiveResource::Base
  include(::ActiveModel::Validations)
  include(::ActiveSupport::Callbacks)
  include(::ActiveModel::Validations::HelperMethods)
  include(::ActiveResource::Validations)
  include(::ActiveResource::CustomMethods)
  include(::ActiveResource::Callbacks)
  include(::ActiveModel::Validations::Callbacks)
  include(::ActiveModel::Conversion)
  include(::ActiveModel::Serialization)
  include(::ActiveModel::Serializers::JSON)
  include(::ActiveModel::Serializers::Xml)
  include(::ActiveResource::Reflection)
  extend(::ThreadsafeAttributes)
  extend(::ActiveModel::Naming)
  extend(::ActiveResource::Associations)
  extend(::ActiveModel::Validations::ClassMethods)
  extend(::ActiveModel::Callbacks)
  extend(::ActiveSupport::Callbacks::ClassMethods)
  extend(::ActiveSupport::DescendantsTracker)
  extend(::ActiveModel::Translation)
  extend(::ActiveModel::Validations::HelperMethods)
  extend(::ActiveResource::CustomMethods::ClassMethods)
  extend(::ActiveModel::Validations::Callbacks::ClassMethods)
  extend(::ActiveModel::Conversion::ClassMethods)
  extend(::ActiveResource::Reflection::ClassMethods)

  def initialize(attributes = _, persisted = _); end

  def ==(other); end
  def __callbacks; end
  def __callbacks?; end
  def _collection_parser; end
  def _collection_parser=(val); end
  def _collection_parser?; end
  def _create_callbacks; end
  def _destroy_callbacks; end
  def _format; end
  def _format=(val); end
  def _format?; end
  def _run_create_callbacks(&block); end
  def _run_destroy_callbacks(&block); end
  def _run_save_callbacks(&block); end
  def _run_update_callbacks(&block); end
  def _run_validate_callbacks(&block); end
  def _run_validation_callbacks(&block); end
  def _save_callbacks; end
  def _update_callbacks; end
  def _validate_callbacks; end
  def _validation_callbacks; end
  def _validators; end
  def _validators?; end
  def attributes; end
  def attributes=(_); end
  def clone; end
  def connection_class; end
  def connection_class=(val); end
  def connection_class?; end
  def destroy; end
  def dup; end
  def encode(options = _); end
  def eql?(other); end
  def exists?; end
  def hash; end
  def id; end
  def id=(id); end
  def include_format_in_path; end
  def include_format_in_path=(val); end
  def include_format_in_path?; end
  def include_root_in_json; end
  def include_root_in_json?; end
  def known_attributes; end
  def load(attributes, remove_root = _, persisted = _); end
  def logger; end
  def model_name(*args, &block); end
  def new?; end
  def new_record?; end
  def persisted?; end
  def prefix_options; end
  def prefix_options=(_); end
  def read_attribute_for_serialization(n); end
  def reflections; end
  def reflections=(val); end
  def reflections?; end
  def reload; end
  def respond_to_without_attributes?(*_); end
  def save(options = _); end
  def save!; end
  def save_without_validation; end
  def schema; end
  def to_json(options = _); end
  def to_xml(options = _); end
  def update_attribute(name, value); end
  def update_attributes(attributes); end
  def validation_context; end

  protected

  def collection_path(options = _); end
  def connection(refresh = _); end
  def create; end
  def element_path(options = _); end
  def element_url(options = _); end
  def id_from_response(response); end
  def load_attributes_from_response(response); end
  def new_element_path; end
  def update; end

  private

  def const_valid?(*const_args); end
  def create_resource_for(resource_name); end
  def find_or_create_resource_for(name); end
  def find_or_create_resource_for_collection(name); end
  def find_or_create_resource_in_modules(resource_name, module_names); end
  def method_missing(method_symbol, *arguments); end
  def respond_to_missing?(method, include_priv = _); end
  def response_code_allows_body?(c); end
  def split_options(options = _); end
  def validation_context=(_); end

  def self.__callbacks; end
  def self.__callbacks=(val); end
  def self.__callbacks?; end
  def self._collection_parser; end
  def self._collection_parser=(val); end
  def self._collection_parser?; end
  def self._connection; end
  def self._connection=(value); end
  def self._connection_defined?; end
  def self._create_callbacks; end
  def self._create_callbacks=(value); end
  def self._destroy_callbacks; end
  def self._destroy_callbacks=(value); end
  def self._format; end
  def self._format=(val); end
  def self._format?; end
  def self._headers; end
  def self._headers=(value); end
  def self._headers_defined?; end
  def self._password; end
  def self._password=(value); end
  def self._password_defined?; end
  def self._proxy; end
  def self._proxy=(value); end
  def self._proxy_defined?; end
  def self._save_callbacks; end
  def self._save_callbacks=(value); end
  def self._site; end
  def self._site=(value); end
  def self._site_defined?; end
  def self._update_callbacks; end
  def self._update_callbacks=(value); end
  def self._user; end
  def self._user=(value); end
  def self._user_defined?; end
  def self._validate_callbacks; end
  def self._validate_callbacks=(value); end
  def self._validation_callbacks; end
  def self._validation_callbacks=(value); end
  def self._validators; end
  def self._validators=(val); end
  def self._validators?; end
  def self.after_create(*args, &block); end
  def self.after_destroy(*args, &block); end
  def self.after_save(*args, &block); end
  def self.after_update(*args, &block); end
  def self.all(*args); end
  def self.around_create(*args, &block); end
  def self.around_destroy(*args, &block); end
  def self.around_save(*args, &block); end
  def self.around_update(*args, &block); end
  def self.auth_type; end
  def self.auth_type=(auth_type); end
  def self.before_create(*args, &block); end
  def self.before_destroy(*args, &block); end
  def self.before_save(*args, &block); end
  def self.before_update(*args, &block); end
  def self.build(attributes = _); end
  def self.collection_name; end
  def self.collection_name=(_); end
  def self.collection_parser; end
  def self.collection_parser=(parser_instance); end
  def self.collection_path(prefix_options = _, query_options = _); end
  def self.connection(refresh = _); end
  def self.connection_class; end
  def self.connection_class=(val); end
  def self.connection_class?; end
  def self.create(attributes = _); end
  def self.create!(attributes = _); end
  def self.delete(custom_method_name, options = _); end
  def self.element_name; end
  def self.element_name=(_); end
  def self.element_path(id, prefix_options = _, query_options = _); end
  def self.element_url(id, prefix_options = _, query_options = _); end
  def self.exists?(id, options = _); end
  def self.find(*arguments); end
  def self.first(*args); end
  def self.format; end
  def self.format=(mime_type_reference_or_format); end
  def self.format_extension; end
  def self.get(custom_method_name, options = _); end
  def self.headers; end
  def self.include_format_in_path; end
  def self.include_format_in_path=(val); end
  def self.include_format_in_path?; end
  def self.include_root_in_json; end
  def self.include_root_in_json=(val); end
  def self.include_root_in_json?; end
  def self.known_attributes; end
  def self.last(*args); end
  def self.logger; end
  def self.logger=(logger); end
  def self.new_element_path(prefix_options = _); end
  def self.open_timeout; end
  def self.open_timeout=(timeout); end
  def self.orig_delete(id, options = _); end
  def self.password; end
  def self.password=(password); end
  def self.patch(custom_method_name, options = _, body = _); end
  def self.post(custom_method_name, options = _, body = _); end
  def self.prefix(options = _); end
  def self.prefix=(value = _); end
  def self.prefix_source; end
  def self.primary_key; end
  def self.primary_key=(_); end
  def self.proxy; end
  def self.proxy=(proxy); end
  def self.put(custom_method_name, options = _, body = _); end
  def self.read_timeout; end
  def self.read_timeout=(timeout); end
  def self.reflections; end
  def self.reflections=(val); end
  def self.reflections?; end
  def self.schema(&block); end
  def self.schema=(the_schema); end
  def self.set_collection_name(_); end
  def self.set_element_name(_); end
  def self.set_prefix(value = _); end
  def self.set_primary_key(_); end
  def self.site; end
  def self.site=(site); end
  def self.ssl_options; end
  def self.ssl_options=(options); end
  def self.timeout; end
  def self.timeout=(timeout); end
  def self.user; end
  def self.user=(user); end
  def self.where(clauses = _); end
end

module ActiveResource::Callbacks
  extend(::ActiveSupport::Concern)

  include(::ActiveSupport::Callbacks)
  include(::ActiveModel::Validations::Callbacks)

  mixes_in_class_methods(::ActiveSupport::DescendantsTracker)
end

ActiveResource::Callbacks::CALLBACKS = T.let(T.unsafe(nil), Array)

class ActiveResource::ClientError < ::ActiveResource::ConnectionError
end

class ActiveResource::Collection
  include(::Enumerable)

  def initialize(elements = _); end

  def &(*args, &block); end
  def *(*args, &block); end
  def +(*args, &block); end
  def -(*args, &block); end
  def <<(*args, &block); end
  def <=>(*args, &block); end
  def ==(arg); end
  def [](*args, &block); end
  def []=(*args, &block); end
  def all?(*args, &block); end
  def any?(*args, &block); end
  def append(*args, &block); end
  def as_json(*args, &block); end
  def assoc(*args, &block); end
  def at(*args, &block); end
  def blank?(*args, &block); end
  def bsearch(*args, &block); end
  def bsearch_index(*args, &block); end
  def clear(*args, &block); end
  def collect(*args, &block); end
  def collect!; end
  def combination(*args, &block); end
  def compact(*args, &block); end
  def compact!(*args, &block); end
  def concat(*args, &block); end
  def count(*args, &block); end
  def cycle(*args, &block); end
  def deep_dup(*args, &block); end
  def delete(*args, &block); end
  def delete_at(*args, &block); end
  def delete_if(*args, &block); end
  def difference(*args, &block); end
  def dig(*args, &block); end
  def drop(*args, &block); end
  def drop_while(*args, &block); end
  def each(*args, &block); end
  def each_index(*args, &block); end
  def elements; end
  def elements=(_); end
  def empty?(*args, &block); end
  def eql?(*args, &block); end
  def extract_options!(*args, &block); end
  def fetch(*args, &block); end
  def fifth(*args, &block); end
  def fill(*args, &block); end
  def filter(*args, &block); end
  def filter!(*args, &block); end
  def find_index(*args, &block); end
  def first(*args, &block); end
  def first_or_create(attributes = _); end
  def first_or_initialize(attributes = _); end
  def flatten(*args, &block); end
  def flatten!(*args, &block); end
  def forty_two(*args, &block); end
  def fourth(*args, &block); end
  def from(*args, &block); end
  def hash(*args, &block); end
  def in_groups(*args, &block); end
  def in_groups_of(*args, &block); end
  def include?(*args, &block); end
  def index(*args, &block); end
  def inquiry(*args, &block); end
  def insert(*args, &block); end
  def inspect(*args, &block); end
  def join(*args, &block); end
  def keep_if(*args, &block); end
  def last(*args, &block); end
  def length(*args, &block); end
  def map(*args, &block); end
  def map!; end
  def max(*args, &block); end
  def min(*args, &block); end
  def none?(*args, &block); end
  def one?(*args, &block); end
  def original_params; end
  def original_params=(_); end
  def pack(*args, &block); end
  def permutation(*args, &block); end
  def pop(*args, &block); end
  def prepend(*args, &block); end
  def pretty_print(*args, &block); end
  def pretty_print_cycle(*args, &block); end
  def product(*args, &block); end
  def push(*args, &block); end
  def rassoc(*args, &block); end
  def reject(*args, &block); end
  def reject!(*args, &block); end
  def repeated_combination(*args, &block); end
  def repeated_permutation(*args, &block); end
  def replace(*args, &block); end
  def resource_class; end
  def resource_class=(_); end
  def reverse(*args, &block); end
  def reverse!(*args, &block); end
  def reverse_each(*args, &block); end
  def rindex(*args, &block); end
  def rotate(*args, &block); end
  def rotate!(*args, &block); end
  def sample(*args, &block); end
  def second(*args, &block); end
  def second_to_last(*args, &block); end
  def select(*args, &block); end
  def select!(*args, &block); end
  def shelljoin(*args, &block); end
  def shift(*args, &block); end
  def shuffle(*args, &block); end
  def shuffle!(*args, &block); end
  def size(*args, &block); end
  def slice(*args, &block); end
  def slice!(*args, &block); end
  def sort(*args, &block); end
  def sort!(*args, &block); end
  def sort_by!(*args, &block); end
  def split(*args, &block); end
  def sum(*args, &block); end
  def take(*args, &block); end
  def take_while(*args, &block); end
  def third(*args, &block); end
  def third_to_last(*args, &block); end
  def to(*args, &block); end
  def to_a; end
  def to_ary(*args, &block); end
  def to_default_s(*args, &block); end
  def to_formatted_s(*args, &block); end
  def to_h(*args, &block); end
  def to_param(*args, &block); end
  def to_query(*args, &block); end
  def to_s(*args, &block); end
  def to_sentence(*args, &block); end
  def to_xml(*args, &block); end
  def to_yaml(*args, &block); end
  def transpose(*args, &block); end
  def union(*args, &block); end
  def uniq(*args, &block); end
  def uniq!(*args, &block); end
  def unshift(*args, &block); end
  def values_at(*args, &block); end
  def where(clauses = _); end
  def without(*args, &block); end
  def zip(*args, &block); end
  def |(*args, &block); end
end

ActiveResource::Collection::SELF_DEFINE_METHODS = T.let(T.unsafe(nil), Array)

class ActiveResource::Connection
  def initialize(site, format = _, logger: _); end

  def auth_type; end
  def auth_type=(auth_type); end
  def bearer_token; end
  def bearer_token=(_); end
  def delete(path, headers = _); end
  def format; end
  def format=(_); end
  def get(path, headers = _); end
  def head(path, headers = _); end
  def logger; end
  def logger=(_); end
  def open_timeout; end
  def open_timeout=(_); end
  def password; end
  def password=(_); end
  def patch(path, body = _, headers = _); end
  def post(path, body = _, headers = _); end
  def proxy; end
  def proxy=(proxy); end
  def put(path, body = _, headers = _); end
  def read_timeout; end
  def read_timeout=(_); end
  def site; end
  def site=(site); end
  def ssl_options; end
  def ssl_options=(_); end
  def timeout; end
  def timeout=(_); end
  def user; end
  def user=(_); end

  private

  def apply_ssl_options(http); end
  def auth_attributes_for(uri, request_digest, params); end
  def authorization_header(http_method, uri); end
  def build_request_headers(headers, http_method, uri); end
  def client_nonce; end
  def configure_http(http); end
  def default_header; end
  def digest_auth_header(http_method, uri); end
  def extract_params_from_response; end
  def handle_response(response); end
  def http; end
  def http_format_header(http_method); end
  def legitimize_auth_type(auth_type); end
  def new_http; end
  def request(method, path, *arguments); end
  def response_auth_header; end
  def with_auth; end

  def self.requests; end
end

ActiveResource::Connection::HTTP_FORMAT_HEADER_NAMES = T.let(T.unsafe(nil), Hash)

class ActiveResource::ConnectionError < ::StandardError
  def initialize(response, message = _); end

  def response; end
  def to_s; end
end

module ActiveResource::CustomMethods
  extend(::ActiveSupport::Concern)

  def delete(method_name, options = _); end
  def get(method_name, options = _); end
  def patch(method_name, options = _, body = _); end
  def post(method_name, options = _, body = _); end
  def put(method_name, options = _, body = _); end

  private

  def custom_method_element_url(method_name, options = _); end
  def custom_method_new_element_url(method_name, options = _); end
end

module ActiveResource::CustomMethods::ClassMethods
  def custom_method_collection_url(method_name, options = _); end
end

class ActiveResource::ForbiddenAccess < ::ActiveResource::ClientError
end

module ActiveResource::Formats
  def self.[](mime_type_reference); end
  def self.remove_root(data); end
end

module ActiveResource::Formats::JsonFormat
  extend(::ActiveResource::Formats::JsonFormat)

  def decode(json); end
  def encode(hash, options = _); end
  def extension; end
  def mime_type; end
end

module ActiveResource::Formats::XmlFormat
  extend(::ActiveResource::Formats::XmlFormat)

  def decode(xml); end
  def encode(hash, options = _); end
  def extension; end
  def mime_type; end
end

class ActiveResource::HttpMock
  def initialize(site); end

  def delete(path, headers); end
  def get(path, headers); end
  def head(path, headers); end
  def inspect_responses; end
  def patch(path, body, headers); end
  def post(path, body, headers); end
  def put(path, body, headers); end

  def self.delete_responses_to_replace(new_responses); end
  def self.disable_net_connection!; end
  def self.enable_net_connection!; end
  def self.net_connection_disabled?; end
  def self.net_connection_enabled?; end
  def self.requests; end
  def self.reset!; end
  def self.respond_to(*args); end
  def self.responses; end
end

class ActiveResource::HttpMock::Responder
  def initialize(responses); end

  def delete(path, request_headers = _, body = _, status = _, response_headers = _); end
  def get(path, request_headers = _, body = _, status = _, response_headers = _); end
  def head(path, request_headers = _, body = _, status = _, response_headers = _); end
  def patch(path, request_headers = _, body = _, status = _, response_headers = _); end
  def post(path, request_headers = _, body = _, status = _, response_headers = _); end
  def put(path, request_headers = _, body = _, status = _, response_headers = _); end

  private

  def delete_duplicate_responses(request); end
end

class ActiveResource::MethodNotAllowed < ::ActiveResource::ClientError
  def allowed_methods; end
end

class ActiveResource::MissingPrefixParam < ::ArgumentError
end

class ActiveResource::Railtie < ::Rails::Railtie
end

class ActiveResource::Redirection < ::ActiveResource::ConnectionError
  def to_s; end
end

class ActiveResource::ResourceConflict < ::ActiveResource::ClientError
end

class ActiveResource::ResourceGone < ::ActiveResource::ClientError
end

class ActiveResource::ResourceNotFound < ::ActiveResource::ClientError
end

class ActiveResource::SSLError < ::ActiveResource::ConnectionError
  def initialize(message); end

  def to_s; end
end

class ActiveResource::Schema
  def initialize; end

  def attribute(name, type, options = _); end
  def attrs; end
  def attrs=(_); end
  def binary(*args); end
  def boolean(*args); end
  def date(*args); end
  def datetime(*args); end
  def decimal(*args); end
  def float(*args); end
  def integer(*args); end
  def string(*args); end
  def text(*args); end
  def time(*args); end
  def timestamp(*args); end
end

ActiveResource::Schema::KNOWN_ATTRIBUTE_TYPES = T.let(T.unsafe(nil), Array)

class ActiveResource::ServerError < ::ActiveResource::ConnectionError
end

module ActiveResource::Singleton
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveResource::Singleton::ClassMethods)

  def destroy; end

  protected

  def create; end
  def update; end

  private

  def singleton_path(options = _); end
end

module ActiveResource::Singleton::ClassMethods
  def find(options = _); end
  def singleton_name; end
  def singleton_name=(_); end
  def singleton_path(prefix_options = _, query_options = _); end

  private

  def find_singleton(options); end
end

class ActiveResource::TimeoutError < ::ActiveResource::ConnectionError
  def initialize(message); end

  def to_s; end
end

class ActiveResource::UnauthorizedAccess < ::ActiveResource::ClientError
end

module ActiveResource::VERSION
end

ActiveResource::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

ActiveResource::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

ActiveResource::VERSION::STRING = T.let(T.unsafe(nil), String)

ActiveResource::VERSION::TINY = T.let(T.unsafe(nil), Integer)

module ActiveResource::Validations
  extend(::ActiveSupport::Concern)

  def errors; end
  def load_remote_errors(remote_errors, save_cache = _); end
  def save_with_validation(options = _); end
  def valid?; end
end

module ActiveResource::Associations
  def belongs_to(name, options = _); end
  def defines_belongs_to_finder_method(reflection); end
  def defines_has_many_finder_method(reflection); end
  def defines_has_one_finder_method(reflection); end
  def has_many(name, options = _); end
  def has_one(name, options = _); end
end

module ActiveResource::Associations::Builder
end

class ActiveResource::Associations::Builder::Association
  def initialize(model, name, options); end

  def build; end
  def klass; end
  def macro; end
  def macro=(val); end
  def macro?; end
  def model; end
  def name; end
  def options; end
  def valid_options; end
  def valid_options=(val); end
  def valid_options?; end

  private

  def validate_options; end

  def self.build(model, name, options); end
  def self.macro; end
  def self.macro=(val); end
  def self.macro?; end
  def self.valid_options; end
  def self.valid_options=(val); end
  def self.valid_options?; end
end

class ActiveResource::Associations::Builder::BelongsTo < ::ActiveResource::Associations::Builder::Association
  def build; end

  def self.macro; end
  def self.valid_options; end
end

class ActiveResource::Associations::Builder::HasMany < ::ActiveResource::Associations::Builder::Association
  def build; end

  def self.macro; end
end

class ActiveResource::Associations::Builder::HasOne < ::ActiveResource::Associations::Builder::Association
  def build; end

  def self.macro; end
end

class ActiveResource::Errors < ::ActiveModel::Errors
  def from_array(messages, save_cache = _); end
  def from_hash(messages, save_cache = _); end
  def from_json(json, save_cache = _); end
  def from_xml(xml, save_cache = _); end
end

class ActiveResource::InvalidRequestError < ::StandardError
end

class ActiveResource::LogSubscriber < ::ActiveSupport::LogSubscriber
  def logger; end
  def request(event); end
end

module ActiveResource::Reflection
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveResource::Reflection::ClassMethods)
end

class ActiveResource::Reflection::AssociationReflection
  def initialize(macro, name, options); end

  def class_name; end
  def foreign_key; end
  def klass; end
  def macro; end
  def name; end
  def options; end

  private

  def derive_class_name; end
  def derive_foreign_key; end
end

module ActiveResource::Reflection::ClassMethods
  def create_reflection(macro, name, options); end
end

class ActiveResource::Request
  def initialize(method, path, body = _, headers = _); end

  def ==(req); end
  def body; end
  def body=(_); end
  def headers; end
  def headers=(_); end
  def method; end
  def method=(_); end
  def path; end
  def path=(_); end
  def to_s; end

  private

  def headers_match?(req); end
end

class ActiveResource::ResourceInvalid < ::ActiveResource::ClientError
end

class ActiveResource::Response
  def initialize(body, message = _, headers = _); end

  def ==(other); end
  def [](key); end
  def []=(key, value); end
  def body; end
  def body=(_); end
  def code; end
  def code=(_); end
  def headers; end
  def headers=(_); end
  def message; end
  def message=(_); end
  def success?; end
end

module ThreadsafeAttributes
  mixes_in_class_methods(::ThreadsafeAttributes::ClassMethods)


  private

  def get_threadsafe_attribute(name, main_thread); end
  def get_threadsafe_attribute_by_thread(name, thread); end
  def set_threadsafe_attribute(name, value, main_thread); end
  def set_threadsafe_attribute_by_thread(name, value, thread); end
  def threadsafe_attribute_defined?(name, main_thread); end
  def threadsafe_attribute_defined_by_thread?(name, thread); end

  def self.included(klass); end
end

module ThreadsafeAttributes::ClassMethods
  def threadsafe_attribute(*attrs); end
end
