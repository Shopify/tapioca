# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `measured-rails` gem.
# Please instead update this file by running `bin/tapioca gem measured-rails`.

module Measured
  class << self
    def build(&block); end
    def method_missing(method, *args); end
  end
end

class Measured::Length < ::Measured::Measurable
  class << self
    def unit_system; end
  end
end

module Measured::Rails; end

module Measured::Rails::ActiveRecord
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Measured::Rails::ActiveRecord::ClassMethods
end

module Measured::Rails::ActiveRecord::ClassMethods
  def measured(measured_class, *fields); end
  def measured_fields; end
end

module Measured::Rails::ActiveRecord::Length
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Measured::Rails::ActiveRecord::Length::ClassMethods
end

module Measured::Rails::ActiveRecord::Length::ClassMethods
  def measured_length(*fields); end
end

module Measured::Rails::ActiveRecord::Volume
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Measured::Rails::ActiveRecord::Volume::ClassMethods
end

module Measured::Rails::ActiveRecord::Volume::ClassMethods
  def measured_volume(*fields); end
end

module Measured::Rails::ActiveRecord::Weight
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Measured::Rails::ActiveRecord::Weight::ClassMethods
end

module Measured::Rails::ActiveRecord::Weight::ClassMethods
  def measured_weight(*fields); end
end

class Measured::Rails::Error < ::StandardError; end
class Measured::Rails::Railtie < ::Rails::Railtie; end
Measured::Rails::VERSION = T.let(T.unsafe(nil), String)
Measured::VERSION = T.let(T.unsafe(nil), String)

class Measured::Volume < ::Measured::Measurable
  class << self
    def unit_system; end
  end
end

class Measured::Weight < ::Measured::Measurable
  class << self
    def unit_system; end
  end
end

class MeasuredValidator < ::ActiveModel::EachValidator
  def validate_each(record, attribute, measurable); end

  private

  def message(record, default_message); end

  # @raise [ArgumentError]
  def value_for(key, record); end
end

MeasuredValidator::CHECKS = T.let(T.unsafe(nil), Hash)
