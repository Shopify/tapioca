# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `net-imap` gem.
# Please instead update this file by running `bin/tapioca gem net-imap`.

# Net::IMAP implements Internet Message Access Protocol (IMAP) client
# functionality.  The protocol is described in
# [IMAP[https://tools.ietf.org/html/rfc3501]].
#
# == IMAP Overview
#
# An \IMAP client connects to a server, and then authenticates
# itself using either #authenticate or #login.  Having
# authenticated itself, there is a range of commands
# available to it.  Most work with mailboxes, which may be
# arranged in an hierarchical namespace, and each of which
# contains zero or more messages.  How this is implemented on
# the server is implementation-dependent; on a UNIX server, it
# will frequently be implemented as files in mailbox format
# within a hierarchy of directories.
#
# To work on the messages within a mailbox, the client must
# first select that mailbox, using either #select or (for
# read-only access) #examine.  Once the client has successfully
# selected a mailbox, they enter _selected_ state, and that
# mailbox becomes the _current_ mailbox, on which mail-item
# related commands implicitly operate.
#
# Messages have two sorts of identifiers: message sequence
# numbers and UIDs.
#
# Message sequence numbers number messages within a mailbox
# from 1 up to the number of items in the mailbox.  If a new
# message arrives during a session, it receives a sequence
# number equal to the new size of the mailbox.  If messages
# are expunged from the mailbox, remaining messages have their
# sequence numbers "shuffled down" to fill the gaps.
#
# UIDs, on the other hand, are permanently guaranteed not to
# identify another message within the same mailbox, even if
# the existing message is deleted.  UIDs are required to
# be assigned in ascending (but not necessarily sequential)
# order within a mailbox; this means that if a non-IMAP client
# rearranges the order of mailitems within a mailbox, the
# UIDs have to be reassigned.  An \IMAP client thus cannot
# rearrange message orders.
#
# == Examples of Usage
#
# === List sender and subject of all recent messages in the default mailbox
#
#   imap = Net::IMAP.new('mail.example.com')
#   imap.authenticate('LOGIN', 'joe_user', 'joes_password')
#   imap.examine('INBOX')
#   imap.search(["RECENT"]).each do |message_id|
#     envelope = imap.fetch(message_id, "ENVELOPE")[0].attr["ENVELOPE"]
#     puts "#{envelope.from[0].name}: \t#{envelope.subject}"
#   end
#
# === Move all messages from April 2003 from "Mail/sent-mail" to "Mail/sent-apr03"
#
#   imap = Net::IMAP.new('mail.example.com')
#   imap.authenticate('LOGIN', 'joe_user', 'joes_password')
#   imap.select('Mail/sent-mail')
#   if not imap.list('Mail/', 'sent-apr03')
#     imap.create('Mail/sent-apr03')
#   end
#   imap.search(["BEFORE", "30-Apr-2003", "SINCE", "1-Apr-2003"]).each do |message_id|
#     imap.copy(message_id, "Mail/sent-apr03")
#     imap.store(message_id, "+FLAGS", [:Deleted])
#   end
#   imap.expunge
#
# == Thread Safety
#
# Net::IMAP supports concurrent threads. For example,
#
#   imap = Net::IMAP.new("imap.foo.net", "imap2")
#   imap.authenticate("cram-md5", "bar", "password")
#   imap.select("inbox")
#   fetch_thread = Thread.start { imap.fetch(1..-1, "UID") }
#   search_result = imap.search(["BODY", "hello"])
#   fetch_result = fetch_thread.value
#   imap.disconnect
#
# This script invokes the FETCH command and the SEARCH command concurrently.
#
# == Errors
#
# An IMAP server can send three different types of responses to indicate
# failure:
#
# NO:: the attempted command could not be successfully completed.  For
#      instance, the username/password used for logging in are incorrect;
#      the selected mailbox does not exist; etc.
#
# BAD:: the request from the client does not follow the server's
#       understanding of the IMAP protocol.  This includes attempting
#       commands from the wrong client state; for instance, attempting
#       to perform a SEARCH command without having SELECTed a current
#       mailbox.  It can also signal an internal server
#       failure (such as a disk crash) has occurred.
#
# BYE:: the server is saying goodbye.  This can be part of a normal
#       logout sequence, and can be used as part of a login sequence
#       to indicate that the server is (for some reason) unwilling
#       to accept your connection.  As a response to any other command,
#       it indicates either that the server is shutting down, or that
#       the server is timing out the client connection due to inactivity.
#
# These three error response are represented by the errors
# Net::IMAP::NoResponseError, Net::IMAP::BadResponseError, and
# Net::IMAP::ByeResponseError, all of which are subclasses of
# Net::IMAP::ResponseError.  Essentially, all methods that involve
# sending a request to the server can generate one of these errors.
# Only the most pertinent instances have been documented below.
#
# Because the IMAP class uses Sockets for communication, its methods
# are also susceptible to the various errors that can occur when
# working with sockets.  These are generally represented as
# Errno errors.  For instance, any method that involves sending a
# request to the server and/or receiving a response from it could
# raise an Errno::EPIPE error if the network connection unexpectedly
# goes down.  See the socket(7), ip(7), tcp(7), socket(2), connect(2),
# and associated man pages.
#
# Finally, a Net::IMAP::DataFormatError is thrown if low-level data
# is found to be in an incorrect format (for instance, when converting
# between UTF-8 and UTF-16), and Net::IMAP::ResponseParseError is
# thrown if a server response is non-parseable.
#
#
# == References
#
# [[IMAP[https://tools.ietf.org/html/rfc3501]]]
#    Crispin, M. "INTERNET MESSAGE ACCESS PROTOCOL - \VERSION 4rev1",
#    RFC-3501[https://tools.ietf.org/html/rfc3501], March 2003.  (Note:
#    obsoletes RFC-2060[https://tools.ietf.org/html/rfc2060], December 1996.)
#
# [[LANGUAGE-TAGS[https://tools.ietf.org/html/rfc1766]]]
#    Phillips, A. and Davis, M. "Tags for Identifying Languages",
#    RFC-5646[https://tools.ietf.org/html/rfc5646], September 2009.
#    (Note: obsoletes
#    RFC-3066[https://tools.ietf.org/html/rfc3066], January 2001,
#    RFC-4646[https://tools.ietf.org/html/rfc4646], September 2006, and
#    RFC-1766[https://tools.ietf.org/html/rfc1766], March 1995.)
#
# [[MD5[https://tools.ietf.org/html/rfc1864]]]
#    Myers, J. and M. Rose, "The Content-MD5 Header Field",
#    RFC-1864[https://tools.ietf.org/html/rfc1864], October 1995.
#
# [[MIME-IMB[https://tools.ietf.org/html/rfc2045]]]
#    Freed, N. and N. Borenstein, "MIME (Multipurpose Internet
#    Mail Extensions) Part One: Format of Internet Message Bodies",
#    RFC-2045[https://tools.ietf.org/html/rfc2045], November 1996.
#
# [[RFC-5322[https://tools.ietf.org/html/rfc5322]]]
#    Resnick, P., "Internet Message Format",
#    RFC-5322[https://tools.ietf.org/html/rfc5322], October 2008.
#    (Note: obsoletes
#    RFC-2822[https://tools.ietf.org/html/rfc2822], April 2001, and
#    RFC-822[https://tools.ietf.org/html/rfc822], August 1982.)
#
# [[EXT-QUOTA[https://tools.ietf.org/html/rfc2087]]]
#    Myers, J., "IMAP4 QUOTA extension",
#    RFC-2087[https://tools.ietf.org/html/rfc2087], January 1997.
#
# [[EXT-NAMESPACE[https://tools.ietf.org/html/rfc2342]]]
#    Gahrns, M. and Newman, C., "IMAP4 Namespace",
#    RFC-2342[https://tools.ietf.org/html/rfc2342], May 1998.
#
# [[EXT-ID[https://tools.ietf.org/html/rfc2971]]]
#    Showalter, T., "IMAP4 ID extension",
#    RFC-2971[https://tools.ietf.org/html/rfc2971], October 2000.
#
# [[EXT-ACL[https://tools.ietf.org/html/rfc4314]]]
#    Melnikov, A., "IMAP4 ACL extension",
#    RFC-4314[https://tools.ietf.org/html/rfc4314], December 2005.  (Note:
#    obsoletes RFC-2086[https://tools.ietf.org/html/rfc2086], January 1997.)
#
# [[EXT-SORT-THREAD[https://tools.ietf.org/html/rfc5256]]]
#    Crispin, M. and Muchison, K., "INTERNET MESSAGE ACCESS PROTOCOL - SORT
#    and THREAD Extensions", RFC-5256[https://tools.ietf.org/html/rfc5256],
#    June 2008.
#
# [[EXT-MOVE[https://tools.ietf.org/html/rfc6851]]]
#    Gulbrandsen, A. and Freed, N., "Internet Message Access Protocol (\IMAP) -
#    MOVE Extension", RFC-6851[https://tools.ietf.org/html/rfc6851], January
#    2013.
#
# [[OSSL]]
#    http://www.openssl.org
#
# [[RSSL]]
#    http://savannah.gnu.org/projects/rubypki
#
# [[UTF7[https://tools.ietf.org/html/rfc2152]]]
#    Goldsmith, D. and Davis, M., "UTF-7: A Mail-Safe Transformation Format of
#    Unicode", RFC-2152[https://tools.ietf.org/html/rfc2152], May 1997.
#
# source://net-imap-0.2.3/lib/net/imap.rb:222
class Net::IMAP < ::Net::Protocol
  include ::MonitorMixin
  include ::OpenSSL
  include ::OpenSSL::SSL
  extend ::Net::IMAP::Authenticators

  # :call-seq:
  #    Net::IMAP.new(host, options = {})
  #
  # Creates a new Net::IMAP object and connects it to the specified
  # +host+.
  #
  # +options+ is an option hash, each key of which is a symbol.
  #
  # The available options are:
  #
  # port::  Port number (default value is 143 for imap, or 993 for imaps)
  # ssl::   If +options[:ssl]+ is true, then an attempt will be made
  #         to use SSL (now TLS) to connect to the server.  For this to work
  #         OpenSSL [OSSL] and the Ruby OpenSSL [RSSL] extensions need to
  #         be installed.
  #         If +options[:ssl]+ is a hash, it's passed to
  #         OpenSSL::SSL::SSLContext#set_params as parameters.
  # open_timeout:: Seconds to wait until a connection is opened
  # idle_response_timeout:: Seconds to wait until an IDLE response is received
  #
  # The most common errors are:
  #
  # Errno::ECONNREFUSED:: Connection refused by +host+ or an intervening
  #                       firewall.
  # Errno::ETIMEDOUT:: Connection timed out (possibly due to packets
  #                    being dropped by an intervening firewall).
  # Errno::ENETUNREACH:: There is no route to that network.
  # SocketError:: Hostname not known or other socket error.
  # Net::IMAP::ByeResponseError:: The connected to the host was successful, but
  #                               it immediately said goodbye.
  #
  # @return [IMAP] a new instance of IMAP
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:1084
  def initialize(host, port_or_options = T.unsafe(nil), usessl = T.unsafe(nil), certs = T.unsafe(nil), verify = T.unsafe(nil)); end

  # Adds a response handler. For example, to detect when
  # the server sends a new EXISTS response (which normally
  # indicates new messages being added to the mailbox),
  # add the following handler after selecting the
  # mailbox:
  #
  #   imap.add_response_handler { |resp|
  #     if resp.kind_of?(Net::IMAP::UntaggedResponse) and resp.name == "EXISTS"
  #       puts "Mailbox now has #{resp.data} messages"
  #     end
  #   }
  #
  # @raise [ArgumentError]
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:958
  def add_response_handler(handler = T.unsafe(nil), &block); end

  # Sends a APPEND command to append the +message+ to the end of
  # the +mailbox+. The optional +flags+ argument is an array of
  # flags initially passed to the new message.  The optional
  # +date_time+ argument specifies the creation time to assign to the
  # new message; it defaults to the current time.
  # For example:
  #
  #   imap.append("inbox", <<EOF.gsub(/\n/, "\r\n"), [:Seen], Time.now)
  #   Subject: hello
  #   From: shugo@ruby-lang.org
  #   To: shugo@ruby-lang.org
  #
  #   hello world
  #   EOF
  #
  # A Net::IMAP::NoResponseError is raised if the mailbox does
  # not exist (it is not created automatically), or if the flags,
  # date_time, or message arguments contain errors.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:746
  def append(mailbox, message, flags = T.unsafe(nil), date_time = T.unsafe(nil)); end

  # Sends an AUTHENTICATE command to authenticate the client.
  # The +auth_type+ parameter is a string that represents
  # the authentication mechanism to be used. Currently Net::IMAP
  # supports the authentication mechanisms:
  #
  #   LOGIN:: login using cleartext user and password.
  #   CRAM-MD5:: login with cleartext user and encrypted password
  #              (see [RFC-2195] for a full description).  This
  #              mechanism requires that the server have the user's
  #              password stored in clear-text password.
  #
  # For both of these mechanisms, there should be two +args+: username
  # and (cleartext) password.  A server may not support one or the other
  # of these mechanisms; check #capability for a capability of
  # the form "AUTH=LOGIN" or "AUTH=CRAM-MD5".
  #
  # Authentication is done using the appropriate authenticator object:
  # see +add_authenticator+ for more information on plugging in your own
  # authenticator.
  #
  # For example:
  #
  #    imap.authenticate('LOGIN', user, password)
  #
  # A Net::IMAP::NoResponseError is raised if authentication fails.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:403
  def authenticate(auth_type, *args); end

  # Sends a CAPABILITY command, and returns an array of
  # capabilities that the server supports.  Each capability
  # is a string.  See [IMAP] for a list of possible
  # capabilities.
  #
  # Note that the Net::IMAP class does not modify its
  # behaviour according to the capabilities of the server;
  # it is up to the user of the class to ensure that
  # a certain capability is supported by a server before
  # using it.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:321
  def capability; end

  # Sends a CHECK command to request a checkpoint of the currently
  # selected mailbox.  This performs implementation-specific
  # housekeeping; for instance, reconciling the mailbox's
  # in-memory and on-disk state.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:760
  def check; end

  # The thread to receive exceptions.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:255
  def client_thread; end

  # The thread to receive exceptions.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:255
  def client_thread=(_arg0); end

  # Sends a CLOSE command to close the currently selected mailbox.
  # The CLOSE command permanently removes from the mailbox all
  # messages that have the \Deleted flag set.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:767
  def close; end

  # Sends a COPY command to copy the specified message(s) to the end
  # of the specified destination +mailbox+. The +set+ parameter is
  # a number, an array of numbers, or a Range object. The number is
  # a message sequence number.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:900
  def copy(set, mailbox); end

  # Sends a CREATE command to create a new +mailbox+.
  #
  # A Net::IMAP::NoResponseError is raised if a mailbox with that name
  # cannot be created.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:461
  def create(mailbox); end

  # Sends a DELETE command to remove the +mailbox+.
  #
  # A Net::IMAP::NoResponseError is raised if a mailbox with that name
  # cannot be deleted, either because it does not exist or because the
  # client does not have permission to delete it.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:470
  def delete(mailbox); end

  # Disconnects from the server.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:284
  def disconnect; end

  # Returns true if disconnected from the server.
  #
  # @return [Boolean]
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:307
  def disconnected?; end

  # Sends a EXAMINE command to select a +mailbox+ so that messages
  # in the +mailbox+ can be accessed.  Behaves the same as #select,
  # except that the selected +mailbox+ is identified as read-only.
  #
  # A Net::IMAP::NoResponseError is raised if the mailbox does not
  # exist or is for some reason non-examinable.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:450
  def examine(mailbox); end

  # Sends a EXPUNGE command to permanently remove from the currently
  # selected mailbox all messages that have the \Deleted flag set.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:773
  def expunge; end

  # Sends a FETCH command to retrieve data associated with a message
  # in the mailbox.
  #
  # The +set+ parameter is a number or a range between two numbers,
  # or an array of those.  The number is a message sequence number,
  # where -1 represents a '*' for use in range notation like 100..-1
  # being interpreted as '100:*'.  Beware that the +exclude_end?+
  # property of a Range object is ignored, and the contents of a
  # range are independent of the order of the range endpoints as per
  # the protocol specification, so 1...5, 5..1 and 5...1 are all
  # equivalent to 1..5.
  #
  # +attr+ is a list of attributes to fetch; see the documentation
  # for Net::IMAP::FetchData for a list of valid attributes.
  #
  # The return value is an array of Net::IMAP::FetchData or nil
  # (instead of an empty array) if there is no matching message.
  #
  # For example:
  #
  #   p imap.fetch(6..8, "UID")
  #   #=> [#<Net::IMAP::FetchData seqno=6, attr={"UID"=>98}>, \\
  #        #<Net::IMAP::FetchData seqno=7, attr={"UID"=>99}>, \\
  #        #<Net::IMAP::FetchData seqno=8, attr={"UID"=>100}>]
  #   p imap.fetch(6, "BODY[HEADER.FIELDS (SUBJECT)]")
  #   #=> [#<Net::IMAP::FetchData seqno=6, attr={"BODY[HEADER.FIELDS (SUBJECT)]"=>"Subject: test\r\n\r\n"}>]
  #   data = imap.uid_fetch(98, ["RFC822.SIZE", "INTERNALDATE"])[0]
  #   p data.seqno
  #   #=> 6
  #   p data.attr["RFC822.SIZE"]
  #   #=> 611
  #   p data.attr["INTERNALDATE"]
  #   #=> "12-Oct-2000 22:40:59 +0900"
  #   p data.attr["UID"]
  #   #=> 98
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:864
  def fetch(set, attr, mod = T.unsafe(nil)); end

  # Send the GETACL command along with a specified +mailbox+.
  # If this mailbox exists, an array containing objects of
  # Net::IMAP::MailboxACLItem will be returned.
  #
  # The ACL extension is described in [EXT-ACL[https://tools.ietf.org/html/rfc4314]]
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:685
  def getacl(mailbox); end

  # Sends the GETQUOTA command along with specified +mailbox+.
  # If this mailbox exists, then an array containing a
  # Net::IMAP::MailboxQuota object is returned.  This
  # command is generally only available to server admin.
  #
  # The QUOTA extension is described in [EXT-QUOTA[https://tools.ietf.org/html/rfc2087]]
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:645
  def getquota(mailbox); end

  # Sends the GETQUOTAROOT command along with the specified +mailbox+.
  # This command is generally available to both admin and user.
  # If this mailbox exists, it returns an array containing objects of type
  # Net::IMAP::MailboxQuotaRoot and Net::IMAP::MailboxQuota.
  #
  # The QUOTA extension is described in [EXT-QUOTA[https://tools.ietf.org/html/rfc2087]]
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:629
  def getquotaroot(mailbox); end

  # Returns an initial greeting response from the server.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:232
  def greeting; end

  # Sends an ID command, and returns a hash of the server's
  # response, or nil if the server does not identify itself.
  #
  # Note that the user should first check if the server supports the ID
  # capability. For example:
  #
  #    capabilities = imap.capability
  #    if capabilities.include?("ID")
  #      id = imap.id(
  #        name: "my IMAP client (ruby)",
  #        version: MyIMAP::VERSION,
  #        "support-url": "mailto:bugs@example.com",
  #        os: RbConfig::CONFIG["host_os"],
  #      )
  #    end
  #
  # See [EXT-ID[https://tools.ietf.org/html/rfc2971]] for field definitions.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:345
  def id(client_id = T.unsafe(nil)); end

  # Sends an IDLE command that waits for notifications of new or expunged
  # messages.  Yields responses from the server during the IDLE.
  #
  # Use #idle_done to leave IDLE.
  #
  # If +timeout+ is given, this method returns after +timeout+ seconds passed.
  # +timeout+ can be used for keep-alive.  For example, the following code
  # checks the connection for each 60 seconds.
  #
  #   loop do
  #     imap.idle(60) do |res|
  #       ...
  #     end
  #   end
  #
  # @raise [LocalJumpError]
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:1007
  def idle(timeout = T.unsafe(nil), &response_handler); end

  # Leaves IDLE.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:1037
  def idle_done; end

  # Seconds to wait until an IDLE response is received.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:252
  def idle_response_timeout; end

  # Sends a LIST command, and returns a subset of names from
  # the complete set of all names available to the client.
  # +refname+ provides a context (for instance, a base directory
  # in a directory-based mailbox hierarchy).  +mailbox+ specifies
  # a mailbox or (via wildcards) mailboxes under that context.
  # Two wildcards may be used in +mailbox+: '*', which matches
  # all characters *including* the hierarchy delimiter (for instance,
  # '/' on a UNIX-hosted directory-based mailbox hierarchy); and '%',
  # which matches all characters *except* the hierarchy delimiter.
  #
  # If +refname+ is empty, +mailbox+ is used directly to determine
  # which mailboxes to match.  If +mailbox+ is empty, the root
  # name of +refname+ and the hierarchy delimiter are returned.
  #
  # The return value is an array of +Net::IMAP::MailboxList+. For example:
  #
  #   imap.create("foo/bar")
  #   imap.create("foo/baz")
  #   p imap.list("", "foo/%")
  #   #=> [#<Net::IMAP::MailboxList attr=[:Noselect], delim="/", name="foo/">, \\
  #        #<Net::IMAP::MailboxList attr=[:Noinferiors, :Marked], delim="/", name="foo/bar">, \\
  #        #<Net::IMAP::MailboxList attr=[:Noinferiors], delim="/", name="foo/baz">]
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:527
  def list(refname, mailbox); end

  # Sends a LOGIN command to identify the client and carries
  # the plaintext +password+ authenticating this +user+.  Note
  # that, unlike calling #authenticate with an +auth_type+
  # of "LOGIN", #login does *not* use the login authenticator.
  #
  # A Net::IMAP::NoResponseError is raised if authentication fails.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:421
  def login(user, password); end

  # Sends a LOGOUT command to inform the server that the client is
  # done with the connection.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:359
  def logout; end

  # Sends a LSUB command, and returns a subset of names from the set
  # of names that the user has declared as being "active" or
  # "subscribed."  +refname+ and +mailbox+ are interpreted as
  # for #list.
  #
  # The return value is an array of +Net::IMAP::MailboxList+.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:698
  def lsub(refname, mailbox); end

  # Sends a MOVE command to move the specified message(s) to the end
  # of the specified destination +mailbox+. The +set+ parameter is
  # a number, an array of numbers, or a Range object. The number is
  # a message sequence number.
  #
  # The MOVE extension is described in [EXT-MOVE[https://tools.ietf.org/html/rfc6851]].
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:915
  def move(set, mailbox); end

  # Sends a NAMESPACE command and returns the namespaces that are available.
  # The NAMESPACE command allows a client to discover the prefixes of
  # namespaces used by a server for personal mailboxes, other users'
  # mailboxes, and shared mailboxes.
  #
  # The NAMESPACE extension predates [IMAP4rev1[https://tools.ietf.org/html/rfc2501]],
  # so most IMAP servers support it. Many popular IMAP servers are configured
  # with the default personal namespaces as `("" "/")`: no prefix and "/"
  # hierarchy delimiter. In that common case, the naive client may not have
  # any trouble naming mailboxes.
  #
  # But many servers are configured with the default personal namespace as
  # e.g. `("INBOX." ".")`, placing all personal folders under INBOX, with "."
  # as the hierarchy delimiter. If the client does not check for this, but
  # naively assumes it can use the same folder names for all servers, then
  # folder creation (and listing, moving, etc) can lead to errors.
  #
  # From RFC2342:
  #
  #    Although typically a server will support only a single Personal
  #    Namespace, and a single Other User's Namespace, circumstances exist
  #    where there MAY be multiples of these, and a client MUST be prepared
  #    for them. If a client is configured such that it is required to create
  #    a certain mailbox, there can be circumstances where it is unclear which
  #    Personal Namespaces it should create the mailbox in. In these
  #    situations a client SHOULD let the user select which namespaces to
  #    create the mailbox in.
  #
  # The user of this method should first check if the server supports the
  # NAMESPACE capability.  The return value is a +Net::IMAP::Namespaces+
  # object which has +personal+, +other+, and +shared+ fields, each an array
  # of +Net::IMAP::Namespace+ objects. These arrays will be empty when the
  # server responds with nil.
  #
  # For example:
  #
  #    capabilities = imap.capability
  #    if capabilities.include?("NAMESPACE")
  #      namespaces = imap.namespace
  #      if namespace = namespaces.personal.first
  #        prefix = namespace.prefix  # e.g. "" or "INBOX."
  #        delim  = namespace.delim   # e.g. "/" or "."
  #        # personal folders should use the prefix and delimiter
  #        imap.create(prefix + "foo")
  #        imap.create(prefix + "bar")
  #        imap.create(prefix + %w[path to my folder].join(delim))
  #      end
  #    end
  #
  # The NAMESPACE extension is described in [EXT-NAMESPACE[https://tools.ietf.org/html/rfc2342]]
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:584
  def namespace; end

  # Sends a NOOP command to the server. It does nothing.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:353
  def noop; end

  # Seconds to wait until a connection is opened.
  # If the IMAP object cannot open a connection within this time,
  # it raises a Net::OpenTimeout exception. The default value is 30 seconds.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:249
  def open_timeout; end

  # Removes the response handler.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:964
  def remove_response_handler(handler); end

  # Sends a RENAME command to change the name of the +mailbox+ to
  # +newname+.
  #
  # A Net::IMAP::NoResponseError is raised if a mailbox with the
  # name +mailbox+ cannot be renamed to +newname+ for whatever
  # reason; for instance, because +mailbox+ does not exist, or
  # because there is already a mailbox with the name +newname+.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:481
  def rename(mailbox, newname); end

  # Returns all response handlers.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:244
  def response_handlers; end

  # Returns recorded untagged responses.  For example:
  #
  #   imap.select("inbox")
  #   p imap.responses["EXISTS"][-1]
  #   #=> 2
  #   p imap.responses["UIDVALIDITY"][-1]
  #   #=> 968263756
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:241
  def responses; end

  # Sends a SEARCH command to search the mailbox for messages that
  # match the given searching criteria, and returns message sequence
  # numbers.  +keys+ can either be a string holding the entire
  # search string, or a single-dimension array of search keywords and
  # arguments.  The following are some common search criteria;
  # see [IMAP] section 6.4.4 for a full list.
  #
  # <message set>:: a set of message sequence numbers.  ',' indicates
  #                 an interval, ':' indicates a range.  For instance,
  #                 '2,10:12,15' means "2,10,11,12,15".
  #
  # BEFORE <date>:: messages with an internal date strictly before
  #                 <date>.  The date argument has a format similar
  #                 to 8-Aug-2002.
  #
  # BODY <string>:: messages that contain <string> within their body.
  #
  # CC <string>:: messages containing <string> in their CC field.
  #
  # FROM <string>:: messages that contain <string> in their FROM field.
  #
  # NEW:: messages with the \Recent, but not the \Seen, flag set.
  #
  # NOT <search-key>:: negate the following search key.
  #
  # OR <search-key> <search-key>:: "or" two search keys together.
  #
  # ON <date>:: messages with an internal date exactly equal to <date>,
  #             which has a format similar to 8-Aug-2002.
  #
  # SINCE <date>:: messages with an internal date on or after <date>.
  #
  # SUBJECT <string>:: messages with <string> in their subject.
  #
  # TO <string>:: messages with <string> in their TO field.
  #
  # For example:
  #
  #   p imap.search(["SUBJECT", "hello", "NOT", "NEW"])
  #   #=> [1, 6, 7, 8]
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:820
  def search(keys, charset = T.unsafe(nil)); end

  # Sends a SELECT command to select a +mailbox+ so that messages
  # in the +mailbox+ can be accessed.
  #
  # After you have selected a mailbox, you may retrieve the
  # number of items in that mailbox from +@responses["EXISTS"][-1]+,
  # and the number of recent messages from +@responses["RECENT"][-1]+.
  # Note that these values can change if new messages arrive
  # during a session; see #add_response_handler for a way of
  # detecting this event.
  #
  # A Net::IMAP::NoResponseError is raised if the mailbox does not
  # exist or is for some reason non-selectable.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:437
  def select(mailbox); end

  # Sends the SETACL command along with +mailbox+, +user+ and the
  # +rights+ that user is to have on that mailbox.  If +rights+ is nil,
  # then that user will be stripped of any rights to that mailbox.
  #
  # The ACL extension is described in [EXT-ACL[https://tools.ietf.org/html/rfc4314]]
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:672
  def setacl(mailbox, user, rights); end

  # Sends a SETQUOTA command along with the specified +mailbox+ and
  # +quota+.  If +quota+ is nil, then +quota+ will be unset for that
  # mailbox.  Typically one needs to be logged in as a server admin
  # for this to work.
  #
  # The QUOTA extension is described in [EXT-QUOTA[https://tools.ietf.org/html/rfc2087]]
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:658
  def setquota(mailbox, quota); end

  # Sends a SORT command to sort messages in the mailbox.
  # Returns an array of message sequence numbers. For example:
  #
  #   p imap.sort(["FROM"], ["ALL"], "US-ASCII")
  #   #=> [1, 2, 3, 5, 6, 7, 8, 4, 9]
  #   p imap.sort(["DATE"], ["SUBJECT", "hello"], "US-ASCII")
  #   #=> [6, 7, 8, 1]
  #
  # The SORT extension is described in [EXT-SORT-THREAD[https://tools.ietf.org/html/rfc5256]].
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:935
  def sort(sort_keys, search_keys, charset); end

  # Sends a STARTTLS command to start TLS session.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:364
  def starttls(options = T.unsafe(nil), verify = T.unsafe(nil)); end

  # Sends a STATUS command, and returns the status of the indicated
  # +mailbox+. +attr+ is a list of one or more attributes whose
  # statuses are to be requested.  Supported attributes include:
  #
  #   MESSAGES:: the number of messages in the mailbox.
  #   RECENT:: the number of recent messages in the mailbox.
  #   UNSEEN:: the number of unseen messages in the mailbox.
  #
  # The return value is a hash of attributes. For example:
  #
  #   p imap.status("inbox", ["MESSAGES", "RECENT"])
  #   #=> {"RECENT"=>0, "MESSAGES"=>44}
  #
  # A Net::IMAP::NoResponseError is raised if status values
  # for +mailbox+ cannot be returned; for instance, because it
  # does not exist.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:721
  def status(mailbox, attr); end

  # Sends a STORE command to alter data associated with messages
  # in the mailbox, in particular their flags. The +set+ parameter
  # is a number, an array of numbers, or a Range object. Each number
  # is a message sequence number.  +attr+ is the name of a data item
  # to store: 'FLAGS' will replace the message's flag list
  # with the provided one, '+FLAGS' will add the provided flags,
  # and '-FLAGS' will remove them.  +flags+ is a list of flags.
  #
  # The return value is an array of Net::IMAP::FetchData. For example:
  #
  #   p imap.store(6..8, "+FLAGS", [:Deleted])
  #   #=> [#<Net::IMAP::FetchData seqno=6, attr={"FLAGS"=>[:Seen, :Deleted]}>, \\
  #        #<Net::IMAP::FetchData seqno=7, attr={"FLAGS"=>[:Seen, :Deleted]}>, \\
  #        #<Net::IMAP::FetchData seqno=8, attr={"FLAGS"=>[:Seen, :Deleted]}>]
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:887
  def store(set, attr, flags); end

  # Sends a SUBSCRIBE command to add the specified +mailbox+ name to
  # the server's set of "active" or "subscribed" mailboxes as returned
  # by #lsub.
  #
  # A Net::IMAP::NoResponseError is raised if +mailbox+ cannot be
  # subscribed to; for instance, because it does not exist.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:491
  def subscribe(mailbox); end

  # Similar to #search, but returns message sequence numbers in threaded
  # format, as a Net::IMAP::ThreadMember tree.  The supported algorithms
  # are:
  #
  # ORDEREDSUBJECT:: split into single-level threads according to subject,
  #                  ordered by date.
  # REFERENCES:: split into threads by parent/child relationships determined
  #              by which message is a reply to which.
  #
  # Unlike #search, +charset+ is a required argument.  US-ASCII
  # and UTF-8 are sample values.
  #
  # The THREAD extension is described in [EXT-SORT-THREAD[https://tools.ietf.org/html/rfc5256]].
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:981
  def thread(algorithm, search_keys, charset); end

  # Similar to #copy, but +set+ contains unique identifiers.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:905
  def uid_copy(set, mailbox); end

  # Similar to #fetch, but +set+ contains unique identifiers.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:869
  def uid_fetch(set, attr, mod = T.unsafe(nil)); end

  # Similar to #move, but +set+ contains unique identifiers.
  #
  # The MOVE extension is described in [EXT-MOVE[https://tools.ietf.org/html/rfc6851]].
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:922
  def uid_move(set, mailbox); end

  # Similar to #search, but returns unique identifiers.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:825
  def uid_search(keys, charset = T.unsafe(nil)); end

  # Similar to #sort, but returns an array of unique identifiers.
  #
  # The SORT extension is described in [EXT-SORT-THREAD[https://tools.ietf.org/html/rfc5256]].
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:942
  def uid_sort(sort_keys, search_keys, charset); end

  # Similar to #store, but +set+ contains unique identifiers.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:892
  def uid_store(set, attr, flags); end

  # Similar to #thread, but returns unique identifiers instead of
  # message sequence numbers.
  #
  # The THREAD extension is described in [EXT-SORT-THREAD[https://tools.ietf.org/html/rfc5256]].
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:989
  def uid_thread(algorithm, search_keys, charset); end

  # Sends a UNSUBSCRIBE command to remove the specified +mailbox+ name
  # from the server's set of "active" or "subscribed" mailboxes.
  #
  # A Net::IMAP::NoResponseError is raised if +mailbox+ cannot be
  # unsubscribed from; for instance, because the client is not currently
  # subscribed to it.
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:501
  def unsubscribe(mailbox); end

  # Sends a XLIST command, and returns a subset of names from
  # the complete set of all names available to the client.
  # +refname+ provides a context (for instance, a base directory
  # in a directory-based mailbox hierarchy).  +mailbox+ specifies
  # a mailbox or (via wildcards) mailboxes under that context.
  # Two wildcards may be used in +mailbox+: '*', which matches
  # all characters *including* the hierarchy delimiter (for instance,
  # '/' on a UNIX-hosted directory-based mailbox hierarchy); and '%',
  # which matches all characters *except* the hierarchy delimiter.
  #
  # If +refname+ is empty, +mailbox+ is used directly to determine
  # which mailboxes to match.  If +mailbox+ is empty, the root
  # name of +refname+ and the hierarchy delimiter are returned.
  #
  # The XLIST command is like the LIST command except that the flags
  # returned refer to the function of the folder/mailbox, e.g. :Sent
  #
  # The return value is an array of +Net::IMAP::MailboxList+. For example:
  #
  #   imap.create("foo/bar")
  #   imap.create("foo/baz")
  #   p imap.xlist("", "foo/%")
  #   #=> [#<Net::IMAP::MailboxList attr=[:Noselect], delim="/", name="foo/">, \\
  #        #<Net::IMAP::MailboxList attr=[:Noinferiors, :Marked], delim="/", name="foo/bar">, \\
  #        #<Net::IMAP::MailboxList attr=[:Noinferiors], delim="/", name="foo/baz">]
  #
  # source://net-imap-0.2.3/lib/net/imap.rb:616
  def xlist(refname, mailbox); end

  private

  # source://net-imap-0.2.3/lib/net/imap.rb:1376
  def copy_internal(cmd, set, mailbox); end

  # source://net-imap-0.2.3/lib/net/imap.rb:1415
  def create_ssl_params(certs = T.unsafe(nil), verify = T.unsafe(nil)); end

  # source://net-imap-0.2.3/lib/net/imap.rb:1344
  def fetch_internal(cmd, set, attr, mod = T.unsafe(nil)); end

  # source://net-imap-0.2.3/lib/net/imap.rb:1308
  def generate_tag; end

  # source://net-imap-0.2.3/lib/net/imap.rb:1253
  def get_response; end

  # source://net-imap-0.2.3/lib/net/imap.rb:1226
  def get_tagged_response(tag, cmd, timeout = T.unsafe(nil)); end

  # source://net-imap-0.2.3/lib/net/imap.rb:1404
  def normalize_searching_criteria(keys); end

  # source://net-imap-0.2.3/lib/net/imap.rb:1313
  def put_string(str); end

  # source://net-imap-0.2.3/lib/net/imap.rb:1155
  def receive_responses; end

  # source://net-imap-0.2.3/lib/net/imap.rb:1273
  def record_response(name, data); end

  # source://net-imap-0.2.3/lib/net/imap.rb:1328
  def search_internal(cmd, keys, charset); end

  # source://net-imap-0.2.3/lib/net/imap.rb:1280
  def send_command(cmd, *args, &block); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:31
  def send_data(data, tag = T.unsafe(nil)); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:90
  def send_list_data(list, tag = T.unsafe(nil)); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:69
  def send_literal(str, tag = T.unsafe(nil)); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:86
  def send_number_data(num); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:65
  def send_quoted_string(str); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:50
  def send_string_data(str, tag = T.unsafe(nil)); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:114
  def send_symbol_data(symbol); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:106
  def send_time_data(time); end

  # source://net-imap-0.2.3/lib/net/imap.rb:1380
  def sort_internal(cmd, sort_keys, search_keys, charset); end

  # source://net-imap-0.2.3/lib/net/imap.rb:1432
  def start_tls_session(params = T.unsafe(nil)); end

  # source://net-imap-0.2.3/lib/net/imap.rb:1365
  def store_internal(cmd, set, attr, flags); end

  # source://net-imap-0.2.3/lib/net/imap.rb:1146
  def tcp_socket(host, port); end

  # source://net-imap-0.2.3/lib/net/imap.rb:1393
  def thread_internal(cmd, algorithm, search_keys, charset); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:10
  def validate_data(data); end

  class << self
    # Returns the debug mode.
    #
    # source://net-imap-0.2.3/lib/net/imap.rb:258
    def debug; end

    # Sets the debug mode.
    #
    # source://net-imap-0.2.3/lib/net/imap.rb:263
    def debug=(val); end

    # Decode a string from modified UTF-7 format to UTF-8.
    #
    # UTF-7 is a 7-bit encoding of Unicode [UTF7].  IMAP uses a
    # slightly modified version of this to encode mailbox names
    # containing non-ASCII characters; see [IMAP] section 5.1.3.
    #
    # Net::IMAP does _not_ automatically encode and decode
    # mailbox names to and from UTF-7.
    #
    # source://net-imap-0.2.3/lib/net/imap/data_encoding.rb:16
    def decode_utf7(s); end

    # The default port for IMAP connections, port 143
    #
    # source://net-imap-0.2.3/lib/net/imap.rb:268
    def default_imap_port; end

    # The default port for IMAPS connections, port 993
    #
    # source://net-imap-0.2.3/lib/net/imap.rb:273
    def default_imaps_port; end

    # The default port for IMAP connections, port 143
    #
    # source://net-imap-0.2.3/lib/net/imap.rb:268
    def default_port; end

    # The default port for IMAPS connections, port 993
    #
    # source://net-imap-0.2.3/lib/net/imap.rb:273
    def default_ssl_port; end

    # The default port for IMAPS connections, port 993
    #
    # source://net-imap-0.2.3/lib/net/imap.rb:273
    def default_tls_port; end

    # Encode a string from UTF-8 format to modified UTF-7.
    #
    # source://net-imap-0.2.3/lib/net/imap/data_encoding.rb:27
    def encode_utf7(s); end

    # Formats +time+ as an IMAP-style date.
    #
    # source://net-imap-0.2.3/lib/net/imap/data_encoding.rb:39
    def format_date(time); end

    # Formats +time+ as an IMAP-style date-time.
    #
    # source://net-imap-0.2.3/lib/net/imap/data_encoding.rb:44
    def format_datetime(time); end
  end
end

# Mailbox attribute indicating that this mailbox presents all messages in
# the user's message store. Implementations MAY omit some messages, such as,
# perhaps, those in \Trash and \Junk. When this special use is supported, it
# is almost certain to represent a virtual mailbox
#
# source://net-imap-0.2.3/lib/net/imap/flags.rb:193
Net::IMAP::ALL = T.let(T.unsafe(nil), Symbol)

# Mailbox attribute indicating that this mailbox is used to archive
# messages. The meaning of an "archival" mailbox is server dependent;
# typically, it will be used to get messages out of the inbox, or otherwise
# keep them out of the user's way, while still making them accessible
#
# source://net-imap-0.2.3/lib/net/imap/flags.rb:199
Net::IMAP::ARCHIVE = T.let(T.unsafe(nil), Symbol)

# source://net-imap-0.2.3/lib/net/imap/command_data.rb:133
class Net::IMAP::Atom
  # @return [Atom] a new instance of Atom
  #
  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:143
  def initialize(data); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:134
  def send_data(imap, tag); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:138
  def validate; end
end

# Registry for SASL authenticators used by Net::IMAP.
#
# source://net-imap-0.2.3/lib/net/imap/authenticators.rb:4
module Net::IMAP::Authenticators
  # Adds an authenticator for use with Net::IMAP#authenticate.  +auth_type+ is the
  # {SASL mechanism}[https://www.iana.org/assignments/sasl-mechanisms/sasl-mechanisms.xhtml]
  # supported by +authenticator+ (for instance, "+PLAIN+").  The +authenticator+
  # is an object which defines a +#process+ method to handle authentication with
  # the server.  See Net::IMAP::PlainAuthenticator, Net::IMAP::LoginAuthenticator,
  # Net::IMAP::CramMD5Authenticator, and Net::IMAP::DigestMD5Authenticator for
  # examples.
  #
  # If +auth_type+ refers to an existing authenticator, it will be
  # replaced by the new one.
  #
  # source://net-imap-0.2.3/lib/net/imap/authenticators.rb:16
  def add_authenticator(auth_type, authenticator); end

  # Builds an authenticator for Net::IMAP#authenticate.  +args+ will be passed
  # directly to the chosen authenticator's +#initialize+.
  #
  # source://net-imap-0.2.3/lib/net/imap/authenticators.rb:22
  def authenticator(auth_type, *args); end

  private

  # source://net-imap-0.2.3/lib/net/imap/authenticators.rb:33
  def authenticators; end
end

# Net::IMAP::BodyTypeAttachment represents attachment body structures
# of messages.
#
# ==== Fields:
#
# media_type:: Returns the content media type name.
#
# subtype:: Returns +nil+.
#
# param:: Returns a hash that represents parameters.
#
# multipart?:: Returns false.
#
# source://net-imap-0.2.3/lib/net/imap/response_data.rb:472
class Net::IMAP::BodyTypeAttachment < ::Struct
  # @return [Boolean]
  #
  # source://net-imap-0.2.3/lib/net/imap/response_data.rb:473
  def multipart?; end
end

# Net::IMAP::BodyTypeBasic represents basic body structures of messages.
#
# ==== Fields:
#
# media_type:: Returns the content media type name as defined in [MIME-IMB].
#
# subtype:: Returns the content subtype name as defined in [MIME-IMB].
#
# param:: Returns a hash that represents parameters as defined in [MIME-IMB].
#
# content_id:: Returns a string giving the content id as defined in [MIME-IMB].
#
# description:: Returns a string giving the content description as defined in
#               [MIME-IMB].
#
#            [MIME-IMB].
#
# size:: Returns a number giving the size of the body in octets.
#
# md5:: Returns a string giving the body MD5 value as defined in [MD5].
#
# disposition:: Returns a Net::IMAP::ContentDisposition object giving
#               the content disposition.
#
# language:: Returns a string or an array of strings giving the body
#            language value as defined in [LANGUAGE-TAGS].
#
# extension:: Returns extension data.
#
# multipart?:: Returns false.
#
# source://net-imap-0.2.3/lib/net/imap/response_data.rb:388
class Net::IMAP::BodyTypeBasic < ::Struct
  # Obsolete: use +subtype+ instead.  Calling this will
  # generate a warning message to +stderr+, then return
  # the value of +subtype+.
  #
  # source://net-imap-0.2.3/lib/net/imap/response_data.rb:396
  def media_subtype; end

  # @return [Boolean]
  #
  # source://net-imap-0.2.3/lib/net/imap/response_data.rb:389
  def multipart?; end
end

# source://net-imap-0.2.3/lib/net/imap/response_data.rb:520
class Net::IMAP::BodyTypeExtension < ::Struct
  # @return [Boolean]
  #
  # source://net-imap-0.2.3/lib/net/imap/response_data.rb:521
  def multipart?; end
end

# Net::IMAP::BodyTypeMessage represents MESSAGE/RFC822 body structures of messages.
#
# ==== Fields:
#
# envelope:: Returns a Net::IMAP::Envelope giving the envelope structure.
#
# body:: Returns an object giving the body structure.
#
# And Net::IMAP::BodyTypeMessage has all methods of Net::IMAP::BodyTypeText.
#
# source://net-imap-0.2.3/lib/net/imap/response_data.rb:444
class Net::IMAP::BodyTypeMessage < ::Struct
  # Obsolete: use +subtype+ instead.  Calling this will
  # generate a warning message to +stderr+, then return
  # the value of +subtype+.
  #
  # source://net-imap-0.2.3/lib/net/imap/response_data.rb:452
  def media_subtype; end

  # @return [Boolean]
  #
  # source://net-imap-0.2.3/lib/net/imap/response_data.rb:445
  def multipart?; end
end

# Net::IMAP::BodyTypeMultipart represents multipart body structures
# of messages.
#
# ==== Fields:
#
# media_type:: Returns the content media type name as defined in [MIME-IMB].
#
# subtype:: Returns the content subtype name as defined in [MIME-IMB].
#
# parts:: Returns multiple parts.
#
# param:: Returns a hash that represents parameters as defined in [MIME-IMB].
#
# disposition:: Returns a Net::IMAP::ContentDisposition object giving
#               the content disposition.
#
# language:: Returns a string or an array of strings giving the body
#            language value as defined in [LANGUAGE-TAGS].
#
# extension:: Returns extension data.
#
# multipart?:: Returns true.
#
# source://net-imap-0.2.3/lib/net/imap/response_data.rb:504
class Net::IMAP::BodyTypeMultipart < ::Struct
  # Obsolete: use +subtype+ instead.  Calling this will
  # generate a warning message to +stderr+, then return
  # the value of +subtype+.
  #
  # source://net-imap-0.2.3/lib/net/imap/response_data.rb:512
  def media_subtype; end

  # @return [Boolean]
  #
  # source://net-imap-0.2.3/lib/net/imap/response_data.rb:505
  def multipart?; end
end

# Net::IMAP::BodyTypeText represents TEXT body structures of messages.
#
# ==== Fields:
#
# lines:: Returns the size of the body in text lines.
#
# And Net::IMAP::BodyTypeText has all fields of Net::IMAP::BodyTypeBasic.
#
# source://net-imap-0.2.3/lib/net/imap/response_data.rb:415
class Net::IMAP::BodyTypeText < ::Struct
  # Obsolete: use +subtype+ instead.  Calling this will
  # generate a warning message to +stderr+, then return
  # the value of +subtype+.
  #
  # source://net-imap-0.2.3/lib/net/imap/response_data.rb:423
  def media_subtype; end

  # @return [Boolean]
  #
  # source://net-imap-0.2.3/lib/net/imap/response_data.rb:416
  def multipart?; end
end

# source://net-imap-0.2.3/lib/net/imap/command_data.rb:234
class Net::IMAP::ClientID
  # @return [ClientID] a new instance of ClientID
  #
  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:246
  def initialize(data); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:236
  def send_data(imap, tag); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:240
  def validate; end

  private

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:260
  def format_internal(client_id); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:250
  def validate_internal(client_id); end
end

# Authenticator for the "+CRAM-MD5+" SASL mechanism, specified in
# RFC2195[https://tools.ietf.org/html/rfc2195].  See Net::IMAP#authenticate.
#
# == Deprecated
#
# +CRAM-MD5+ is obsolete and insecure.  It is included for compatibility with
# existing servers.
# {draft-ietf-sasl-crammd5-to-historic}[https://tools.ietf.org/html/draft-ietf-sasl-crammd5-to-historic-00.html]
# recommends using +SCRAM-*+ or +PLAIN+ protected by TLS instead.
#
# Additionally, RFC8314[https://tools.ietf.org/html/rfc8314] discourage the use
# of cleartext and recommends TLS version 1.2 or greater be used for all
# traffic.  With TLS +CRAM-MD5+ is okay, but so is +PLAIN+
#
# source://net-imap-0.2.3/lib/net/imap/authenticators/cram_md5.rb:18
class Net::IMAP::CramMD5Authenticator
  # @return [CramMD5Authenticator] a new instance of CramMD5Authenticator
  #
  # source://net-imap-0.2.3/lib/net/imap/authenticators/cram_md5.rb:26
  def initialize(user, password); end

  # source://net-imap-0.2.3/lib/net/imap/authenticators/cram_md5.rb:19
  def process(challenge); end

  private

  # source://net-imap-0.2.3/lib/net/imap/authenticators/cram_md5.rb:31
  def hmac_md5(text, key); end
end

# Mailbox attribute indicating that this mailbox is used to hold draft
# messages -- typically, messages that are being composed but have not yet
# been sent. In some server implementations, this might be a virtual
# mailbox, containing messages from other mailboxes that are marked with the
# "\Draft" message flag. Alternatively, this might just be advice that a
# client put drafts here
#
# source://net-imap-0.2.3/lib/net/imap/flags.rb:207
Net::IMAP::DRAFTS = T.let(T.unsafe(nil), Symbol)

# Net::IMAP authenticator for the "`DIGEST-MD5`" SASL mechanism type, specified
# in RFC2831(https://tools.ietf.org/html/rfc2831).  See Net::IMAP#authenticate.
#
# == Deprecated
#
# "+DIGEST-MD5+" has been deprecated by
# {RFC6331}[https://tools.ietf.org/html/rfc6331] and should not be relied on for
# security.  It is included for compatibility with existing servers.
#
# source://net-imap-0.2.3/lib/net/imap/authenticators/digest_md5.rb:14
class Net::IMAP::DigestMD5Authenticator
  # @return [DigestMD5Authenticator] a new instance of DigestMD5Authenticator
  #
  # source://net-imap-0.2.3/lib/net/imap/authenticators/digest_md5.rb:80
  def initialize(user, password, authname = T.unsafe(nil)); end

  # source://net-imap-0.2.3/lib/net/imap/authenticators/digest_md5.rb:15
  def process(challenge); end

  private

  # source://net-imap-0.2.3/lib/net/imap/authenticators/digest_md5.rb:90
  def nc(nonce); end

  # some responses need quoting
  #
  # source://net-imap-0.2.3/lib/net/imap/authenticators/digest_md5.rb:100
  def qdval(k, v); end
end

# The presence of this attribute indicates that the mailbox has child
# mailboxes. A server SHOULD NOT set this attribute if there are child
# mailboxes and the user does not have permission to access any of them.  In
# this case, \HasNoChildren SHOULD be used. In many cases, however, a server
# may not be able to efficiently compute whether a user has access to any
# child mailboxes. Note that even though the \HasChildren attribute for a
# mailbox must be correct at the time of processing the mailbox, a client
# must be prepared to deal with a situation when a mailbox is marked with
# the \HasChildren attribute, but no child mailbox appears in the response
# to the LIST command. This might happen, for example, due to child
# mailboxes being deleted or made inaccessible to the user (using access
# control) by another client before the server is able to list them.
#
# It is an error for the server to return both a \HasChildren and a
# \HasNoChildren attribute in the same LIST response. A client that
# encounters a LIST response with both \HasChildren and \HasNoChildren
# attributes present should act as if both are absent in the LIST response.
#
# source://net-imap-0.2.3/lib/net/imap/flags.rb:127
Net::IMAP::HAS_CHILDREN = T.let(T.unsafe(nil), Symbol)

# The presence of this attribute indicates that the mailbox has NO child
# mailboxes that are accessible to the currently authenticated user.
#
# It is an error for the server to return both a \HasChildren and a
# \HasNoChildren attribute in the same LIST response. A client that
# encounters a LIST response with both \HasChildren and \HasNoChildren
# attributes present should act as if both are absent in the LIST response.
#
# Note: the \HasNoChildren attribute should not be confused with the
# \NoInferiors attribute, which indicates that no child mailboxes exist now
# and none can be created in the future.
#
# source://net-imap-0.2.3/lib/net/imap/flags.rb:140
Net::IMAP::HAS_NO_CHILDREN = T.let(T.unsafe(nil), Symbol)

# Net::IMAP::IgnoredResponse represents intentionally ignored responses.
#
# This includes untagged response "NOOP" sent by eg. Zimbra to avoid some
# clients to close the connection.
#
# It matches no IMAP standard.
#
# ==== Fields:
#
# raw_data:: Returns the raw data string.
#
# source://net-imap-0.2.3/lib/net/imap/response_data.rb:53
class Net::IMAP::IgnoredResponse < ::Struct; end

# Mailbox attribute indicating that this mailbox is where messages deemed to
# be junk mail are held. Some server implementations might put messages here
# automatically.  Alternatively, this might just be advice to a client-side
# spam filter.
#
# source://net-imap-0.2.3/lib/net/imap/flags.rb:215
Net::IMAP::JUNK = T.let(T.unsafe(nil), Symbol)

# source://net-imap-0.2.3/lib/net/imap/command_data.rb:163
class Net::IMAP::Literal
  # @return [Literal] a new instance of Literal
  #
  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:173
  def initialize(data); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:164
  def send_data(imap, tag); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:168
  def validate; end
end

# Authenticator for the "+LOGIN+" SASL mechanism.  See Net::IMAP#authenticate.
#
# +LOGIN+ authentication sends the password in cleartext.
# RFC3501[https://tools.ietf.org/html/rfc3501] encourages servers to disable
# cleartext authentication until after TLS has been negotiated.
# RFC8314[https://tools.ietf.org/html/rfc8314] recommends TLS version 1.2 or
# greater be used for all traffic, and deprecate cleartext access ASAP.  +LOGIN+
# can be secured by TLS encryption.
#
# == Deprecated
#
# The {SASL mechanisms
# registry}[https://www.iana.org/assignments/sasl-mechanisms/sasl-mechanisms.xhtml]
# marks "LOGIN" as obsoleted in favor of "PLAIN".  It is included here for
# compatibility with existing servers.  See
# {draft-murchison-sasl-login}[https://www.iana.org/go/draft-murchison-sasl-login]
# for both specification and deprecation.
#
# source://net-imap-0.2.3/lib/net/imap/authenticators/login.rb:20
class Net::IMAP::LoginAuthenticator
  # @return [LoginAuthenticator] a new instance of LoginAuthenticator
  #
  # source://net-imap-0.2.3/lib/net/imap/authenticators/login.rb:36
  def initialize(user, password); end

  # source://net-imap-0.2.3/lib/net/imap/authenticators/login.rb:21
  def process(data); end
end

# source://net-imap-0.2.3/lib/net/imap/command_data.rb:178
class Net::IMAP::MessageSet
  # @return [MessageSet] a new instance of MessageSet
  #
  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:189
  def initialize(data); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:179
  def send_data(imap, tag); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:183
  def validate; end

  private

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:193
  def format_internal(data); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:214
  def validate_internal(data); end
end

# The "\NonExistent" attribute indicates that a mailbox name does not refer
# to an existing mailbox. Note that this attribute is not meaningful by
# itself, as mailbox names that match the canonical LIST pattern but don't
# exist must not be returned unless one of the two conditions listed below
# is also satisfied:
#
# 1. The mailbox name also satisfies the selection criteria (for example,
#    it is subscribed and the "SUBSCRIBED" selection option has been
#    specified).
#
# 2. "RECURSIVEMATCH" has been specified, and the mailbox name has at least
#    one descendant mailbox name that does not match the LIST pattern and
#    does match the selection criteria.
#
# In practice, this means that the "\NonExistent" attribute is usually
# returned with one or more of "\Subscribed", "\Remote", "\HasChildren", or
# the CHILDINFO extended data item.
#
# The client must treat the presence of the \NonExistent attribute as if the
# \NoSelect attribute was also sent by the server
#
# source://net-imap-0.2.3/lib/net/imap/flags.rb:96
Net::IMAP::NONEXISTENT = T.let(T.unsafe(nil), Symbol)

# Net::IMAP::Namespace represents a single [RFC-2342] namespace.
#
#    Namespace = nil / "(" 1*( "(" string SP  (<"> QUOTED_CHAR <"> /
#       nil) *(Namespace_Response_Extension) ")" ) ")"
#
#    Namespace_Response_Extension = SP string SP "(" string *(SP string)
#       ")"
#
# ==== Fields:
#
# prefix:: Returns the namespace prefix string.
# delim:: Returns nil or the hierarchy delimiter character.
# extensions:: Returns a hash of extension names to extension flag arrays.
#
# source://net-imap-0.2.3/lib/net/imap/response_data.rb:204
class Net::IMAP::Namespace < ::Struct; end

# Net::IMAP::Namespaces represents the response from [RFC-2342] NAMESPACE.
#
#    Namespace_Response = "*" SP "NAMESPACE" SP Namespace SP Namespace SP
#       Namespace
#
#       ; The first Namespace is the Personal Namespace(s)
#       ; The second Namespace is the Other Users' Namespace(s)
#       ; The third Namespace is the Shared Namespace(s)
#
# ==== Fields:
#
# personal:: Returns an array of Personal Net::IMAP::Namespace objects.
# other:: Returns an array of Other Users' Net::IMAP::Namespace objects.
# shared:: Returns an array of Shared Net::IMAP::Namespace objects.
#
# source://net-imap-0.2.3/lib/net/imap/response_data.rb:222
class Net::IMAP::Namespaces < ::Struct; end

# Common validators of number and nz_number types
#
# source://net-imap-0.2.3/lib/net/imap/data_encoding.rb:49
module Net::IMAP::NumValidator
  private

  # Ensure argument is 'mod_sequence_value' or raise DataFormatError
  #
  # source://net-imap-0.2.3/lib/net/imap/data_encoding.rb:96
  def ensure_mod_sequence_value(num); end

  # Ensure argument is 'number' or raise DataFormatError
  #
  # source://net-imap-0.2.3/lib/net/imap/data_encoding.rb:80
  def ensure_number(num); end

  # Ensure argument is 'nz_number' or raise DataFormatError
  #
  # source://net-imap-0.2.3/lib/net/imap/data_encoding.rb:88
  def ensure_nz_number(num); end

  # Check is passed argument valid 'mod_sequence_value' in RFC 4551 terminology
  #
  # source://net-imap-0.2.3/lib/net/imap/data_encoding.rb:71
  def valid_mod_sequence_value?(num); end

  # Check is passed argument valid 'number' in RFC 3501 terminology
  #
  # source://net-imap-0.2.3/lib/net/imap/data_encoding.rb:53
  def valid_number?(num); end

  # Check is passed argument valid 'nz_number' in RFC 3501 terminology
  #
  # source://net-imap-0.2.3/lib/net/imap/data_encoding.rb:62
  def valid_nz_number?(num); end

  class << self
    # Ensure argument is 'mod_sequence_value' or raise DataFormatError
    #
    # @raise [DataFormatError]
    #
    # source://net-imap-0.2.3/lib/net/imap/data_encoding.rb:96
    def ensure_mod_sequence_value(num); end

    # Ensure argument is 'number' or raise DataFormatError
    #
    # @raise [DataFormatError]
    #
    # source://net-imap-0.2.3/lib/net/imap/data_encoding.rb:80
    def ensure_number(num); end

    # Ensure argument is 'nz_number' or raise DataFormatError
    #
    # @raise [DataFormatError]
    #
    # source://net-imap-0.2.3/lib/net/imap/data_encoding.rb:88
    def ensure_nz_number(num); end

    # Check is passed argument valid 'mod_sequence_value' in RFC 4551 terminology
    #
    # @return [Boolean]
    #
    # source://net-imap-0.2.3/lib/net/imap/data_encoding.rb:71
    def valid_mod_sequence_value?(num); end

    # Check is passed argument valid 'number' in RFC 3501 terminology
    #
    # @return [Boolean]
    #
    # source://net-imap-0.2.3/lib/net/imap/data_encoding.rb:53
    def valid_number?(num); end

    # Check is passed argument valid 'nz_number' in RFC 3501 terminology
    #
    # @return [Boolean]
    #
    # source://net-imap-0.2.3/lib/net/imap/data_encoding.rb:62
    def valid_nz_number?(num); end
  end
end

# Authenticator for the "+PLAIN+" SASL mechanism, specified in
# RFC4616[https://tools.ietf.org/html/rfc4616].  See Net::IMAP#authenticate.
#
# +PLAIN+ authentication sends the password in cleartext.
# RFC3501[https://tools.ietf.org/html/rfc3501] encourages servers to disable
# cleartext authentication until after TLS has been negotiated.
# RFC8314[https://tools.ietf.org/html/rfc8314] recommends TLS version 1.2 or
# greater be used for all traffic, and deprecate cleartext access ASAP.  +PLAIN+
# can be secured by TLS encryption.
#
# source://net-imap-0.2.3/lib/net/imap/authenticators/plain.rb:12
class Net::IMAP::PlainAuthenticator
  # +username+ is the authentication identity, the identity whose +password+ is
  # used.  +username+ is referred to as +authcid+ by
  # RFC4616[https://tools.ietf.org/html/rfc4616].
  #
  # +authzid+ is the authorization identity (identity to act as).  It can
  # usually be left blank. When +authzid+ is left blank (nil or empty string)
  # the server will derive an identity from the credentials and use that as the
  # authorization identity.
  #
  # @raise [ArgumentError]
  # @return [PlainAuthenticator] a new instance of PlainAuthenticator
  #
  # source://net-imap-0.2.3/lib/net/imap/authenticators/plain.rb:31
  def initialize(username, password, authzid: T.unsafe(nil)); end

  # source://net-imap-0.2.3/lib/net/imap/authenticators/plain.rb:14
  def process(data); end
end

# source://net-imap-0.2.3/lib/net/imap/authenticators/plain.rb:19
Net::IMAP::PlainAuthenticator::NULL = T.let(T.unsafe(nil), String)

# source://net-imap-0.2.3/lib/net/imap/command_data.rb:148
class Net::IMAP::QuotedString
  # @return [QuotedString] a new instance of QuotedString
  #
  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:158
  def initialize(data); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:149
  def send_data(imap, tag); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:153
  def validate; end
end

# The mailbox is a remote mailbox.
#
# source://net-imap-0.2.3/lib/net/imap/flags.rb:165
Net::IMAP::REMOTE = T.let(T.unsafe(nil), Symbol)

# source://net-imap-0.2.3/lib/net/imap/errors.rb:54
Net::IMAP::RESPONSE_ERRORS = T.let(T.unsafe(nil), Hash)

# source://net-imap-0.2.3/lib/net/imap/command_data.rb:118
class Net::IMAP::RawData
  # @return [RawData] a new instance of RawData
  #
  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:128
  def initialize(data); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:119
  def send_data(imap, tag); end

  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:123
  def validate; end
end

# Superclass of all errors used to encapsulate "fail" responses
# from the server.
#
# source://net-imap-0.2.3/lib/net/imap/errors.rb:20
class Net::IMAP::ResponseError < ::Net::IMAP::Error
  # @return [ResponseError] a new instance of ResponseError
  #
  # source://net-imap-0.2.3/lib/net/imap/errors.rb:25
  def initialize(response); end

  # The response that caused this error
  #
  # source://net-imap-0.2.3/lib/net/imap/errors.rb:23
  def response; end

  # The response that caused this error
  #
  # source://net-imap-0.2.3/lib/net/imap/errors.rb:23
  def response=(_arg0); end
end

# source://net-imap-0.2.3/lib/net/imap/response_parser.rb:8
class Net::IMAP::ResponseParser
  # @return [ResponseParser] a new instance of ResponseParser
  #
  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:9
  def initialize; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:16
  def parse(str); end

  private

  # like match, but does not raise error on failure.
  #
  # returns and shifts token on successful match
  # returns nil and leaves @token unshifted on no match
  #
  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1375
  def accept(*args); end

  # This advances @pos directly so it's safe before changing @lex_state.
  #
  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1332
  def accept_space; end

  # The RFC is very strict about this and usually we should be too.
  # But skipping spaces is usually a safe workaround for buggy servers.
  #
  # This advances @pos directly so it's safe before changing @lex_state.
  #
  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1344
  def accept_spaces; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1178
  def address; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1148
  def address_list; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1234
  def astring; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1287
  def astring_chars; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1279
  def atom; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:326
  def body; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:307
  def body_data; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:513
  def body_ext_1part; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:549
  def body_ext_mpart; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:639
  def body_extension; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:625
  def body_extensions; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:475
  def body_fields; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:585
  def body_fld_dsp; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:599
  def body_fld_lang; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:488
  def body_fld_param; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:346
  def body_type_1part; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:432
  def body_type_attachment; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:362
  def body_type_basic; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:439
  def body_type_mixed; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:446
  def body_type_mpart; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:391
  def body_type_msg; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:377
  def body_type_text; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:967
  def capability_data; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:960
  def capability_response; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1259
  def case_insensitive_string; end

  # See https://www.rfc-editor.org/errata/rfc3501
  #
  # charset = atom / quoted
  #
  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1306
  def charset; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1135
  def charset_list; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1291
  def combine_adjacent(*tokens); end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:108
  def continue_req; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:238
  def envelope; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:231
  def envelope_data; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1209
  def flag_list; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:273
  def flags_data; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:736
  def flags_response; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:689
  def format_string(str); end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:814
  def getacl_response; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:764
  def getquota_response; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:797
  def getquotaroot_response; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:983
  def id_response; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:722
  def ignored_response; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:280
  def internaldate_data; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:743
  def list_response; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1383
  def lookahead; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:750
  def mailbox_list; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1351
  def match(*args, lex_state: T.unsafe(nil)); end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:464
  def media_type; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:712
  def modseq_data; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:193
  def msg_att(n); end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1046
  def namespace; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1012
  def namespace_response; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1056
  def namespace_response_extensions; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1028
  def namespaces; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1391
  def next_token; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1324
  def nil_atom; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1224
  def nstring; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1314
  def number; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:177
  def numeric_response; end

  # @raise [ResponseParseError]
  #
  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1510
  def parse_error(fmt, *args); end

  # resp-text       = ["[" resp-text-code "]" SP] text
  #
  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1082
  def resp_text; end

  # See https://www.rfc-editor.org/errata/rfc3501
  #
  # resp-text-code  = "ALERT" /
  #                   "BADCHARSET" [SP "(" charset *(SP charset) ")" ] /
  #                   capability-data / "PARSE" /
  #                   "PERMANENTFLAGS" SP "("
  #                   [flag-perm *(SP flag-perm)] ")" /
  #                   "READ-ONLY" / "READ-WRITE" / "TRYCREATE" /
  #                   "UIDNEXT" SP nz-number / "UIDVALIDITY" SP nz-number /
  #                   "UNSEEN" SP nz-number /
  #                   atom [SP 1*<any TEXT-CHAR except "]">]
  #
  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1106
  def resp_text_code; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:89
  def response; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:170
  def response_cond; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:161
  def response_tagged; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:119
  def response_untagged; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:300
  def rfc822_size; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:288
  def rfc822_text; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:840
  def search_response; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:654
  def section; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1387
  def shift_token; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:933
  def status_response; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1243
  def string; end

  # @return [Boolean]
  #
  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1255
  def string_token?(token); end

  # text            = 1*TEXT-CHAR
  # TEXT-CHAR       = <any CHAR except CR and LF>
  #
  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1077
  def text; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:729
  def text_response; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:898
  def thread_branch(token); end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:871
  def thread_response; end

  # source://net-imap-0.2.3/lib/net/imap/response_parser.rb:705
  def uid_data; end
end

# ASTRING-CHAR    = ATOM-CHAR / resp-specials
# resp-specials   = "]"
#
# source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1285
Net::IMAP::ResponseParser::ASTRING_CHARS_TOKENS = T.let(T.unsafe(nil), Array)

# source://net-imap-0.2.3/lib/net/imap/response_parser.rb:1329
Net::IMAP::ResponseParser::SPACES_REGEXP = T.let(T.unsafe(nil), Regexp)

# Mailbox attribute indicating that this mailbox is used to hold copies of
# messages that have been sent. Some server implementations might put
# messages here automatically. Alternatively, this might just be advice that
# a client save sent messages here.
#
# source://net-imap-0.2.3/lib/net/imap/flags.rb:221
Net::IMAP::SENT = T.let(T.unsafe(nil), Symbol)

# The mailbox name was subscribed to using the SUBSCRIBE command.
#
# source://net-imap-0.2.3/lib/net/imap/flags.rb:162
Net::IMAP::SUBSCRIBED = T.let(T.unsafe(nil), Symbol)

# source://net-imap-0.2.3/lib/net/imap/command_data.rb:269
module Net::IMAP::StringFormatter
  private

  # coerces non-nil using +to_s+
  #
  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:296
  def nstring(str); end

  # coerces using +to_s+
  #
  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:286
  def string(str); end

  # Allows nil, symbols, and strings
  #
  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:281
  def valid_nstring?(str); end

  # Allows symbols in addition to strings
  #
  # source://net-imap-0.2.3/lib/net/imap/command_data.rb:276
  def valid_string?(str); end

  class << self
    # coerces non-nil using +to_s+
    #
    # source://net-imap-0.2.3/lib/net/imap/command_data.rb:296
    def nstring(str); end

    # coerces using +to_s+
    #
    # source://net-imap-0.2.3/lib/net/imap/command_data.rb:286
    def string(str); end

    # Allows nil, symbols, and strings
    #
    # @return [Boolean]
    #
    # source://net-imap-0.2.3/lib/net/imap/command_data.rb:281
    def valid_nstring?(str); end

    # Allows symbols in addition to strings
    #
    # @return [Boolean]
    #
    # source://net-imap-0.2.3/lib/net/imap/command_data.rb:276
    def valid_string?(str); end
  end
end

# source://net-imap-0.2.3/lib/net/imap/command_data.rb:271
Net::IMAP::StringFormatter::LITERAL_REGEX = T.let(T.unsafe(nil), Regexp)

# Mailbox attribute indicating that this mailbox is used to hold messages
# that have been deleted or marked for deletion. In some server
# implementations, this might be a virtual mailbox, containing messages from
# other mailboxes that are marked with the "\Deleted" message flag.
# Alternatively, this might just be advice that a client that chooses not to
# use the IMAP "\Deleted" model should use as its trash location. In server
# implementations that strictly expect the IMAP "\Deleted" model, this
# special use is likely not to be supported.
#
# source://net-imap-0.2.3/lib/net/imap/flags.rb:231
Net::IMAP::TRASH = T.let(T.unsafe(nil), Symbol)

# Error raised upon an unknown response from the server.
#
# source://net-imap-0.2.3/lib/net/imap/errors.rb:51
class Net::IMAP::UnknownResponseError < ::Net::IMAP::ResponseError; end

# source://net-imap-0.2.3/lib/net/imap.rb:223
Net::IMAP::VERSION = T.let(T.unsafe(nil), String)
