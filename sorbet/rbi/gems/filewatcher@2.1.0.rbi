# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `filewatcher` gem.
# Please instead update this file by running `bin/tapioca gem filewatcher`.


# Simple file watcher. Detect changes in files and directories.
#
# Issues: Currently doesn't monitor changes in directory names
#
# source://filewatcher//lib/filewatcher/cycles.rb#3
class Filewatcher
  include ::Filewatcher::Cycles
  include ::Filewatcher::Snapshots

  # @return [Filewatcher] a new instance of Filewatcher
  #
  # source://filewatcher//lib/filewatcher.rb#26
  def initialize(unexpanded_filenames, options = T.unsafe(nil)); end

  # Calls the update block repeatedly until all changes in the
  # current snapshot are dealt with
  #
  # source://filewatcher//lib/filewatcher.rb#87
  def finalize(&on_update); end

  # Returns the value of attribute interval.
  #
  # source://filewatcher//lib/filewatcher.rb#14
  def interval; end

  # Sets the attribute interval
  #
  # @param value the value to set the attribute interval to.
  #
  # source://filewatcher//lib/filewatcher.rb#14
  def interval=(_arg0); end

  # Returns the value of attribute keep_watching.
  #
  # source://filewatcher//lib/filewatcher.rb#15
  def keep_watching; end

  # source://filewatcher//lib/filewatcher.rb#55
  def pause; end

  # source://filewatcher//lib/filewatcher.rb#64
  def resume; end

  # Ends the watch, allowing any remaining changes to be finalized.
  # Used mainly in multi-threaded situations.
  #
  # source://filewatcher//lib/filewatcher.rb#77
  def stop; end

  # @yield [{ '' => '' }]
  #
  # source://filewatcher//lib/filewatcher.rb#38
  def watch(&on_update); end

  private

  # source://filewatcher//lib/filewatcher.rb#104
  def after_initialize(*_arg0); end

  # source://filewatcher//lib/filewatcher.rb#116
  def after_stop; end

  # source://filewatcher//lib/filewatcher.rb#108
  def before_pause_sleep; end

  # source://filewatcher//lib/filewatcher.rb#112
  def before_resume_sleep; end

  # source://filewatcher//lib/filewatcher.rb#100
  def debug(data); end

  # source://filewatcher//lib/filewatcher.rb#120
  def finalizing; end

  class << self
    # source://filewatcher//lib/filewatcher.rb#18
    def print_version; end
  end
end

# Module for all cycles in `Filewatcher#watch`
#
# source://filewatcher//lib/filewatcher/cycles.rb#5
module Filewatcher::Cycles
  private

  # source://filewatcher//lib/filewatcher/cycles.rb#30
  def before_pausing_sleep; end

  # source://filewatcher//lib/filewatcher/cycles.rb#45
  def before_watching_sleep; end

  # source://filewatcher//lib/filewatcher/cycles.rb#8
  def main_cycle; end

  # source://filewatcher//lib/filewatcher/cycles.rb#22
  def pausing_cycle; end

  # source://filewatcher//lib/filewatcher/cycles.rb#49
  def trigger_changes(on_update = T.unsafe(nil)); end

  # source://filewatcher//lib/filewatcher/cycles.rb#34
  def watching_cycle; end
end

# Class for snapshots of file system
#
# source://filewatcher//lib/filewatcher/snapshot.rb#7
class Filewatcher::Snapshot
  extend ::Forwardable

  # @return [Snapshot] a new instance of Snapshot
  #
  # source://filewatcher//lib/filewatcher/snapshot.rb#11
  def initialize(filenames); end

  # source://filewatcher//lib/filewatcher/snapshot.rb#17
  def -(other); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def [](*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def each(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def keys(*args, **_arg1, &block); end
end

# Class for one file from snapshot
#
# source://filewatcher//lib/filewatcher/snapshot.rb#32
class Filewatcher::Snapshot::SnapshotFile
  # @return [SnapshotFile] a new instance of SnapshotFile
  #
  # source://filewatcher//lib/filewatcher/snapshot.rb#57
  def initialize(filename); end

  # source://filewatcher//lib/filewatcher/snapshot.rb#65
  def -(other); end

  # source://filewatcher//lib/filewatcher/snapshot.rb#71
  def inspect; end

  # Returns the value of attribute mtime.
  #
  # source://filewatcher//lib/filewatcher/snapshot.rb#55
  def mtime; end

  class << self
    # source://filewatcher//lib/filewatcher/snapshot.rb#38
    def populate_stats(stats); end

    # source://filewatcher//lib/filewatcher/snapshot.rb#49
    def populate_subtractions(hash); end

    # source://filewatcher//lib/filewatcher/snapshot.rb#34
    def stats; end

    # source://filewatcher//lib/filewatcher/snapshot.rb#42
    def subtractions; end
  end
end

# Module for snapshot logic inside Filewatcher
#
# source://filewatcher//lib/filewatcher/snapshots.rb#8
module Filewatcher::Snapshots
  # source://filewatcher//lib/filewatcher/snapshots.rb#9
  def found_filenames; end

  private

  # Takes a snapshot of the current status of watched files.
  # (Allows avoidance of potential race condition during #finalize)
  #
  # source://filewatcher//lib/filewatcher/snapshots.rb#17
  def current_snapshot; end

  # source://filewatcher//lib/filewatcher/snapshots.rb#24
  def expand_directories(patterns); end

  # @return [Boolean]
  #
  # source://filewatcher//lib/filewatcher/snapshots.rb#37
  def file_system_updated?(snapshot = T.unsafe(nil)); end
end

# source://filewatcher//lib/filewatcher/version.rb#4
Filewatcher::VERSION = T.let(T.unsafe(nil), String)
