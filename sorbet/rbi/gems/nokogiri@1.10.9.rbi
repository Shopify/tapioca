# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   tapioca sync

# typed: true

module Nokogiri
  def self.HTML(thing, url = _, encoding = _, options = _, &block); end
  def self.Slop(*args, &block); end
  def self.XML(thing, url = _, encoding = _, options = _, &block); end
  def self.XSLT(stylesheet, modules = _); end
  def self.install_default_aliases; end
  def self.jruby?; end
  def self.make(input = _, opts = _, &blk); end
  def self.parse(string, url = _, encoding = _, options = _); end
  def self.uses_libxml?; end
end

module Nokogiri::CSS
  def self.parse(selector); end
  def self.xpath_for(selector, options = _); end
end

class Nokogiri::CSS::Node
  def initialize(type, value); end

  def accept(visitor); end
  def find_by_type(types); end
  def to_a; end
  def to_type; end
  def to_xpath(prefix = _, visitor = _); end
  def type; end
  def type=(_); end
  def value; end
  def value=(_); end
end

Nokogiri::CSS::Node::ALLOW_COMBINATOR_ON_SELF = T.let(T.unsafe(nil), Array)

class Nokogiri::CSS::Parser < ::Racc::Parser
  def initialize(namespaces = _); end

  def _reduce_1(val, _values, result); end
  def _reduce_11(val, _values, result); end
  def _reduce_12(val, _values, result); end
  def _reduce_13(val, _values, result); end
  def _reduce_14(val, _values, result); end
  def _reduce_15(val, _values, result); end
  def _reduce_16(val, _values, result); end
  def _reduce_18(val, _values, result); end
  def _reduce_2(val, _values, result); end
  def _reduce_20(val, _values, result); end
  def _reduce_21(val, _values, result); end
  def _reduce_22(val, _values, result); end
  def _reduce_23(val, _values, result); end
  def _reduce_25(val, _values, result); end
  def _reduce_26(val, _values, result); end
  def _reduce_27(val, _values, result); end
  def _reduce_28(val, _values, result); end
  def _reduce_29(val, _values, result); end
  def _reduce_3(val, _values, result); end
  def _reduce_30(val, _values, result); end
  def _reduce_31(val, _values, result); end
  def _reduce_32(val, _values, result); end
  def _reduce_33(val, _values, result); end
  def _reduce_34(val, _values, result); end
  def _reduce_35(val, _values, result); end
  def _reduce_36(val, _values, result); end
  def _reduce_37(val, _values, result); end
  def _reduce_4(val, _values, result); end
  def _reduce_40(val, _values, result); end
  def _reduce_41(val, _values, result); end
  def _reduce_42(val, _values, result); end
  def _reduce_43(val, _values, result); end
  def _reduce_44(val, _values, result); end
  def _reduce_45(val, _values, result); end
  def _reduce_48(val, _values, result); end
  def _reduce_49(val, _values, result); end
  def _reduce_5(val, _values, result); end
  def _reduce_50(val, _values, result); end
  def _reduce_51(val, _values, result); end
  def _reduce_52(val, _values, result); end
  def _reduce_58(val, _values, result); end
  def _reduce_59(val, _values, result); end
  def _reduce_6(val, _values, result); end
  def _reduce_60(val, _values, result); end
  def _reduce_61(val, _values, result); end
  def _reduce_63(val, _values, result); end
  def _reduce_64(val, _values, result); end
  def _reduce_65(val, _values, result); end
  def _reduce_66(val, _values, result); end
  def _reduce_67(val, _values, result); end
  def _reduce_68(val, _values, result); end
  def _reduce_69(val, _values, result); end
  def _reduce_7(val, _values, result); end
  def _reduce_70(val, _values, result); end
  def _reduce_8(val, _values, result); end
  def _reduce_9(val, _values, result); end
  def _reduce_none(val, _values, result); end
  def next_token; end
  def on_error(error_token_id, error_value, value_stack); end
  def parse(string); end
  def unescape_css_identifier(identifier); end
  def unescape_css_string(str); end
  def xpath_for(string, options = _); end

  def self.[](string); end
  def self.[]=(string, value); end
  def self.cache_on; end
  def self.cache_on=(_); end
  def self.cache_on?; end
  def self.clear_cache; end
  def self.parse(selector); end
  def self.set_cache(_); end
  def self.without_cache(&block); end
end

Nokogiri::CSS::Parser::Racc_arg = T.let(T.unsafe(nil), Array)

Nokogiri::CSS::Parser::Racc_token_to_s_table = T.let(T.unsafe(nil), Array)

class Nokogiri::CSS::SyntaxError < ::Nokogiri::SyntaxError
end

class Nokogiri::CSS::Tokenizer
  def _next_token; end
  def action; end
  def filename; end
  def lineno; end
  def load_file(filename); end
  def next_token; end
  def scan(str); end
  def scan_file(filename); end
  def scan_setup(str); end
  def scan_str(str); end
  def state; end
  def state=(_); end
end

class Nokogiri::CSS::Tokenizer::ScanError < ::StandardError
end

class Nokogiri::CSS::XPathVisitor
  def accept(node); end
  def visit_attribute_condition(node); end
  def visit_child_selector(node); end
  def visit_class_condition(node); end
  def visit_combinator(node); end
  def visit_conditional_selector(node); end
  def visit_descendant_selector(node); end
  def visit_direct_adjacent_selector(node); end
  def visit_element_name(node); end
  def visit_following_selector(node); end
  def visit_function(node); end
  def visit_id(node); end
  def visit_not(node); end
  def visit_pseudo_class(node); end

  private

  def is_of_type_pseudo_class?(node); end
  def nth(node, options = _); end
  def read_a_and_positive_b(values); end
end

module Nokogiri::Decorators
end

module Nokogiri::Decorators::Slop
  def method_missing(name, *args, &block); end

  private

  def respond_to_missing?(name, include_private = _); end
end

Nokogiri::Decorators::Slop::XPATH_PREFIX = T.let(T.unsafe(nil), String)

class Nokogiri::EncodingHandler
  def name; end

  def self.[](_); end
  def self.alias(_, _); end
  def self.clear_aliases!; end
  def self.delete(_); end
end

module Nokogiri::HTML
  def self.fragment(string, encoding = _); end
  def self.parse(thing, url = _, encoding = _, options = _, &block); end
end

class Nokogiri::HTML::Builder < ::Nokogiri::XML::Builder
  def to_html; end
end

class Nokogiri::HTML::Document < ::Nokogiri::XML::Document
  def fragment(tags = _); end
  def meta_encoding; end
  def meta_encoding=(encoding); end
  def serialize(options = _); end
  def title; end
  def title=(text); end
  def type; end

  private

  def meta_content_type; end
  def set_metadata_element(element); end

  def self.new(*_); end
  def self.parse(string_or_io, url = _, encoding = _, options = _); end
  def self.read_io(_, _, _, _); end
  def self.read_memory(_, _, _, _); end
end

class Nokogiri::HTML::Document::EncodingFound < ::StandardError
  def initialize(encoding); end

  def found_encoding; end
end

class Nokogiri::HTML::Document::EncodingReader
  def initialize(io); end

  def encoding_found; end
  def read(len); end

  def self.detect_encoding(chunk); end
  def self.detect_encoding_for_jruby_without_fix(chunk); end
  def self.is_jruby_without_fix?; end
end

class Nokogiri::HTML::Document::EncodingReader::JumpSAXHandler < ::Nokogiri::HTML::Document::EncodingReader::SAXHandler
  def initialize(jumptag); end

  def start_element(name, attrs = _); end
end

class Nokogiri::HTML::Document::EncodingReader::SAXHandler < ::Nokogiri::XML::SAX::Document
  def initialize; end

  def encoding; end
  def start_element(name, attrs = _); end
end

class Nokogiri::HTML::DocumentFragment < ::Nokogiri::XML::DocumentFragment
  def initialize(document, tags = _, ctx = _); end

  def self.parse(tags, encoding = _); end
end

class Nokogiri::HTML::ElementDescription
  def block?; end
  def default_sub_element; end
  def deprecated?; end
  def deprecated_attributes; end
  def description; end
  def empty?; end
  def implied_end_tag?; end
  def implied_start_tag?; end
  def inline?; end
  def inspect; end
  def name; end
  def optional_attributes; end
  def required_attributes; end
  def save_end_tag?; end
  def sub_elements; end
  def to_s; end

  private

  def default_desc; end

  def self.[](_); end
end

Nokogiri::HTML::ElementDescription::ACTION_ATTR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::ALIGN_ATTR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::ALT_ATTR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::APPLET_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::AREA_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::A_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::BASEFONT_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::BGCOLOR_ATTR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::BLOCK = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::BLOCKLI_ELT = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::BODY_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::BODY_CONTENTS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::BODY_DEPR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::BUTTON_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::CELLHALIGN = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::CELLVALIGN = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::CLEAR_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::COL_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::COL_ELT = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::COMPACT_ATTR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::COMPACT_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::CONTENT_ATTR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::COREATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::CORE_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::CORE_I18N_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::DIR_ATTR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::DL_CONTENTS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::DefaultDescriptions = T.let(T.unsafe(nil), Hash)

Nokogiri::HTML::ElementDescription::Desc = Struct

Nokogiri::HTML::ElementDescription::EDIT_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::EMBED_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::EMPTY = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::EVENTS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::FIELDSET_CONTENTS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::FLOW = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::FLOW_PARAM = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::FONTSTYLE = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::FONT_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::FORMCTRL = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::FORM_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::FORM_CONTENTS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::FRAMESET_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::FRAMESET_CONTENTS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::FRAME_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::HEADING = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::HEAD_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::HEAD_CONTENTS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::HREF_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::HR_DEPR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::HTML_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::HTML_CDATA = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::HTML_CONTENT = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::HTML_FLOW = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::HTML_INLINE = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::HTML_PCDATA = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::I18N = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::I18N_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::IFRAME_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::IMG_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::INLINE = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::INLINE_P = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::INPUT_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::LABEL_ATTR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::LABEL_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::LANGUAGE_ATTR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::LEGEND_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::LINK_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::LIST = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::LI_ELT = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::MAP_CONTENTS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::META_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::MODIFIER = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::NAME_ATTR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::NOFRAMES_CONTENT = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::OBJECT_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::OBJECT_CONTENTS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::OBJECT_DEPR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::OL_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::OPTGROUP_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::OPTION_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::OPTION_ELT = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::PARAM_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::PCDATA = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::PHRASE = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::PRE_CONTENT = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::PROMPT_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::QUOTE_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::ROWS_COLS_ATTR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::SCRIPT_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::SELECT_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::SELECT_CONTENT = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::SPECIAL = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::SRC_ALT_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::STYLE_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::TABLE_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::TABLE_CONTENTS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::TABLE_DEPR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::TALIGN_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::TARGET_ATTR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::TEXTAREA_ATTRS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::TH_TD_ATTR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::TH_TD_DEPR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::TR_CONTENTS = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::TR_ELT = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::TYPE_ATTR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::UL_DEPR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::VERSION_ATTR = T.let(T.unsafe(nil), Array)

Nokogiri::HTML::ElementDescription::WIDTH_ATTR = T.let(T.unsafe(nil), Array)

class Nokogiri::HTML::EntityDescription < ::Struct
end

class Nokogiri::HTML::EntityLookup
  def [](name); end
  def get(_); end
end

Nokogiri::HTML::NamedCharacters = T.let(T.unsafe(nil), Nokogiri::HTML::EntityLookup)

module Nokogiri::HTML::SAX
end

class Nokogiri::HTML::SAX::Parser < ::Nokogiri::XML::SAX::Parser
  def parse_file(filename, encoding = _); end
  def parse_io(io, encoding = _); end
  def parse_memory(data, encoding = _); end
end

class Nokogiri::HTML::SAX::ParserContext < ::Nokogiri::XML::SAX::ParserContext
  def parse_with(_); end

  def self.file(_, _); end
  def self.memory(_, _); end
  def self.new(thing, encoding = _); end
end

class Nokogiri::HTML::SAX::PushParser < ::Nokogiri::XML::SAX::PushParser
  def initialize(doc = _, file_name = _, encoding = _); end

  def <<(chunk, last_chunk = _); end
  def document; end
  def document=(_); end
  def finish; end
  def write(chunk, last_chunk = _); end

  private

  def initialize_native(_, _, _); end
  def native_write(_, _); end
end

Nokogiri::LIBXML_ICONV_ENABLED = T.let(T.unsafe(nil), TrueClass)

Nokogiri::LIBXML_PARSER_VERSION = T.let(T.unsafe(nil), String)

Nokogiri::LIBXML_VERSION = T.let(T.unsafe(nil), String)

Nokogiri::NOKOGIRI_LIBXML2_PATCHES = T.let(T.unsafe(nil), Array)

Nokogiri::NOKOGIRI_LIBXML2_PATH = T.let(T.unsafe(nil), String)

Nokogiri::NOKOGIRI_LIBXSLT_PATCHES = T.let(T.unsafe(nil), Array)

Nokogiri::NOKOGIRI_LIBXSLT_PATH = T.let(T.unsafe(nil), String)

Nokogiri::NOKOGIRI_USE_PACKAGED_LIBRARIES = T.let(T.unsafe(nil), TrueClass)

class Nokogiri::SyntaxError < ::StandardError
end

Nokogiri::VERSION = T.let(T.unsafe(nil), String)

Nokogiri::VERSION_INFO = T.let(T.unsafe(nil), Hash)

class Nokogiri::VersionInfo
  def compiled_parser_version; end
  def engine; end
  def jruby?; end
  def libxml2?; end
  def libxml2_using_packaged?; end
  def libxml2_using_system?; end
  def loaded_parser_version; end
  def to_hash; end
  def to_markdown; end
  def warnings; end

  def self.instance; end
end

module Nokogiri::XML
  def self.Reader(string_or_io, url = _, encoding = _, options = _); end
  def self.RelaxNG(string_or_io); end
  def self.Schema(string_or_io); end
  def self.fragment(string); end
  def self.parse(thing, url = _, encoding = _, options = _, &block); end
end

class Nokogiri::XML::Attr < ::Nokogiri::XML::Node
  def content=(_); end
  def to_s; end
  def value; end
  def value=(_); end

  private

  def inspect_attributes; end

  def self.new(*_); end
end

class Nokogiri::XML::AttributeDecl < ::Nokogiri::XML::Node
  def attribute_type; end
  def default; end
  def enumeration; end
  def inspect; end
end

class Nokogiri::XML::Builder
  def initialize(options = _, root = _, &block); end

  def <<(string); end
  def [](ns); end
  def arity; end
  def arity=(_); end
  def cdata(string); end
  def comment(string); end
  def context; end
  def context=(_); end
  def doc; end
  def doc=(_); end
  def method_missing(method, *args, &block); end
  def parent; end
  def parent=(_); end
  def text(string); end
  def to_xml(*args); end

  private

  def insert(node, &block); end

  def self.with(root, &block); end
end

class Nokogiri::XML::Builder::NodeBuilder
  def initialize(node, doc_builder); end

  def [](k); end
  def []=(k, v); end
  def method_missing(method, *args, &block); end
end

class Nokogiri::XML::CDATA < ::Nokogiri::XML::Text
  def name; end

  def self.new(*_); end
end

class Nokogiri::XML::CharacterData < ::Nokogiri::XML::Node
  include(::Nokogiri::XML::PP::CharacterData)
end

class Nokogiri::XML::Comment < ::Nokogiri::XML::CharacterData
  def self.new(*_); end
end

class Nokogiri::XML::DTD < ::Nokogiri::XML::Node
  def attributes; end
  def each; end
  def elements; end
  def entities; end
  def external_id; end
  def html5_dtd?; end
  def html_dtd?; end
  def keys; end
  def notations; end
  def system_id; end
  def validate(_); end
end

class Nokogiri::XML::Document < ::Nokogiri::XML::Node
  def initialize(*args); end

  def <<(node_or_tags); end
  def add_child(node_or_tags); end
  def canonicalize(*_); end
  def clone(*_); end
  def collect_namespaces; end
  def create_cdata(string, &block); end
  def create_comment(string, &block); end
  def create_element(name, *args, &block); end
  def create_entity(*_); end
  def create_text_node(string, &block); end
  def decorate(node); end
  def decorators(key); end
  def document; end
  def dup(*_); end
  def encoding; end
  def encoding=(_); end
  def errors; end
  def errors=(_); end
  def fragment(tags = _); end
  def name; end
  def namespaces; end
  def remove_namespaces!; end
  def root; end
  def root=(_); end
  def slop!; end
  def to_java; end
  def to_xml(*args, &block); end
  def url; end
  def validate; end
  def version; end

  private

  def inspect_attributes; end

  def self.empty_doc?(string_or_io); end
  def self.new(*_); end
  def self.parse(string_or_io, url = _, encoding = _, options = _); end
  def self.read_io(_, _, _, _); end
  def self.read_memory(_, _, _, _); end
  def self.wrap(document); end
end

Nokogiri::XML::Document::IMPLIED_XPATH_CONTEXTS = T.let(T.unsafe(nil), Array)

Nokogiri::XML::Document::NCNAME_CHAR = T.let(T.unsafe(nil), String)

Nokogiri::XML::Document::NCNAME_RE = T.let(T.unsafe(nil), Regexp)

Nokogiri::XML::Document::NCNAME_START_CHAR = T.let(T.unsafe(nil), String)

class Nokogiri::XML::DocumentFragment < ::Nokogiri::XML::Node
  def initialize(document, tags = _, ctx = _); end

  def css(*args); end
  def dup; end
  def errors; end
  def errors=(things); end
  def name; end
  def search(*rules); end
  def serialize; end
  def to_html(*args); end
  def to_s; end
  def to_xhtml(*args); end
  def to_xml(*args); end

  private

  def coerce(data); end
  def namespace_declarations(ctx); end

  def self.new(*_); end
  def self.parse(tags); end
end

class Nokogiri::XML::Element < ::Nokogiri::XML::Node
end

class Nokogiri::XML::ElementContent
  def children; end
  def document; end
  def name; end
  def occur; end
  def prefix; end
  def type; end

  private

  def c1; end
  def c2; end
end

Nokogiri::XML::ElementContent::ELEMENT = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ElementContent::MULT = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ElementContent::ONCE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ElementContent::OPT = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ElementContent::OR = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ElementContent::PCDATA = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ElementContent::PLUS = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ElementContent::SEQ = T.let(T.unsafe(nil), Integer)

class Nokogiri::XML::ElementDecl < ::Nokogiri::XML::Node
  def content; end
  def element_type; end
  def inspect; end
  def prefix; end
end

class Nokogiri::XML::EntityDecl < ::Nokogiri::XML::Node
  def content; end
  def entity_type; end
  def external_id; end
  def inspect; end
  def original_content; end
  def system_id; end

  def self.new(name, doc, *args); end
end

Nokogiri::XML::EntityDecl::EXTERNAL_GENERAL_PARSED = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::EntityDecl::EXTERNAL_GENERAL_UNPARSED = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::EntityDecl::EXTERNAL_PARAMETER = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::EntityDecl::INTERNAL_GENERAL = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::EntityDecl::INTERNAL_PARAMETER = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::EntityDecl::INTERNAL_PREDEFINED = T.let(T.unsafe(nil), Integer)

class Nokogiri::XML::EntityReference < ::Nokogiri::XML::Node
  def children; end
  def inspect_attributes; end

  def self.new(*_); end
end

class Nokogiri::XML::Namespace
  include(::Nokogiri::XML::PP::Node)

  def document; end
  def href; end
  def prefix; end

  private

  def inspect_attributes; end
end

class Nokogiri::XML::Node
  include(::Nokogiri::XML::PP::Node)
  include(::Nokogiri::XML::Searchable)
  include(::Enumerable)

  def initialize(name, document); end

  def <<(node_or_tags); end
  def <=>(other); end
  def ==(other); end
  def >(selector); end
  def [](name); end
  def []=(name, value); end
  def accept(visitor); end
  def add_child(node_or_tags); end
  def add_class(name); end
  def add_namespace(_, _); end
  def add_namespace_definition(_, _); end
  def add_next_sibling(node_or_tags); end
  def add_previous_sibling(node_or_tags); end
  def after(node_or_tags); end
  def ancestors(selector = _); end
  def append_class(name); end
  def attr(name); end
  def attribute(_); end
  def attribute_nodes; end
  def attribute_with_ns(_, _); end
  def attributes; end
  def before(node_or_tags); end
  def blank?; end
  def canonicalize(mode = _, inclusive_namespaces = _, with_comments = _); end
  def cdata?; end
  def child; end
  def children; end
  def children=(node_or_tags); end
  def classes; end
  def clone(*_); end
  def comment?; end
  def content; end
  def content=(string); end
  def create_external_subset(_, _, _); end
  def create_internal_subset(_, _, _); end
  def css_path; end
  def decorate!; end
  def default_namespace=(url); end
  def delete(name); end
  def description; end
  def do_xinclude(options = _); end
  def document; end
  def document?; end
  def dup(*_); end
  def each; end
  def elem?; end
  def element?; end
  def element_children; end
  def elements; end
  def encode_special_chars(_); end
  def external_subset; end
  def first_element_child; end
  def fragment(tags); end
  def fragment?; end
  def get_attribute(name); end
  def has_attribute?(_); end
  def html?; end
  def inner_html(*args); end
  def inner_html=(node_or_tags); end
  def inner_text; end
  def internal_subset; end
  def key?(_); end
  def keys; end
  def lang; end
  def lang=(_); end
  def last_element_child; end
  def line; end
  def matches?(selector); end
  def name; end
  def name=(_); end
  def namespace; end
  def namespace=(ns); end
  def namespace_definitions; end
  def namespace_scopes; end
  def namespaced_key?(_, _); end
  def namespaces; end
  def native_content=(_); end
  def next; end
  def next=(node_or_tags); end
  def next_element; end
  def next_sibling; end
  def node_name; end
  def node_name=(_); end
  def node_type; end
  def parent; end
  def parent=(parent_node); end
  def parse(string_or_io, options = _); end
  def path; end
  def pointer_id; end
  def prepend_child(node_or_tags); end
  def previous; end
  def previous=(node_or_tags); end
  def previous_element; end
  def previous_sibling; end
  def processing_instruction?; end
  def read_only?; end
  def remove; end
  def remove_attribute(name); end
  def remove_class(name = _); end
  def replace(node_or_tags); end
  def serialize(*args, &block); end
  def set_attribute(name, value); end
  def swap(node_or_tags); end
  def text; end
  def text?; end
  def to_html(options = _); end
  def to_s; end
  def to_str; end
  def to_xhtml(options = _); end
  def to_xml(options = _); end
  def traverse(&block); end
  def type; end
  def unlink; end
  def values; end
  def wrap(html); end
  def write_html_to(io, options = _); end
  def write_to(io, *options); end
  def write_xhtml_to(io, options = _); end
  def write_xml_to(io, options = _); end
  def xml?; end

  private

  def add_child_node(_); end
  def add_child_node_and_reparent_attrs(node); end
  def add_next_sibling_node(_); end
  def add_previous_sibling_node(_); end
  def add_sibling(next_or_previous, node_or_tags); end
  def coerce(data); end
  def compare(_); end
  def dump_html; end
  def get(_); end
  def in_context(_, _); end
  def inspect_attributes; end
  def native_write_to(_, _, _, _); end
  def process_xincludes(_); end
  def replace_node(_); end
  def set(_, _); end
  def set_namespace(_); end
  def to_format(save_option, options); end
  def write_format_to(save_option, io, options); end

  def self.new(*_); end
end

Nokogiri::XML::Node::ATTRIBUTE_DECL = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::ATTRIBUTE_NODE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::CDATA_SECTION_NODE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::COMMENT_NODE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::DOCB_DOCUMENT_NODE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::DOCUMENT_FRAG_NODE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::DOCUMENT_NODE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::DOCUMENT_TYPE_NODE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::DTD_NODE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::ELEMENT_DECL = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::ELEMENT_NODE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::ENTITY_DECL = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::ENTITY_NODE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::ENTITY_REF_NODE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::HTML_DOCUMENT_NODE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::IMPLIED_XPATH_CONTEXTS = T.let(T.unsafe(nil), Array)

Nokogiri::XML::Node::NAMESPACE_DECL = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::NOTATION_NODE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::PI_NODE = T.let(T.unsafe(nil), Integer)

class Nokogiri::XML::Node::SaveOptions
  def initialize(options = _); end

  def as_html; end
  def as_html?; end
  def as_xhtml; end
  def as_xhtml?; end
  def as_xml; end
  def as_xml?; end
  def default_html; end
  def default_html?; end
  def default_xhtml; end
  def default_xhtml?; end
  def default_xml; end
  def default_xml?; end
  def format; end
  def format?; end
  def no_declaration; end
  def no_declaration?; end
  def no_empty_tags; end
  def no_empty_tags?; end
  def no_xhtml; end
  def no_xhtml?; end
  def options; end
  def to_i; end
end

Nokogiri::XML::Node::SaveOptions::AS_HTML = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::SaveOptions::AS_XHTML = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::SaveOptions::AS_XML = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::SaveOptions::DEFAULT_HTML = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::SaveOptions::DEFAULT_XHTML = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::SaveOptions::DEFAULT_XML = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::SaveOptions::FORMAT = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::SaveOptions::NO_DECLARATION = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::SaveOptions::NO_EMPTY_TAGS = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::SaveOptions::NO_XHTML = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::TEXT_NODE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::XINCLUDE_END = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Node::XINCLUDE_START = T.let(T.unsafe(nil), Integer)

class Nokogiri::XML::NodeSet
  include(::Nokogiri::XML::Searchable)
  include(::Enumerable)

  def initialize(document, list = _); end

  def %(*args); end
  def &(_); end
  def +(_); end
  def -(_); end
  def <<(_); end
  def ==(other); end
  def >(selector); end
  def [](*_); end
  def add_class(name); end
  def after(datum); end
  def append_class(name); end
  def at(*args); end
  def attr(key, value = _, &block); end
  def attribute(key, value = _, &block); end
  def before(datum); end
  def children; end
  def clone; end
  def css(*args); end
  def delete(_); end
  def document; end
  def document=(_); end
  def dup; end
  def each; end
  def empty?; end
  def filter(expr); end
  def first(n = _); end
  def include?(_); end
  def index(node = _); end
  def inner_html(*args); end
  def inner_text; end
  def inspect; end
  def last; end
  def length; end
  def pop; end
  def push(_); end
  def remove; end
  def remove_attr(name); end
  def remove_attribute(name); end
  def remove_class(name = _); end
  def reverse; end
  def set(key, value = _, &block); end
  def shift; end
  def size; end
  def slice(*_); end
  def text; end
  def to_a; end
  def to_ary; end
  def to_html(*args); end
  def to_s; end
  def to_xhtml(*args); end
  def to_xml(*args); end
  def unlink; end
  def wrap(html); end
  def xpath(*args); end
  def |(_); end
end

Nokogiri::XML::NodeSet::IMPLIED_XPATH_CONTEXTS = T.let(T.unsafe(nil), Array)

class Nokogiri::XML::Notation < ::Struct
end

module Nokogiri::XML::PP
end

module Nokogiri::XML::PP::CharacterData
  def inspect; end
  def pretty_print(pp); end
end

module Nokogiri::XML::PP::Node
  def inspect; end
  def pretty_print(pp); end
end

class Nokogiri::XML::ParseOptions
  def initialize(options = _); end

  def compact; end
  def compact?; end
  def default_html; end
  def default_html?; end
  def default_xml; end
  def default_xml?; end
  def dtdattr; end
  def dtdattr?; end
  def dtdload; end
  def dtdload?; end
  def dtdvalid; end
  def dtdvalid?; end
  def huge; end
  def huge?; end
  def inspect; end
  def nobasefix; end
  def nobasefix?; end
  def noblanks; end
  def noblanks?; end
  def nocdata; end
  def nocdata?; end
  def nocompact; end
  def nodefault_html; end
  def nodefault_xml; end
  def nodict; end
  def nodict?; end
  def nodtdattr; end
  def nodtdload; end
  def nodtdvalid; end
  def noent; end
  def noent?; end
  def noerror; end
  def noerror?; end
  def nohuge; end
  def nonet; end
  def nonet?; end
  def nonobasefix; end
  def nonoblanks; end
  def nonocdata; end
  def nonodict; end
  def nonoent; end
  def nonoerror; end
  def nononet; end
  def nonowarning; end
  def nonoxincnode; end
  def nonsclean; end
  def noold10; end
  def nopedantic; end
  def norecover; end
  def nosax1; end
  def nowarning; end
  def nowarning?; end
  def noxinclude; end
  def noxincnode; end
  def noxincnode?; end
  def nsclean; end
  def nsclean?; end
  def old10; end
  def old10?; end
  def options; end
  def options=(_); end
  def pedantic; end
  def pedantic?; end
  def recover; end
  def recover?; end
  def sax1; end
  def sax1?; end
  def strict; end
  def strict?; end
  def to_i; end
  def xinclude; end
  def xinclude?; end
end

Nokogiri::XML::ParseOptions::COMPACT = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::DEFAULT_HTML = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::DEFAULT_XML = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::DTDATTR = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::DTDLOAD = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::DTDVALID = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::HUGE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::NOBASEFIX = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::NOBLANKS = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::NOCDATA = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::NODICT = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::NOENT = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::NOERROR = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::NONET = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::NOWARNING = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::NOXINCNODE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::NSCLEAN = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::OLD10 = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::PEDANTIC = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::RECOVER = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::SAX1 = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::STRICT = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::ParseOptions::XINCLUDE = T.let(T.unsafe(nil), Integer)

class Nokogiri::XML::ProcessingInstruction < ::Nokogiri::XML::Node
  def initialize(document, name, content); end

  def self.new(*_); end
end

class Nokogiri::XML::Reader
  include(::Enumerable)

  def initialize(source, url = _, encoding = _); end

  def attribute(_); end
  def attribute_at(_); end
  def attribute_count; end
  def attribute_nodes; end
  def attributes; end
  def attributes?; end
  def base_uri; end
  def default?; end
  def depth; end
  def each; end
  def empty_element?; end
  def encoding; end
  def errors; end
  def errors=(_); end
  def inner_xml; end
  def lang; end
  def local_name; end
  def name; end
  def namespace_uri; end
  def namespaces; end
  def node_type; end
  def outer_xml; end
  def prefix; end
  def read; end
  def self_closing?; end
  def source; end
  def state; end
  def value; end
  def value?; end
  def xml_version; end

  private

  def attr_nodes; end

  def self.from_io(*_); end
  def self.from_memory(*_); end
end

Nokogiri::XML::Reader::TYPE_ATTRIBUTE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Reader::TYPE_CDATA = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Reader::TYPE_COMMENT = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Reader::TYPE_DOCUMENT = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Reader::TYPE_DOCUMENT_FRAGMENT = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Reader::TYPE_DOCUMENT_TYPE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Reader::TYPE_ELEMENT = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Reader::TYPE_END_ELEMENT = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Reader::TYPE_END_ENTITY = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Reader::TYPE_ENTITY = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Reader::TYPE_ENTITY_REFERENCE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Reader::TYPE_NONE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Reader::TYPE_NOTATION = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Reader::TYPE_PROCESSING_INSTRUCTION = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Reader::TYPE_SIGNIFICANT_WHITESPACE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Reader::TYPE_TEXT = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Reader::TYPE_WHITESPACE = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::Reader::TYPE_XML_DECLARATION = T.let(T.unsafe(nil), Integer)

class Nokogiri::XML::RelaxNG < ::Nokogiri::XML::Schema

  private

  def validate_document(_); end

  def self.from_document(_); end
  def self.read_memory(_); end
end

module Nokogiri::XML::SAX
end

class Nokogiri::XML::SAX::Document
  def cdata_block(string); end
  def characters(string); end
  def comment(string); end
  def end_document; end
  def end_element(name); end
  def end_element_namespace(name, prefix = _, uri = _); end
  def error(string); end
  def processing_instruction(name, content); end
  def start_document; end
  def start_element(name, attrs = _); end
  def start_element_namespace(name, attrs = _, prefix = _, uri = _, ns = _); end
  def warning(string); end
  def xmldecl(version, encoding, standalone); end
end

class Nokogiri::XML::SAX::Parser
  def initialize(doc = _, encoding = _); end

  def document; end
  def document=(_); end
  def encoding; end
  def encoding=(_); end
  def parse(thing, &block); end
  def parse_file(filename); end
  def parse_io(io, encoding = _); end
  def parse_memory(data); end

  private

  def check_encoding(encoding); end
end

class Nokogiri::XML::SAX::Parser::Attribute < ::Struct
end

Nokogiri::XML::SAX::Parser::ENCODINGS = T.let(T.unsafe(nil), Hash)

class Nokogiri::XML::SAX::ParserContext
  def column; end
  def line; end
  def parse_with(_); end
  def recovery; end
  def recovery=(_); end
  def replace_entities; end
  def replace_entities=(_); end

  def self.file(_); end
  def self.io(_, _); end
  def self.memory(_); end
  def self.new(thing, encoding = _); end
end

class Nokogiri::XML::SAX::PushParser
  def initialize(doc = _, file_name = _, encoding = _); end

  def <<(chunk, last_chunk = _); end
  def document; end
  def document=(_); end
  def finish; end
  def options; end
  def options=(_); end
  def replace_entities; end
  def replace_entities=(_); end
  def write(chunk, last_chunk = _); end

  private

  def initialize_native(_, _); end
  def native_write(_, _); end
end

class Nokogiri::XML::Schema
  def errors; end
  def errors=(_); end
  def valid?(thing); end
  def validate(thing); end

  private

  def validate_document(_); end
  def validate_file(_); end

  def self.from_document(_); end
  def self.new(string_or_io); end
  def self.read_memory(_); end
end

module Nokogiri::XML::Searchable
  def %(*args); end
  def /(*args); end
  def at(*args); end
  def at_css(*args); end
  def at_xpath(*args); end
  def css(*args); end
  def search(*args); end
  def xpath(*args); end

  private

  def css_internal(node, rules, handler, ns); end
  def css_rules_to_xpath(rules, ns); end
  def extract_params(params); end
  def xpath_impl(node, path, handler, ns, binds); end
  def xpath_internal(node, paths, handler, ns, binds); end
  def xpath_query_from_css_rule(rule, ns); end
end

Nokogiri::XML::Searchable::LOOKS_LIKE_XPATH = T.let(T.unsafe(nil), Regexp)

class Nokogiri::XML::SyntaxError < ::Nokogiri::SyntaxError
  def code; end
  def column; end
  def domain; end
  def error?; end
  def fatal?; end
  def file; end
  def int1; end
  def level; end
  def line; end
  def none?; end
  def str1; end
  def str2; end
  def str3; end
  def to_s; end
  def warning?; end

  private

  def level_to_s; end
  def location_to_s; end
  def nil_or_zero?(attribute); end
end

class Nokogiri::XML::Text < ::Nokogiri::XML::CharacterData
  def content=(string); end

  def self.new(*_); end
end

Nokogiri::XML::XML_C14N_1_0 = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::XML_C14N_1_1 = T.let(T.unsafe(nil), Integer)

Nokogiri::XML::XML_C14N_EXCLUSIVE_1_0 = T.let(T.unsafe(nil), Integer)

class Nokogiri::XML::XPath
  def document; end
  def document=(_); end
end

class Nokogiri::XML::XPath::SyntaxError < ::Nokogiri::XML::SyntaxError
  def to_s; end
end

class Nokogiri::XML::XPathContext
  def evaluate(*_); end
  def register_namespaces(namespaces); end
  def register_ns(_, _); end
  def register_variable(_, _); end

  def self.new(_); end
end

module Nokogiri::XSLT
  def self.parse(string, modules = _); end
  def self.quote_params(params); end
  def self.register(_, _); end
end

class Nokogiri::XSLT::Stylesheet
  def apply_to(document, params = _); end
  def serialize(_); end
  def transform(*_); end

  def self.parse_stylesheet_doc(_); end
end
