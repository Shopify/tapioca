# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   tapioca sync

# typed: true

module Rainbow
  def self.enabled; end
  def self.enabled=(value); end
  def self.global; end
  def self.new; end
  def self.uncolor(string); end
end

class Rainbow::Color
  def ground; end

  def self.build(ground, values); end
  def self.parse_hex_color(hex); end
end

class Rainbow::Color::Indexed < ::Rainbow::Color
  def initialize(ground, num); end

  def codes; end
  def num; end
end

class Rainbow::Color::Named < ::Rainbow::Color::Indexed
  def initialize(ground, name); end

  def self.color_names; end
  def self.valid_names; end
end

Rainbow::Color::Named::NAMES = T.let(T.unsafe(nil), Hash)

class Rainbow::Color::RGB < ::Rainbow::Color::Indexed
  def initialize(ground, *values); end

  def b; end
  def codes; end
  def g; end
  def r; end

  private

  def code_from_rgb; end

  def self.to_ansi_domain(value); end
end

class Rainbow::Color::X11Named < ::Rainbow::Color::RGB
  include(::Rainbow::X11ColorNames)

  def initialize(ground, name); end

  def self.color_names; end
  def self.valid_names; end
end

class Rainbow::NullPresenter < ::String
  def background(*_values); end
  def bg(*_values); end
  def black; end
  def blink; end
  def blue; end
  def bold; end
  def bright; end
  def color(*_values); end
  def cyan; end
  def dark; end
  def faint; end
  def fg(*_values); end
  def foreground(*_values); end
  def green; end
  def hide; end
  def inverse; end
  def italic; end
  def magenta; end
  def method_missing(method_name, *args); end
  def red; end
  def reset; end
  def underline; end
  def white; end
  def yellow; end

  private

  def respond_to_missing?(method_name, *args); end
end

class Rainbow::Presenter < ::String
  def background(*values); end
  def bg(*values); end
  def black; end
  def blink; end
  def blue; end
  def bold; end
  def bright; end
  def color(*values); end
  def cyan; end
  def dark; end
  def faint; end
  def fg(*values); end
  def foreground(*values); end
  def green; end
  def hide; end
  def inverse; end
  def italic; end
  def magenta; end
  def method_missing(method_name, *args); end
  def red; end
  def reset; end
  def underline; end
  def white; end
  def yellow; end

  private

  def respond_to_missing?(method_name, *args); end
  def wrap_with_sgr(codes); end
end

Rainbow::Presenter::TERM_EFFECTS = T.let(T.unsafe(nil), Hash)

class Rainbow::StringUtils
  def self.uncolor(string); end
  def self.wrap_with_sgr(string, codes); end
end

class Rainbow::Wrapper
  def initialize(enabled = _); end

  def enabled; end
  def enabled=(_); end
  def wrap(string); end
end

module Rainbow::X11ColorNames
end

Rainbow::X11ColorNames::NAMES = T.let(T.unsafe(nil), Hash)
