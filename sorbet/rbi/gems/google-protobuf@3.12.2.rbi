# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `google-protobuf` gem.
# Please instead update this file by running `tapioca sync`.

# typed: true

module Google
end

module Google::Protobuf
  def self.decode(klass, proto); end
  def self.decode_json(klass, json, options = _); end
  def self.deep_copy(_); end
  def self.discard_unknown(_); end
  def self.encode(msg); end
  def self.encode_json(msg, options = _); end
end

class Google::Protobuf::Descriptor
  include(::Enumerable)

  def initialize(_, _, _); end

  def each; end
  def each_oneof; end
  def file_descriptor; end
  def lookup(_); end
  def lookup_oneof(_); end
  def msgclass; end
  def name; end
end

class Google::Protobuf::DescriptorPool
  def build(*_); end
  def lookup(_); end

  def self.generated_pool; end
end

class Google::Protobuf::EnumDescriptor
  include(::Enumerable)

  def initialize(_, _, _); end

  def each; end
  def enummodule; end
  def file_descriptor; end
  def lookup_name(_); end
  def lookup_value(_); end
  def name; end
end

class Google::Protobuf::Error < ::StandardError
end

class Google::Protobuf::FieldDescriptor
  def initialize(_, _, _); end

  def clear(_); end
  def default; end
  def get(_); end
  def has?(_); end
  def label; end
  def name; end
  def number; end
  def set(_, _); end
  def submsg_name; end
  def subtype; end
  def type; end
end

class Google::Protobuf::FileDescriptor
  def initialize(_, _, _); end

  def name; end
  def syntax; end
end

module Google::Protobuf::Internal
  def self.fixup_descriptor(package, msg_names, enum_names); end
  def self.infer_package(names); end
end

class Google::Protobuf::Internal::Builder
  def initialize(_); end

  def add_enum(_); end
  def add_file(*_); end
  def add_message(_); end
end

class Google::Protobuf::Internal::EnumBuilderContext
  def initialize(_, _); end

  def value(_, _); end
end

class Google::Protobuf::Internal::FileBuilderContext
  def initialize(_, _, _); end

  def add_enum(_); end
  def add_message(_); end
end

class Google::Protobuf::Internal::MessageBuilderContext
  def initialize(_, _); end

  def map(*_); end
  def oneof(_); end
  def optional(*_); end
  def proto3_optional(*_); end
  def repeated(*_); end
  def required(*_); end
end

class Google::Protobuf::Internal::NestingBuilder
  def initialize(msg_names, enum_names); end

  def build(package); end

  private

  def build_msg(msg); end
  def parent(name); end
end

class Google::Protobuf::Internal::OneofBuilderContext
  def initialize(_, _); end

  def optional(*_); end
end

class Google::Protobuf::Map
  include(::Enumerable)

  def initialize(*_); end

  def ==(_); end
  def [](_); end
  def []=(_, _); end
  def clear; end
  def delete(_); end
  def dup; end
  def each; end
  def has_key?(_); end
  def hash; end
  def inspect; end
  def keys; end
  def length; end
  def merge(_); end
  def to_h; end
  def values; end
end

module Google::Protobuf::MessageExts
  mixes_in_class_methods(::Google::Protobuf::MessageExts::ClassMethods)

  def to_json(options = _); end
  def to_proto; end

  def self.included(klass); end
end

module Google::Protobuf::MessageExts::ClassMethods
end

class Google::Protobuf::OneofDescriptor
  include(::Enumerable)

  def initialize(_, _, _); end

  def each; end
  def name; end
end

class Google::Protobuf::ParseError < ::Google::Protobuf::Error
end

class Google::Protobuf::RepeatedField
  include(::Enumerable)
  extend(::Forwardable)

  def initialize(*_); end

  def &(*args, &block); end
  def *(*args, &block); end
  def +(_); end
  def -(*args, &block); end
  def <<(_); end
  def <=>(*args, &block); end
  def ==(_); end
  def [](*_); end
  def []=(_, _); end
  def assoc(*args, &block); end
  def at(*_); end
  def bsearch(*args, &block); end
  def bsearch_index(*args, &block); end
  def clear; end
  def clone; end
  def collect!(*args, &block); end
  def combination(*args, &block); end
  def compact(*args, &block); end
  def compact!(*args, &block); end
  def concat(_); end
  def count(*args, &block); end
  def cycle(*args, &block); end
  def delete(*args, &block); end
  def delete_at(*args, &block); end
  def delete_if(*args, &block); end
  def dig(*args, &block); end
  def drop(*args, &block); end
  def drop_while(*args, &block); end
  def dup; end
  def each; end
  def each_index(*_); end
  def empty?; end
  def eql?(*args, &block); end
  def fetch(*args, &block); end
  def fill(*args, &block); end
  def find_index(*args, &block); end
  def first(n = _); end
  def flatten(*args, &block); end
  def flatten!(*args, &block); end
  def hash; end
  def include?(*args, &block); end
  def index(*args, &block); end
  def insert(*args, &block); end
  def inspect(*args, &block); end
  def join(*args, &block); end
  def keep_if(*args, &block); end
  def last(n = _); end
  def length; end
  def map; end
  def map!(*args, &block); end
  def pack(*args, &block); end
  def permutation(*args, &block); end
  def pop(n = _); end
  def pretty_print(*args, &block); end
  def pretty_print_cycle(*args, &block); end
  def product(*args, &block); end
  def push(*_); end
  def rassoc(*args, &block); end
  def reject!(*args, &block); end
  def repeated_combination(*args, &block); end
  def repeated_permutation(*args, &block); end
  def replace(_); end
  def reverse(*args, &block); end
  def reverse!(*args, &block); end
  def rindex(*args, &block); end
  def rotate(*args, &block); end
  def rotate!(*args, &block); end
  def sample(*args, &block); end
  def select!(*args, &block); end
  def shelljoin(*args, &block); end
  def shift(*args, &block); end
  def shuffle(*args, &block); end
  def shuffle!(*args, &block); end
  def size; end
  def slice(*_); end
  def slice!(*args, &block); end
  def sort!(*args, &block); end
  def sort_by!(*args, &block); end
  def to_ary; end
  def to_s(*args, &block); end
  def transpose(*args, &block); end
  def uniq(*args, &block); end
  def uniq!(*args, &block); end
  def unshift(*args, &block); end
  def values_at; end
  def |(*args, &block); end

  private

  def pop_one; end
end

class Google::Protobuf::RepeatedField::ProxyingEnumerator < ::Struct
  def each(*args, &block); end
end

class Google::Protobuf::TypeError < ::TypeError
end
