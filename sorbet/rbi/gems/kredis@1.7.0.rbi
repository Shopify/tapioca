# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `kredis` gem.
# Please instead update this file by running `bin/tapioca gem kredis`.

# source://kredis//lib/kredis/version.rb#1
module Kredis
  include ::Kredis::Types
  include ::Kredis::TypeCasting
  include ::Kredis::Namespace
  include ::Kredis::Connections
  extend ::Kredis::Types
  extend ::Kredis::TypeCasting
  extend ::Kredis::Namespace
  extend ::Kredis::Connections
  extend ::Kredis

  # source://kredis//lib/kredis.rb#31
  def instrument(channel, **options, &block); end

  # source://kredis//lib/kredis.rb#25
  def logger; end

  # source://kredis//lib/kredis.rb#25
  def logger=(val); end

  # source://kredis//lib/kredis.rb#27
  def redis(config: T.unsafe(nil)); end

  class << self
    # source://kredis//lib/kredis.rb#25
    def logger; end

    # source://kredis//lib/kredis.rb#25
    def logger=(val); end
  end
end

# source://kredis//lib/kredis/attributes.rb#3
module Kredis::Attributes
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Kredis::Attributes::ClassMethods

  private

  # source://kredis//lib/kredis/attributes.rb#123
  def enrich_after_change_with_record_access(type, original_after_change); end

  # source://kredis//lib/kredis/attributes.rb#119
  def extract_kredis_id; end

  # source://kredis//lib/kredis/attributes.rb#130
  def kredis_default_evaluated(default); end

  # source://kredis//lib/kredis/attributes.rb#107
  def kredis_key_evaluated(key); end

  # source://kredis//lib/kredis/attributes.rb#115
  def kredis_key_for_attribute(name); end
end

# source://kredis//lib/kredis/attributes.rb#0
module Kredis::Attributes::ClassMethods
  # source://kredis//lib/kredis/attributes.rb#83
  def kredis_boolean(name, key: T.unsafe(nil), default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#71
  def kredis_counter(name, key: T.unsafe(nil), default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#23
  def kredis_datetime(name, key: T.unsafe(nil), default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#19
  def kredis_decimal(name, key: T.unsafe(nil), default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#39
  def kredis_enum(name, values:, default:, key: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#27
  def kredis_flag(name, key: T.unsafe(nil), default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#35
  def kredis_float(name, key: T.unsafe(nil), default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#79
  def kredis_hash(name, key: T.unsafe(nil), default: T.unsafe(nil), typed: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#15
  def kredis_integer(name, key: T.unsafe(nil), default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#43
  def kredis_json(name, key: T.unsafe(nil), default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#75
  def kredis_limiter(name, limit:, key: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#47
  def kredis_list(name, key: T.unsafe(nil), default: T.unsafe(nil), typed: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#59
  def kredis_ordered_set(name, limit: T.unsafe(nil), default: T.unsafe(nil), key: T.unsafe(nil), typed: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#7
  def kredis_proxy(name, key: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#55
  def kredis_set(name, key: T.unsafe(nil), default: T.unsafe(nil), typed: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#63
  def kredis_slot(name, key: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#67
  def kredis_slots(name, available:, key: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#11
  def kredis_string(name, key: T.unsafe(nil), default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/attributes.rb#51
  def kredis_unique_list(name, limit: T.unsafe(nil), key: T.unsafe(nil), default: T.unsafe(nil), typed: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  private

  # source://kredis//lib/kredis/attributes.rb#88
  def kredis_connection_with(method, name, key, **options); end
end

# source://kredis//lib/kredis/connections.rb#5
module Kredis::Connections
  # source://kredis//lib/kredis/connections.rb#25
  def clear_all; end

  # source://kredis//lib/kredis/connections.rb#10
  def configurator; end

  # source://kredis//lib/kredis/connections.rb#10
  def configurator=(val); end

  # source://kredis//lib/kredis/connections.rb#13
  def configured_for(name); end

  # source://kredis//lib/kredis/connections.rb#9
  def connections; end

  # source://kredis//lib/kredis/connections.rb#9
  def connections=(val); end

  # source://kredis//lib/kredis/connections.rb#11
  def connector; end

  # source://kredis//lib/kredis/connections.rb#11
  def connector=(val); end

  class << self
    # source://kredis//lib/kredis/connections.rb#10
    def configurator; end

    # source://kredis//lib/kredis/connections.rb#10
    def configurator=(val); end

    # source://kredis//lib/kredis/connections.rb#9
    def connections; end

    # source://kredis//lib/kredis/connections.rb#9
    def connections=(val); end

    # source://kredis//lib/kredis/connections.rb#11
    def connector; end

    # source://kredis//lib/kredis/connections.rb#11
    def connector=(val); end
  end
end

# source://kredis//lib/kredis/connections.rb#7
Kredis::Connections::DEFAULT_REDIS_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://kredis//lib/kredis/connections.rb#6
Kredis::Connections::DEFAULT_REDIS_URL = T.let(T.unsafe(nil), String)

# source://kredis//lib/kredis/default_values.rb#3
module Kredis::DefaultValues
  extend ::ActiveSupport::Concern

  # source://kredis//lib/kredis/default_values.rb#25
  def initialize(*_arg0, **_arg1, &_arg2); end
end

# source://kredis//lib/kredis/log_subscriber.rb#5
class Kredis::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://kredis//lib/kredis/log_subscriber.rb#14
  def meta(event); end

  # source://kredis//lib/kredis/log_subscriber.rb#10
  def migration(event); end

  # source://kredis//lib/kredis/log_subscriber.rb#6
  def proxy(event); end

  private

  # source://kredis//lib/kredis/log_subscriber.rb#19
  def formatted_in(color, event, type: T.unsafe(nil)); end
end

# source://kredis//lib/kredis/migration.rb#5
class Kredis::Migration
  # @return [Migration] a new instance of Migration
  #
  # source://kredis//lib/kredis/migration.rb#8
  def initialize(config = T.unsafe(nil)); end

  # source://kredis//lib/kredis/migration.rb#35
  def delete_all(*key_patterns); end

  # source://kredis//lib/kredis/migration.rb#23
  def migrate(from:, to:, pipeline: T.unsafe(nil)); end

  # source://kredis//lib/kredis/migration.rb#14
  def migrate_all(key_pattern); end

  private

  # source://kredis//lib/kredis/migration.rb#50
  def each_key_batch_matching(key_pattern, &block); end

  # source://kredis//lib/kredis/migration.rb#58
  def log_migration(message, &block); end

  class << self
    # source://kredis//lib/kredis/migration.rb#6
    def delete_all(*_arg0, **_arg1, &_arg2); end

    # source://kredis//lib/kredis/migration.rb#6
    def migrate(*_arg0, **_arg1, &_arg2); end

    # source://kredis//lib/kredis/migration.rb#6
    def migrate_all(*_arg0, **_arg1, &_arg2); end
  end
end

# source://kredis//lib/kredis/migration.rb#48
Kredis::Migration::SCAN_BATCH_SIZE = T.let(T.unsafe(nil), Integer)

# source://kredis//lib/kredis/namespace.rb#3
module Kredis::Namespace
  # source://kredis//lib/kredis/namespace.rb#8
  def namespace; end

  # source://kredis//lib/kredis/namespace.rb#4
  def namespace=(namespace); end

  # source://kredis//lib/kredis/namespace.rb#12
  def namespaced_key(key); end
end

# source://kredis//lib/kredis/railtie.rb#3
class Kredis::Railtie < ::Rails::Railtie; end

# source://kredis//lib/kredis/type/boolean.rb#4
module Kredis::Type; end

# source://kredis//lib/kredis/type/boolean.rb#5
class Kredis::Type::Boolean < ::ActiveModel::Type::Boolean
  # source://kredis//lib/kredis/type/boolean.rb#6
  def serialize(value); end
end

# source://kredis//lib/kredis/type/datetime.rb#5
class Kredis::Type::DateTime < ::ActiveModel::Type::DateTime
  # source://kredis//lib/kredis/type/datetime.rb#10
  def cast_value(value); end

  # source://kredis//lib/kredis/type/datetime.rb#6
  def serialize(value); end
end

# source://kredis//lib/kredis/type/json.rb#5
class Kredis::Type::Json < ::ActiveModel::Type::Value
  # source://kredis//lib/kredis/type/json.rb#10
  def cast_value(value); end

  # source://kredis//lib/kredis/type/json.rb#14
  def serialize(value); end

  # source://kredis//lib/kredis/type/json.rb#6
  def type; end
end

# source://kredis//lib/kredis/type_casting.rb#9
module Kredis::TypeCasting
  # @raise [InvalidType]
  #
  # source://kredis//lib/kredis/type_casting.rb#28
  def string_to_type(value, type); end

  # source://kredis//lib/kredis/type_casting.rb#38
  def strings_to_types(values, type); end

  # @raise [InvalidType]
  #
  # source://kredis//lib/kredis/type_casting.rb#22
  def type_to_string(value, type); end

  # source://kredis//lib/kredis/type_casting.rb#34
  def types_to_strings(values, type); end
end

# source://kredis//lib/kredis/type_casting.rb#10
class Kredis::TypeCasting::InvalidType < ::StandardError; end

# source://kredis//lib/kredis/type_casting.rb#12
Kredis::TypeCasting::TYPES = T.let(T.unsafe(nil), Hash)

# source://kredis//lib/kredis/types.rb#3
module Kredis::Types
  # source://kredis//lib/kredis/types.rb#31
  def boolean(key, default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#44
  def counter(key, expires_in: T.unsafe(nil), default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#48
  def cycle(key, values:, expires_in: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#35
  def datetime(key, default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#23
  def decimal(key, default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#56
  def enum(key, values:, default:, config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#52
  def flag(key, default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#27
  def float(key, default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#60
  def hash(key, typed: T.unsafe(nil), default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#19
  def integer(key, default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#39
  def json(key, default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#88
  def limiter(key, limit:, expires_in: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#64
  def list(key, default: T.unsafe(nil), typed: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#76
  def ordered_set(key, default: T.unsafe(nil), typed: T.unsafe(nil), limit: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#6
  def proxy(key, config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#11
  def scalar(key, typed: T.unsafe(nil), default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#72
  def set(key, default: T.unsafe(nil), typed: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#80
  def slot(key, config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#84
  def slots(key, available:, config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#15
  def string(key, default: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types.rb#68
  def unique_list(key, default: T.unsafe(nil), typed: T.unsafe(nil), limit: T.unsafe(nil), config: T.unsafe(nil), after_change: T.unsafe(nil)); end

  private

  # source://kredis//lib/kredis/types.rb#93
  def type_from(type_klass, config, key, after_change: T.unsafe(nil), **options); end
end

# source://kredis//lib/kredis/types/callbacks_proxy.rb#3
class Kredis::Types::CallbacksProxy
  # @return [CallbacksProxy] a new instance of CallbacksProxy
  #
  # source://kredis//lib/kredis/types/callbacks_proxy.rb#20
  def initialize(type, callback); end

  # source://kredis//lib/kredis/types/callbacks_proxy.rb#24
  def method_missing(method, *args, **kwargs, &block); end

  # source://kredis//lib/kredis/types/callbacks_proxy.rb#5
  def to_s(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute type.
  #
  # source://kredis//lib/kredis/types/callbacks_proxy.rb#4
  def type; end

  private

  # source://kredis//lib/kredis/types/callbacks_proxy.rb#31
  def invoke_suitable_after_change_callback_for(method); end
end

# source://kredis//lib/kredis/types/callbacks_proxy.rb#7
Kredis::Types::CallbacksProxy::AFTER_CHANGE_OPERATIONS = T.let(T.unsafe(nil), Hash)

# source://kredis//lib/kredis/types/counter.rb#3
class Kredis::Types::Counter < ::Kredis::Types::Proxying
  include ::Kredis::DefaultValues

  # source://kredis//lib/kredis/types/proxying.rb#9
  def decrby(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/counter.rb#17
  def decrement(by: T.unsafe(nil)); end

  # source://kredis//lib/kredis/default_values.rb#11
  def default; end

  # source://kredis//lib/kredis/default_values.rb#7
  def default=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def del(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def exists?(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute expires_in.
  #
  # source://kredis//lib/kredis/types/counter.rb#8
  def expires_in; end

  # Sets the attribute expires_in
  #
  # @param value the value to set the attribute expires_in to.
  #
  # source://kredis//lib/kredis/types/counter.rb#8
  def expires_in=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def get(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def incrby(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/counter.rb#10
  def increment(by: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def multi(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/counter.rb#28
  def reset; end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def set(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def unwatch(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/counter.rb#24
  def value; end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def watch(*_arg0, **_arg1, &_arg2); end

  private

  # source://kredis//lib/kredis/types/counter.rb#33
  def set_default; end
end

# source://kredis//lib/kredis/types/cycle.rb#3
class Kredis::Types::Cycle < ::Kredis::Types::Counter
  # source://kredis//lib/kredis/types/counter.rb#24
  def index; end

  # source://kredis//lib/kredis/types/cycle.rb#12
  def next; end

  # source://kredis//lib/kredis/types/cycle.rb#8
  def value; end

  # Returns the value of attribute values.
  #
  # source://kredis//lib/kredis/types/cycle.rb#4
  def values; end

  # Sets the attribute values
  #
  # @param value the value to set the attribute values to.
  #
  # source://kredis//lib/kredis/types/cycle.rb#4
  def values=(_arg0); end
end

# source://kredis//lib/kredis/types/enum.rb#5
class Kredis::Types::Enum < ::Kredis::Types::Proxying
  include ::Kredis::DefaultValues

  # @return [Enum] a new instance of Enum
  #
  # source://kredis//lib/kredis/default_values.rb#25
  def initialize(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/default_values.rb#11
  def default; end

  # source://kredis//lib/kredis/default_values.rb#7
  def default=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def del(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def exists?(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def get(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def multi(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/enum.rb#29
  def reset; end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def set(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def unwatch(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/enum.rb#25
  def value; end

  # source://kredis//lib/kredis/types/enum.rb#19
  def value=(value); end

  # Returns the value of attribute values.
  #
  # source://kredis//lib/kredis/types/enum.rb#12
  def values; end

  # Sets the attribute values
  #
  # @param value the value to set the attribute values to.
  #
  # source://kredis//lib/kredis/types/enum.rb#12
  def values=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def watch(*_arg0, **_arg1, &_arg2); end

  private

  # source://kredis//lib/kredis/types/enum.rb#37
  def define_predicates_for_values; end

  # source://kredis//lib/kredis/types/enum.rb#44
  def set_default; end
end

# source://kredis//lib/kredis/types/enum.rb#8
class Kredis::Types::Enum::InvalidDefault < ::StandardError; end

# source://kredis//lib/kredis/types/flag.rb#3
class Kredis::Types::Flag < ::Kredis::Types::Proxying
  include ::Kredis::DefaultValues

  # source://kredis//lib/kredis/default_values.rb#11
  def default; end

  # source://kredis//lib/kredis/default_values.rb#7
  def default=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def del(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def exists?(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute expires_in.
  #
  # source://kredis//lib/kredis/types/flag.rb#8
  def expires_in; end

  # Sets the attribute expires_in
  #
  # @param value the value to set the attribute expires_in to.
  #
  # source://kredis//lib/kredis/types/flag.rb#8
  def expires_in=(_arg0); end

  # source://kredis//lib/kredis/types/flag.rb#10
  def mark(expires_in: T.unsafe(nil), force: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://kredis//lib/kredis/types/flag.rb#14
  def marked?; end

  # source://kredis//lib/kredis/types/flag.rb#18
  def remove; end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def set(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def unwatch(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def watch(*_arg0, **_arg1, &_arg2); end

  private

  # source://kredis//lib/kredis/types/flag.rb#23
  def set_default; end
end

# source://kredis//lib/kredis/types/hash.rb#5
class Kredis::Types::Hash < ::Kredis::Types::Proxying
  include ::Kredis::DefaultValues

  # source://kredis//lib/kredis/types/hash.rb#12
  def [](key); end

  # source://kredis//lib/kredis/types/hash.rb#16
  def []=(key, value); end

  # source://kredis//lib/kredis/types/hash.rb#32
  def clear; end

  # source://kredis//lib/kredis/default_values.rb#11
  def default; end

  # source://kredis//lib/kredis/default_values.rb#7
  def default=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def del(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/hash.rb#28
  def delete(*keys); end

  # source://kredis//lib/kredis/types/hash.rb#37
  def entries; end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def exists?(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def hdel(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def hget(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def hgetall(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def hkeys(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def hmget(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def hset(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def hvals(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/hash.rb#42
  def keys; end

  # source://kredis//lib/kredis/types/hash.rb#32
  def remove; end

  # source://kredis//lib/kredis/types/hash.rb#37
  def to_h; end

  # Returns the value of attribute typed.
  #
  # source://kredis//lib/kredis/types/hash.rb#10
  def typed; end

  # Sets the attribute typed
  #
  # @param value the value to set the attribute typed to.
  #
  # source://kredis//lib/kredis/types/hash.rb#10
  def typed=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def unwatch(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/hash.rb#20
  def update(**entries); end

  # source://kredis//lib/kredis/types/hash.rb#46
  def values; end

  # source://kredis//lib/kredis/types/hash.rb#24
  def values_at(*keys); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def watch(*_arg0, **_arg1, &_arg2); end

  private

  # source://kredis//lib/kredis/types/hash.rb#51
  def set_default; end
end

# A limiter is a specialized form of a counter that can be checked whether it has been exceeded and is provided fail safe. This means it can be used to guard login screens from brute force attacks without denying access in case Redis is offline.
#
# It will usually be used as an expiring limiter. Note that the limiter expires in total after the `expires_in` time used upon the first poke.
#
# It offers no guarentee that you can't poke yourself above the limit. You're responsible for checking `#exceeded?` yourself first, and this may produce a race condition. So only use this when the exact number of pokes is not critical.
#
# source://kredis//lib/kredis/types/limiter.rb#8
class Kredis::Types::Limiter < ::Kredis::Types::Counter
  # @return [Boolean]
  #
  # source://kredis//lib/kredis/types/limiter.rb#19
  def exceeded?; end

  # Returns the value of attribute limit.
  #
  # source://kredis//lib/kredis/types/limiter.rb#11
  def limit; end

  # Sets the attribute limit
  #
  # @param value the value to set the attribute limit to.
  #
  # source://kredis//lib/kredis/types/limiter.rb#11
  def limit=(_arg0); end

  # source://kredis//lib/kredis/types/limiter.rb#13
  def poke; end
end

# source://kredis//lib/kredis/types/limiter.rb#9
class Kredis::Types::Limiter::LimitExceeded < ::StandardError; end

# source://kredis//lib/kredis/types/list.rb#3
class Kredis::Types::List < ::Kredis::Types::Proxying
  include ::Kredis::DefaultValues

  # source://kredis//lib/kredis/types/list.rb#23
  def <<(*elements); end

  # source://kredis//lib/kredis/types/list.rb#23
  def append(*elements); end

  # source://kredis//lib/kredis/types/list.rb#28
  def clear; end

  # source://kredis//lib/kredis/default_values.rb#11
  def default; end

  # source://kredis//lib/kredis/default_values.rb#7
  def default=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def del(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/list.rb#10
  def elements; end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def exists?(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/list.rb#32
  def last(n = T.unsafe(nil)); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def lpush(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def lrange(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def lrem(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def ltrim(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/list.rb#19
  def prepend(*elements); end

  # source://kredis//lib/kredis/types/list.rb#15
  def remove(*elements); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def rpush(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/list.rb#10
  def to_a; end

  # Returns the value of attribute typed.
  #
  # source://kredis//lib/kredis/types/list.rb#8
  def typed; end

  # Sets the attribute typed
  #
  # @param value the value to set the attribute typed to.
  #
  # source://kredis//lib/kredis/types/list.rb#8
  def typed=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def unwatch(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def watch(*_arg0, **_arg1, &_arg2); end

  private

  # source://kredis//lib/kredis/types/list.rb#37
  def set_default; end
end

# source://kredis//lib/kredis/types/ordered_set.rb#3
class Kredis::Types::OrderedSet < ::Kredis::Types::Proxying
  include ::Kredis::DefaultValues

  # source://kredis//lib/kredis/types/ordered_set.rb#28
  def <<(elements); end

  # source://kredis//lib/kredis/types/ordered_set.rb#28
  def append(elements); end

  # source://kredis//lib/kredis/default_values.rb#11
  def default; end

  # source://kredis//lib/kredis/default_values.rb#7
  def default=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def del(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/ordered_set.rb#11
  def elements; end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def exists?(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://kredis//lib/kredis/types/ordered_set.rb#20
  def include?(element); end

  # Returns the value of attribute limit.
  #
  # source://kredis//lib/kredis/types/ordered_set.rb#9
  def limit; end

  # source://kredis//lib/kredis/types/ordered_set.rb#33
  def limit=(limit); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def multi(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/ordered_set.rb#24
  def prepend(elements); end

  # source://kredis//lib/kredis/types/ordered_set.rb#16
  def remove(*elements); end

  # source://kredis//lib/kredis/types/ordered_set.rb#11
  def to_a; end

  # Returns the value of attribute typed.
  #
  # source://kredis//lib/kredis/types/ordered_set.rb#8
  def typed; end

  # Sets the attribute typed
  #
  # @param value the value to set the attribute typed to.
  #
  # source://kredis//lib/kredis/types/ordered_set.rb#8
  def typed=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def unwatch(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def watch(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def zadd(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def zcard(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def zrange(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def zrem(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def zremrangebyrank(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def zscore(*_arg0, **_arg1, &_arg2); end

  private

  # source://kredis//lib/kredis/types/ordered_set.rb#62
  def base_score; end

  # source://kredis//lib/kredis/types/ordered_set.rb#40
  def insert(elements, prepending: T.unsafe(nil)); end

  # source://kredis//lib/kredis/types/ordered_set.rb#66
  def process_start_time; end

  # source://kredis//lib/kredis/types/ordered_set.rb#70
  def process_uptime; end

  # source://kredis//lib/kredis/types/ordered_set.rb#84
  def set_default; end

  # source://kredis//lib/kredis/types/ordered_set.rb#74
  def trim(from_beginning:); end
end

# source://kredis//lib/kredis/types/proxy.rb#3
class Kredis::Types::Proxy
  include ::Kredis::Types::Proxy::Failsafe

  # @return [Proxy] a new instance of Proxy
  #
  # source://kredis//lib/kredis/types/proxy.rb#11
  def initialize(redis, key, **options); end

  # Returns the value of attribute key.
  #
  # source://kredis//lib/kredis/types/proxy.rb#7
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://kredis//lib/kredis/types/proxy.rb#7
  def key=(_arg0); end

  # source://kredis//lib/kredis/types/proxy.rb#35
  def method_missing(method, *args, **kwargs); end

  # source://kredis//lib/kredis/types/proxy.rb#16
  def multi(*args, **kwargs, &block); end

  # source://activesupport/7.0.8/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#56
  def pipeline; end

  # source://activesupport/7.0.8/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#100
  def pipeline=(obj); end

  # source://kredis//lib/kredis/types/proxy.rb#31
  def unwatch; end

  # source://kredis//lib/kredis/types/proxy.rb#25
  def watch(&block); end

  private

  # source://kredis//lib/kredis/types/proxy.rb#48
  def log_message(method, *args, **kwargs); end

  # source://kredis//lib/kredis/types/proxy.rb#44
  def redis; end

  class << self
    # source://activesupport/7.0.8/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#48
    def pipeline; end

    # source://activesupport/7.0.8/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#92
    def pipeline=(obj); end
  end
end

# source://kredis//lib/kredis/types/proxy/failsafe.rb#3
module Kredis::Types::Proxy::Failsafe
  # source://kredis//lib/kredis/types/proxy/failsafe.rb#4
  def initialize(*_arg0); end

  # source://kredis//lib/kredis/types/proxy/failsafe.rb#9
  def failsafe; end

  # source://kredis//lib/kredis/types/proxy/failsafe.rb#15
  def suppress_failsafe_with(returning: T.unsafe(nil)); end

  private

  # @return [Boolean]
  #
  # source://kredis//lib/kredis/types/proxy/failsafe.rb#25
  def fail_safe_suppressed?; end
end

# source://kredis//lib/kredis/types/proxying.rb#5
class Kredis::Types::Proxying
  # @return [Proxying] a new instance of Proxying
  #
  # source://kredis//lib/kredis/types/proxying.rb#12
  def initialize(redis, key, **options); end

  # source://kredis//lib/kredis/types/proxying.rb#19
  def failsafe(returning: T.unsafe(nil), &block); end

  # Returns the value of attribute key.
  #
  # source://kredis//lib/kredis/types/proxying.rb#6
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://kredis//lib/kredis/types/proxying.rb#6
  def key=(_arg0); end

  # Returns the value of attribute proxy.
  #
  # source://kredis//lib/kredis/types/proxying.rb#6
  def proxy; end

  # Sets the attribute proxy
  #
  # @param value the value to set the attribute proxy to.
  #
  # source://kredis//lib/kredis/types/proxying.rb#6
  def proxy=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#30
  def string_to_type(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#30
  def strings_to_types(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#30
  def type_to_string(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#30
  def types_to_strings(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#23
  def unproxied_redis; end

  class << self
    # source://kredis//lib/kredis/types/proxying.rb#8
    def proxying(*commands); end
  end
end

# source://kredis//lib/kredis/types/scalar.rb#3
class Kredis::Types::Scalar < ::Kredis::Types::Proxying
  include ::Kredis::DefaultValues

  # @return [Boolean]
  #
  # source://kredis//lib/kredis/types/scalar.rb#28
  def assigned?; end

  # source://kredis//lib/kredis/types/scalar.rb#32
  def clear; end

  # source://kredis//lib/kredis/default_values.rb#11
  def default; end

  # source://kredis//lib/kredis/default_values.rb#7
  def default=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def del(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def exists?(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def expire(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/scalar.rb#40
  def expire_at(datetime); end

  # source://kredis//lib/kredis/types/scalar.rb#36
  def expire_in(seconds); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def expireat(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute expires_in.
  #
  # source://kredis//lib/kredis/types/scalar.rb#8
  def expires_in; end

  # Sets the attribute expires_in
  #
  # @param value the value to set the attribute expires_in to.
  #
  # source://kredis//lib/kredis/types/scalar.rb#8
  def expires_in=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def get(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def set(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/scalar.rb#24
  def to_s; end

  # Returns the value of attribute typed.
  #
  # source://kredis//lib/kredis/types/scalar.rb#8
  def typed; end

  # Sets the attribute typed
  #
  # @param value the value to set the attribute typed to.
  #
  # source://kredis//lib/kredis/types/scalar.rb#8
  def typed=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def unwatch(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/scalar.rb#14
  def value; end

  # source://kredis//lib/kredis/types/scalar.rb#10
  def value=(value); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def watch(*_arg0, **_arg1, &_arg2); end

  private

  # source://kredis//lib/kredis/types/scalar.rb#45
  def set_default; end
end

# source://kredis//lib/kredis/types/set.rb#3
class Kredis::Types::Set < ::Kredis::Types::Proxying
  include ::Kredis::DefaultValues

  # source://kredis//lib/kredis/types/set.rb#15
  def <<(*members); end

  # source://kredis//lib/kredis/types/set.rb#15
  def add(*members); end

  # source://kredis//lib/kredis/types/set.rb#43
  def clear; end

  # source://kredis//lib/kredis/default_values.rb#11
  def default; end

  # source://kredis//lib/kredis/default_values.rb#7
  def default=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def del(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def exists?(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://kredis//lib/kredis/types/set.rb#31
  def include?(member); end

  # source://kredis//lib/kredis/types/set.rb#10
  def members; end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def multi(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/set.rb#20
  def remove(*members); end

  # source://kredis//lib/kredis/types/set.rb#24
  def replace(*members); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def sadd(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/set.rb#47
  def sample(count = T.unsafe(nil)); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def scard(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def sismember(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/set.rb#35
  def size; end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def smembers(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def spop(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def srandmember(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def srem(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/set.rb#39
  def take; end

  # source://kredis//lib/kredis/types/set.rb#10
  def to_a; end

  # Returns the value of attribute typed.
  #
  # source://kredis//lib/kredis/types/set.rb#8
  def typed; end

  # Sets the attribute typed
  #
  # @param value the value to set the attribute typed to.
  #
  # source://kredis//lib/kredis/types/set.rb#8
  def typed=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def unwatch(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def watch(*_arg0, **_arg1, &_arg2); end

  private

  # source://kredis//lib/kredis/types/set.rb#56
  def set_default; end
end

# source://kredis//lib/kredis/types/slots.rb#3
class Kredis::Types::Slots < ::Kredis::Types::Proxying
  # Returns the value of attribute available.
  #
  # source://kredis//lib/kredis/types/slots.rb#8
  def available; end

  # Sets the attribute available
  #
  # @param value the value to set the attribute available to.
  #
  # source://kredis//lib/kredis/types/slots.rb#8
  def available=(_arg0); end

  # @return [Boolean]
  #
  # source://kredis//lib/kredis/types/slots.rb#43
  def available?; end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def decr(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def del(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def exists?(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def get(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def incr(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/slots.rb#34
  def release; end

  # source://kredis//lib/kredis/types/slots.rb#10
  def reserve; end

  # source://kredis//lib/kredis/types/slots.rb#49
  def reset; end

  # source://kredis//lib/kredis/types/slots.rb#53
  def taken; end
end

# source://kredis//lib/kredis/types/slots.rb#4
class Kredis::Types::Slots::NotAvailable < ::StandardError; end

# You'd normally call this a set, but Redis already has another data type for that
#
# source://kredis//lib/kredis/types/unique_list.rb#4
class Kredis::Types::UniqueList < ::Kredis::Types::List
  # source://kredis//lib/kredis/types/unique_list.rb#20
  def <<(elements); end

  # source://kredis//lib/kredis/types/unique_list.rb#20
  def append(elements); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def exists?(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute limit.
  #
  # source://kredis//lib/kredis/types/unique_list.rb#7
  def limit; end

  # Sets the attribute limit
  #
  # @param value the value to set the attribute limit to.
  #
  # source://kredis//lib/kredis/types/unique_list.rb#7
  def limit=(_arg0); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def ltrim(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/proxying.rb#9
  def multi(*_arg0, **_arg1, &_arg2); end

  # source://kredis//lib/kredis/types/unique_list.rb#9
  def prepend(elements); end

  # Returns the value of attribute typed.
  #
  # source://kredis//lib/kredis/types/unique_list.rb#7
  def typed; end

  # Sets the attribute typed
  #
  # @param value the value to set the attribute typed to.
  #
  # source://kredis//lib/kredis/types/unique_list.rb#7
  def typed=(_arg0); end
end

# source://kredis//lib/kredis/version.rb#2
Kredis::VERSION = T.let(T.unsafe(nil), String)
