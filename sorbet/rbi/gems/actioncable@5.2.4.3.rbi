# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   tapioca sync

# typed: true

module ActionCable
  extend(::ActiveSupport::Autoload)


  private

  def server; end

  def self.gem_version; end
  def self.server; end
  def self.version; end
end

module ActionCable::Channel
  extend(::ActiveSupport::Autoload)
end

class ActionCable::Channel::Base
  include(::ActiveSupport::Callbacks)
  include(::ActionCable::Channel::Callbacks)
  include(::ActionCable::Channel::PeriodicTimers)
  include(::ActionCable::Channel::Streams)
  include(::ActionCable::Channel::Naming)
  include(::ActionCable::Channel::Broadcasting)
  extend(::ActiveSupport::Callbacks::ClassMethods)
  extend(::ActiveSupport::DescendantsTracker)
  extend(::ActionCable::Channel::Callbacks::ClassMethods)
  extend(::ActionCable::Channel::PeriodicTimers::ClassMethods)
  extend(::ActionCable::Channel::Naming::ClassMethods)
  extend(::ActionCable::Channel::Broadcasting::ClassMethods)

  def initialize(connection, identifier, params = _); end

  def __callbacks; end
  def __callbacks?; end
  def _run_subscribe_callbacks(&block); end
  def _run_unsubscribe_callbacks(&block); end
  def _subscribe_callbacks; end
  def _unsubscribe_callbacks; end
  def connection; end
  def identifier; end
  def logger(*args, &block); end
  def params; end
  def perform_action(data); end
  def periodic_timers=(val); end
  def subscribe_to_channel; end
  def unsubscribe_from_channel; end

  private

  def action_signature(action, data); end
  def defer_subscription_confirmation!; end
  def defer_subscription_confirmation?; end
  def delegate_connection_identifiers; end
  def dispatch_action(action, data); end
  def ensure_confirmation_sent; end
  def extract_action(data); end
  def processable_action?(action); end
  def reject; end
  def reject_subscription; end
  def subscribed; end
  def subscription_confirmation_sent?; end
  def subscription_rejected?; end
  def transmit(data, via: _); end
  def transmit_subscription_confirmation; end
  def transmit_subscription_rejection; end
  def unsubscribed; end

  def self.__callbacks; end
  def self.__callbacks=(val); end
  def self.__callbacks?; end
  def self._subscribe_callbacks; end
  def self._subscribe_callbacks=(value); end
  def self._unsubscribe_callbacks; end
  def self._unsubscribe_callbacks=(value); end
  def self.action_methods; end
  def self.periodic_timers; end
  def self.periodic_timers=(val); end
  def self.periodic_timers?; end
end

module ActionCable::Channel::Broadcasting
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActionCable::Channel::Broadcasting::ClassMethods)

  def broadcasting_for(*args, &block); end
end

module ActionCable::Channel::Broadcasting::ClassMethods
  def broadcast_to(model, message); end
  def broadcasting_for(model); end
end

module ActionCable::Channel::Callbacks
  extend(::ActiveSupport::Concern)

  include(::ActiveSupport::Callbacks)

  mixes_in_class_methods(::ActionCable::Channel::Callbacks::ClassMethods)
end

module ActionCable::Channel::Callbacks::ClassMethods
  def after_subscribe(*methods, &block); end
  def after_unsubscribe(*methods, &block); end
  def before_subscribe(*methods, &block); end
  def before_unsubscribe(*methods, &block); end
  def on_subscribe(*methods, &block); end
  def on_unsubscribe(*methods, &block); end
end

module ActionCable::Channel::Naming
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActionCable::Channel::Naming::ClassMethods)

  def channel_name(*args, &block); end
end

module ActionCable::Channel::Naming::ClassMethods
  def channel_name; end
end

module ActionCable::Channel::PeriodicTimers
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActionCable::Channel::PeriodicTimers::ClassMethods)


  private

  def active_periodic_timers; end
  def start_periodic_timer(callback, every:); end
  def start_periodic_timers; end
  def stop_periodic_timers; end
end

module ActionCable::Channel::PeriodicTimers::ClassMethods
  def periodically(callback_or_method_name = _, every:, &block); end
end

module ActionCable::Channel::Streams
  extend(::ActiveSupport::Concern)

  def pubsub(*args, &block); end
  def stop_all_streams; end
  def stream_for(model, callback = _, coder: _, &block); end
  def stream_from(broadcasting, callback = _, coder: _, &block); end

  private

  def default_stream_handler(broadcasting, coder:); end
  def identity_handler; end
  def stream_decoder(handler = _, coder:); end
  def stream_handler(broadcasting, user_handler, coder: _); end
  def stream_transmitter(handler = _, broadcasting:); end
  def streams; end
  def worker_pool_stream_handler(broadcasting, user_handler, coder: _); end
end

module ActionCable::Connection
  extend(::ActiveSupport::Autoload)
end

module ActionCable::Connection::Authorization
  def reject_unauthorized_connection; end
end

class ActionCable::Connection::Authorization::UnauthorizedError < ::StandardError
end

class ActionCable::Connection::Base
  include(::ActionCable::Connection::Identification)
  include(::ActionCable::Connection::InternalChannel)
  include(::ActionCable::Connection::Authorization)
  extend(::ActionCable::Connection::Identification::ClassMethods)

  def initialize(server, env, coder: _); end

  def beat; end
  def close; end
  def dispatch_websocket_message(websocket_message); end
  def env; end
  def event_loop(*args, &block); end
  def identifiers; end
  def identifiers=(val); end
  def identifiers?; end
  def logger; end
  def on_close(reason, code); end
  def on_error(message); end
  def on_message(message); end
  def on_open; end
  def process; end
  def protocol; end
  def pubsub(*args, &block); end
  def receive(websocket_message); end
  def send_async(method, *arguments); end
  def server; end
  def statistics; end
  def subscriptions; end
  def transmit(cable_message); end
  def worker_pool; end

  protected

  def message_buffer; end
  def websocket; end

  private

  def allow_request_origin?; end
  def cookies; end
  def decode(websocket_message); end
  def encode(cable_message); end
  def finished_request_message; end
  def handle_close; end
  def handle_open; end
  def invalid_request_message; end
  def new_tagged_logger; end
  def request; end
  def respond_to_invalid_request; end
  def respond_to_successful_request; end
  def send_welcome_message; end
  def started_request_message; end
  def successful_request_message; end

  def self.identifiers; end
  def self.identifiers=(val); end
  def self.identifiers?; end
end

class ActionCable::Connection::ClientSocket
  def initialize(env, event_target, event_loop, protocols); end

  def alive?; end
  def client_gone; end
  def close(code = _, reason = _); end
  def env; end
  def parse(data); end
  def protocol; end
  def rack_response; end
  def start_driver; end
  def transmit(message); end
  def url; end
  def write(data); end

  private

  def begin_close(reason, code); end
  def emit_error(message); end
  def finalize_close; end
  def open; end
  def receive_message(data); end

  def self.determine_url(env); end
  def self.secure_request?(env); end
end

ActionCable::Connection::ClientSocket::CLOSED = T.let(T.unsafe(nil), Integer)

ActionCable::Connection::ClientSocket::CLOSING = T.let(T.unsafe(nil), Integer)

ActionCable::Connection::ClientSocket::CONNECTING = T.let(T.unsafe(nil), Integer)

ActionCable::Connection::ClientSocket::OPEN = T.let(T.unsafe(nil), Integer)

module ActionCable::Connection::Identification
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActionCable::Connection::Identification::ClassMethods)

  def connection_identifier; end

  private

  def connection_gid(ids); end
end

module ActionCable::Connection::Identification::ClassMethods
  def identified_by(*identifiers); end
end

module ActionCable::Connection::InternalChannel
  extend(::ActiveSupport::Concern)


  private

  def internal_channel; end
  def process_internal_message(message); end
  def subscribe_to_internal_channel; end
  def unsubscribe_from_internal_channel; end
end

class ActionCable::Connection::MessageBuffer
  def initialize(connection); end

  def append(message); end
  def process!; end
  def processing?; end

  protected

  def buffered_messages; end
  def connection; end

  private

  def buffer(message); end
  def receive(message); end
  def receive_buffered_messages; end
  def valid?(message); end
end

class ActionCable::Connection::Stream
  def initialize(event_loop, socket); end

  def close; end
  def each(&callback); end
  def flush_write_buffer; end
  def hijack_rack_socket; end
  def receive(data); end
  def shutdown; end
  def write(data); end

  private

  def clean_rack_hijack; end
end

class ActionCable::Connection::StreamEventLoop
  def initialize; end

  def attach(io, stream); end
  def detach(io, stream); end
  def post(task = _, &block); end
  def stop; end
  def timer(interval, &block); end
  def writes_pending(io); end

  private

  def run; end
  def spawn; end
  def wakeup; end
end

class ActionCable::Connection::Subscriptions
  def initialize(connection); end

  def add(data); end
  def execute_command(data); end
  def identifiers; end
  def logger(*args, &block); end
  def perform_action(data); end
  def remove(data); end
  def remove_subscription(subscription); end
  def unsubscribe_from_all; end

  protected

  def connection; end
  def subscriptions; end

  private

  def find(data); end
end

class ActionCable::Connection::TaggedLoggerProxy
  def initialize(logger, tags:); end

  def add_tags(*tags); end
  def debug(message); end
  def error(message); end
  def fatal(message); end
  def info(message); end
  def tag(logger); end
  def tags; end
  def unknown(message); end
  def warn(message); end

  private

  def log(type, message); end
end

class ActionCable::Connection::WebSocket
  def initialize(env, event_target, event_loop, protocols: _); end

  def alive?; end
  def close; end
  def possible?; end
  def protocol; end
  def rack_response; end
  def transmit(data); end

  protected

  def websocket; end
end

class ActionCable::Engine < ::Rails::Engine
end

module ActionCable::Helpers
end

module ActionCable::Helpers::ActionCableHelper
  def action_cable_meta_tag; end
end

ActionCable::INTERNAL = T.let(T.unsafe(nil), Hash)

class ActionCable::RemoteConnections
  def initialize(server); end

  def server; end
  def where(identifier); end
end

class ActionCable::RemoteConnections::RemoteConnection
  include(::ActionCable::Connection::InternalChannel)
  include(::ActionCable::Connection::Identification)
  extend(::ActionCable::Connection::Identification::ClassMethods)

  def initialize(server, ids); end

  def disconnect; end
  def identifiers; end
  def identifiers=(val); end
  def identifiers?; end

  protected

  def server; end

  private

  def set_identifier_instance_vars(ids); end
  def valid_identifiers?(ids); end

  def self.identifiers; end
  def self.identifiers=(val); end
  def self.identifiers?; end
end

class ActionCable::RemoteConnections::RemoteConnection::InvalidIdentifiersError < ::StandardError
end

module ActionCable::Server
  extend(::ActiveSupport::Autoload)
end

class ActionCable::Server::Base
  include(::ActionCable::Server::Broadcasting)
  include(::ActionCable::Server::Connections)

  def initialize; end

  def call(env); end
  def config; end
  def config=(obj); end
  def connection_identifiers; end
  def disconnect(identifiers); end
  def event_loop; end
  def logger(*args, &block); end
  def mutex; end
  def pubsub; end
  def remote_connections; end
  def restart; end
  def worker_pool; end

  def self.config; end
  def self.config=(obj); end
  def self.logger; end
end

module ActionCable::Server::Broadcasting
  def broadcast(broadcasting, message, coder: _); end
  def broadcaster_for(broadcasting, coder: _); end
end

class ActionCable::Server::Broadcasting::Broadcaster
  def initialize(server, broadcasting, coder:); end

  def broadcast(message); end
  def broadcasting; end
  def coder; end
  def server; end
end

class ActionCable::Server::Configuration
  def initialize; end

  def allow_same_origin_as_host; end
  def allow_same_origin_as_host=(_); end
  def allowed_request_origins; end
  def allowed_request_origins=(_); end
  def cable; end
  def cable=(_); end
  def connection_class; end
  def connection_class=(_); end
  def disable_request_forgery_protection; end
  def disable_request_forgery_protection=(_); end
  def log_tags; end
  def log_tags=(_); end
  def logger; end
  def logger=(_); end
  def mount_path; end
  def mount_path=(_); end
  def pubsub_adapter; end
  def url; end
  def url=(_); end
  def worker_pool_size; end
  def worker_pool_size=(_); end
end

module ActionCable::Server::Connections
  def add_connection(connection); end
  def connections; end
  def open_connections_statistics; end
  def remove_connection(connection); end
  def setup_heartbeat_timer; end
end

ActionCable::Server::Connections::BEAT_INTERVAL = T.let(T.unsafe(nil), Integer)

class ActionCable::Server::Worker
  include(::ActiveSupport::Callbacks)
  extend(::ActiveSupport::Callbacks::ClassMethods)
  extend(::ActiveSupport::DescendantsTracker)

  def __callbacks; end
  def __callbacks?; end
  def _run_work_callbacks(&block); end
  def _work_callbacks; end
  def connection; end
  def connection=(obj); end

  def self.__callbacks; end
  def self.__callbacks=(val); end
  def self.__callbacks?; end
  def self._work_callbacks; end
  def self._work_callbacks=(value); end
  def self.connection; end
  def self.connection=(obj); end
end

module ActionCable::SubscriptionAdapter
  extend(::ActiveSupport::Autoload)
end

class ActionCable::SubscriptionAdapter::Base
  def initialize(server); end

  def broadcast(channel, payload); end
  def logger; end
  def server; end
  def shutdown; end
  def subscribe(channel, message_callback, success_callback = _); end
  def unsubscribe(channel, message_callback); end
end

module ActionCable::SubscriptionAdapter::ChannelPrefix
  def broadcast(channel, payload); end
  def subscribe(channel, callback, success_callback = _); end
  def unsubscribe(channel, callback); end

  private

  def channel_with_prefix(channel); end
end

class ActionCable::SubscriptionAdapter::SubscriberMap
  def initialize; end

  def add_channel(channel, on_success); end
  def add_subscriber(channel, subscriber, on_success); end
  def broadcast(channel, message); end
  def invoke_callback(callback, message); end
  def remove_channel(channel); end
  def remove_subscriber(channel, subscriber); end
end

module ActionCable::VERSION
end

ActionCable::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

ActionCable::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

ActionCable::VERSION::PRE = T.let(T.unsafe(nil), String)

ActionCable::VERSION::STRING = T.let(T.unsafe(nil), String)

ActionCable::VERSION::TINY = T.let(T.unsafe(nil), Integer)
