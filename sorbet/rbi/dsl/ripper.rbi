# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Ripper`.
# Please instead update this file by running `bin/tapioca dsl Ripper`.

class Ripper
  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_BEGIN(param0); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_CHAR(value); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_END(param0); end

  sig { params(value: ::String).returns(T.untyped) }
  def on___end__(value); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_alias(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_alias_error(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_aref(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_aref_field(param0, param1); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_arg_ambiguous(param0); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_arg_paren(param0); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_args_add(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_args_add_block(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_args_add_star(param0, param1); end

  sig { returns(T.untyped) }
  def on_args_forward; end

  sig { returns(T.untyped) }
  def on_args_new; end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_array(param0); end

  sig { params(param0: T.untyped, param1: T.untyped, param2: T.untyped, param3: T.untyped).returns(T.untyped) }
  def on_aryptn(param0, param1, param2, param3); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_assign(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_assign_error(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_assoc_new(param0, param1); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_assoc_splat(param0); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_assoclist_from_args(param0); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_backref(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_backtick(value); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_bare_assoc_hash(param0); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_begin(param0); end

  sig { params(param0: T.untyped, param1: T.untyped, param2: T.untyped).returns(T.untyped) }
  def on_binary(param0, param1, param2); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_block_var(param0, param1); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_blockarg(param0); end

  sig { params(param0: T.untyped, param1: T.untyped, param2: T.untyped, param3: T.untyped).returns(T.untyped) }
  def on_bodystmt(param0, param1, param2, param3); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_brace_block(param0, param1); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_break(param0); end

  sig { params(param0: T.untyped, param1: T.untyped, param2: T.untyped).returns(T.untyped) }
  def on_call(param0, param1, param2); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_case(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped, param2: T.untyped).returns(T.untyped) }
  def on_class(param0, param1, param2); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_class_name_error(param0, param1); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_comma(value); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_command(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped, param2: T.untyped, param3: T.untyped).returns(T.untyped) }
  def on_command_call(param0, param1, param2, param3); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_comment(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_const(value); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_const_path_field(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_const_path_ref(param0, param1); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_const_ref(param0); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_cvar(value); end

  sig { params(param0: T.untyped, param1: T.untyped, param2: T.untyped).returns(T.untyped) }
  def on_def(param0, param1, param2); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_defined(param0); end

  sig do
    params(
      param0: T.untyped,
      param1: T.untyped,
      param2: T.untyped,
      param3: T.untyped,
      param4: T.untyped
    ).returns(T.untyped)
  end
  def on_defs(param0, param1, param2, param3, param4); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_do_block(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_dot2(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_dot3(param0, param1); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_dyna_symbol(param0); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_else(param0); end

  sig { params(param0: T.untyped, param1: T.untyped, param2: T.untyped).returns(T.untyped) }
  def on_elsif(param0, param1, param2); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_embdoc(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_embdoc_beg(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_embdoc_end(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_embexpr_beg(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_embexpr_end(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_embvar(value); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_ensure(param0); end

  sig { returns(T.untyped) }
  def on_excessed_comma; end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_fcall(param0); end

  sig { params(param0: T.untyped, param1: T.untyped, param2: T.untyped).returns(T.untyped) }
  def on_field(param0, param1, param2); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_float(value); end

  sig { params(param0: T.untyped, param1: T.untyped, param2: T.untyped, param3: T.untyped).returns(T.untyped) }
  def on_fndptn(param0, param1, param2, param3); end

  sig { params(param0: T.untyped, param1: T.untyped, param2: T.untyped).returns(T.untyped) }
  def on_for(param0, param1, param2); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_gvar(value); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_hash(param0); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_heredoc_beg(value); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_heredoc_dedent(param0, param1); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_heredoc_end(value); end

  sig { params(param0: T.untyped, param1: T.untyped, param2: T.untyped).returns(T.untyped) }
  def on_hshptn(param0, param1, param2); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_ident(value); end

  sig { params(param0: T.untyped, param1: T.untyped, param2: T.untyped).returns(T.untyped) }
  def on_if(param0, param1, param2); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_if_mod(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped, param2: T.untyped).returns(T.untyped) }
  def on_ifop(param0, param1, param2); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_ignored_nl(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_ignored_sp(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_imaginary(value); end

  sig { params(param0: T.untyped, param1: T.untyped, param2: T.untyped).returns(T.untyped) }
  def on_in(param0, param1, param2); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_int(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_ivar(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_kw(value); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_kwrest_param(param0); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_label(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_label_end(value); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_lambda(param0, param1); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_lbrace(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_lbracket(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_lparen(value); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_magic_comment(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_massign(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_method_add_arg(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_method_add_block(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_mlhs_add(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_mlhs_add_post(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_mlhs_add_star(param0, param1); end

  sig { returns(T.untyped) }
  def on_mlhs_new; end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_mlhs_paren(param0); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_module(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_mrhs_add(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_mrhs_add_star(param0, param1); end

  sig { returns(T.untyped) }
  def on_mrhs_new; end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_mrhs_new_from_args(param0); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_next(param0); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_nl(value); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_nokw_param(param0); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_op(value); end

  sig { params(param0: T.untyped, param1: T.untyped, param2: T.untyped).returns(T.untyped) }
  def on_opassign(param0, param1, param2); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_operator_ambiguous(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_param_error(param0, param1); end

  sig do
    params(
      param0: T.untyped,
      param1: T.untyped,
      param2: T.untyped,
      param3: T.untyped,
      param4: T.untyped,
      param5: T.untyped,
      param6: T.untyped
    ).returns(T.untyped)
  end
  def on_params(param0, param1, param2, param3, param4, param5, param6); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_paren(param0); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_parse_error(param0); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_period(value); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_program(param0); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_qsymbols_add(param0, param1); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_qsymbols_beg(value); end

  sig { returns(T.untyped) }
  def on_qsymbols_new; end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_qwords_add(param0, param1); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_qwords_beg(value); end

  sig { returns(T.untyped) }
  def on_qwords_new; end

  sig { params(value: ::String).returns(T.untyped) }
  def on_rational(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_rbrace(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_rbracket(value); end

  sig { returns(T.untyped) }
  def on_redo; end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_regexp_add(param0, param1); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_regexp_beg(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_regexp_end(value); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_regexp_literal(param0, param1); end

  sig { returns(T.untyped) }
  def on_regexp_new; end

  sig { params(param0: T.untyped, param1: T.untyped, param2: T.untyped, param3: T.untyped).returns(T.untyped) }
  def on_rescue(param0, param1, param2, param3); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_rescue_mod(param0, param1); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_rest_param(param0); end

  sig { returns(T.untyped) }
  def on_retry; end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_return(param0); end

  sig { returns(T.untyped) }
  def on_return0; end

  sig { params(value: ::String).returns(T.untyped) }
  def on_rparen(value); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_sclass(param0, param1); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_semicolon(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_sp(value); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_stmts_add(param0, param1); end

  sig { returns(T.untyped) }
  def on_stmts_new; end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_string_add(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_string_concat(param0, param1); end

  sig { returns(T.untyped) }
  def on_string_content; end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_string_dvar(param0); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_string_embexpr(param0); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_string_literal(param0); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_super(param0); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_symbeg(value); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_symbol(param0); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_symbol_literal(param0); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_symbols_add(param0, param1); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_symbols_beg(value); end

  sig { returns(T.untyped) }
  def on_symbols_new; end

  sig { params(value: ::String).returns(T.untyped) }
  def on_tlambda(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_tlambeg(value); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_top_const_field(param0); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_top_const_ref(param0); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_tstring_beg(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_tstring_content(value); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_tstring_end(value); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_unary(param0, param1); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_undef(param0); end

  sig { params(param0: T.untyped, param1: T.untyped, param2: T.untyped).returns(T.untyped) }
  def on_unless(param0, param1, param2); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_unless_mod(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_until(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_until_mod(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_var_alias(param0, param1); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_var_field(param0); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_var_ref(param0); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_vcall(param0); end

  sig { returns(T.untyped) }
  def on_void_stmt; end

  sig { params(param0: T.untyped, param1: T.untyped, param2: T.untyped).returns(T.untyped) }
  def on_when(param0, param1, param2); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_while(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_while_mod(param0, param1); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_word_add(param0, param1); end

  sig { returns(T.untyped) }
  def on_word_new; end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_words_add(param0, param1); end

  sig { params(value: ::String).returns(T.untyped) }
  def on_words_beg(value); end

  sig { returns(T.untyped) }
  def on_words_new; end

  sig { params(value: ::String).returns(T.untyped) }
  def on_words_sep(value); end

  sig { params(param0: T.untyped, param1: T.untyped).returns(T.untyped) }
  def on_xstring_add(param0, param1); end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_xstring_literal(param0); end

  sig { returns(T.untyped) }
  def on_xstring_new; end

  sig { params(param0: T.untyped).returns(T.untyped) }
  def on_yield(param0); end

  sig { returns(T.untyped) }
  def on_yield0; end

  sig { returns(T.untyped) }
  def on_zsuper; end
end

Ripper::EXPR_ARG = T.let(T.unsafe(nil), ::Integer)
Ripper::EXPR_ARG_ANY = T.let(T.unsafe(nil), ::Integer)
Ripper::EXPR_BEG = T.let(T.unsafe(nil), ::Integer)
Ripper::EXPR_BEG_ANY = T.let(T.unsafe(nil), ::Integer)
Ripper::EXPR_CLASS = T.let(T.unsafe(nil), ::Integer)
Ripper::EXPR_CMDARG = T.let(T.unsafe(nil), ::Integer)
Ripper::EXPR_DOT = T.let(T.unsafe(nil), ::Integer)
Ripper::EXPR_END = T.let(T.unsafe(nil), ::Integer)
Ripper::EXPR_ENDARG = T.let(T.unsafe(nil), ::Integer)
Ripper::EXPR_ENDFN = T.let(T.unsafe(nil), ::Integer)
Ripper::EXPR_END_ANY = T.let(T.unsafe(nil), ::Integer)
Ripper::EXPR_FITEM = T.let(T.unsafe(nil), ::Integer)
Ripper::EXPR_FNAME = T.let(T.unsafe(nil), ::Integer)
Ripper::EXPR_LABEL = T.let(T.unsafe(nil), ::Integer)
Ripper::EXPR_LABELED = T.let(T.unsafe(nil), ::Integer)
Ripper::EXPR_MID = T.let(T.unsafe(nil), ::Integer)
Ripper::EXPR_NONE = T.let(T.unsafe(nil), ::Integer)
Ripper::EXPR_VALUE = T.let(T.unsafe(nil), ::Integer)
Ripper::PARSER_EVENT_TABLE = T.let(T.unsafe(nil), T::Hash[::Symbol, ::Integer])
Ripper::SCANNER_EVENT_TABLE = T.let(T.unsafe(nil), T::Hash[::Symbol, ::Integer])
