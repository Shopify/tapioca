# typed: true
# frozen_string_literal: true
require "debug"

module Tapioca
  module Commands
    module Init # TODO: Being mixed in to utilize "invoke" which means we don't have to redefine defaults
      extend T::Helpers

      requires_ancestor { Thor }

      def init_execute
        return execute_without_tutorial unless @tutorial

        say "Welcome to tapioca init tutorial. Pass `--no-tutorial` and rerun the command if you know what you're doing."
        say "Executing gem RBI generation"
      end

      def execute_without_tutorial
        Runtime::Trackers.with_trackers_enabled do
          invoke(:configure, [], {})
          invoke(:annotations, [], {})
          invoke(:gem, [], {})
        end
      end

      # def print_init_next_steps
      #   say(<<~OUTPUT)
      #     #{set_color("This project is now set up for use with Sorbet and Tapioca", :bold)}
      #
      #     The sorbet/ folder should exist and look something like this:
      #
      #     â”œâ”€â”€ config             # Default options to be passed to Sorbet on every run
      #     â””â”€â”€ rbi/
      #       â”œâ”€â”€ annotations/     # Type definitions pulled from the rbi-central repository
      #       â”œâ”€â”€ gems/            # Autogenerated type definitions for your gems
      #       â””â”€â”€ todo.rbi         # Constants which were still missing after RBI generation
      #     â””â”€â”€ tapioca/
      #       â”œâ”€â”€ config.yml       # Default options to be passed to Tapioca
      #       â””â”€â”€ require.rb       # A file where you can make requires from gems that might be needed for gem RBI generation
      #
      #     Please check this folder into version control.
      #
      #     #{set_color("ðŸ¤” What's next", :bold)}
      #
      #     1. Many Ruby applications use metaprogramming DSLs to dynamically generate constants and methods.
      #       To generate type definitions for any DSLs in your application, run:
      #
      #       #{set_color("bin/tapioca dsl", :cyan)}
      #
      #     2. Check whether the constants in the #{set_color("sorbet/rbi/todo.rbi", :cyan)} file actually exist in your project.
      #       It is possible that some of these constants are typos, and leaving them in #{set_color("todo.rbi", :cyan)} will
      #       hide errors in your application. Ideally, you should be able to remove all definitions
      #       from this file and delete it.
      #
      #     3. Typecheck your project:
      #
      #       #{set_color("bundle exec srb tc", :cyan)}
      #
      #       There should not be any typechecking errors.
      #
      #     4. Upgrade a file marked "#{set_color("# typed: false", :cyan)}" to "#{set_color("# typed: true", :cyan)}".
      #       Then, run: #{set_color("bundle exec srb tc", :cyan)} and try to fix any errors.
      #
      #       You can use Spoom to bump files for you:
      #
      #       #{set_color("spoom bump --from false --to true", :cyan)}
      #
      #       To learn more about Spoom, visit: #{set_color("https://github.com/Shopify/spoom", :cyan)}
      #
      #     5. Add signatures to your methods with #{set_color("sig", :cyan)}. To learn how, read: #{set_color("https://sorbet.org/docs/sigs", :cyan)}
      #
      #     #{set_color("Documentation", :bold)}
      #     We recommend skimming these docs to get a feel for how to use Sorbet:
      #     - Gradual Type Checking: #{set_color("https://sorbet.org/docs/gradual", :cyan)}
      #     - Enabling Static Checks: #{set_color("https://sorbet.org/docs/static", :cyan)}
      #     - RBI Files: #{set_color("https://sorbet.org/docs/rbi", :cyan)}
      #   OUTPUT
      # end
    end
  end
end
